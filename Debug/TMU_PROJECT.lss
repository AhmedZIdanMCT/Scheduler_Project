
TMU_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000054f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001aa  00800060  000054f4  00005588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  0080020a  0080020a  00005732  2**0
                  ALLOC
  3 .stab         00006108  00000000  00000000  00005734  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003f19  00000000  00000000  0000b83c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f755  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000fae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00013278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00014450  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00014610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00014906  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__vector_1>
       8:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__vector_2>
       c:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__vector_10>
      2c:	0c 94 46 11 	jmp	0x228c	; 0x228c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 29 	call	0x52ce	; 0x52ce <main>
      8a:	0c 94 78 2a 	jmp	0x54f0	; 0x54f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 2a 	jmp	0x54ba	; 0x54ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 2a 	jmp	0x549a	; 0x549a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 2a 	jmp	0x549a	; 0x549a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 2a 	jmp	0x5482	; 0x5482 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 2a 	jmp	0x54ba	; 0x54ba <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4d 2a 	jmp	0x549a	; 0x549a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4d 2a 	jmp	0x549a	; 0x549a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4d 2a 	jmp	0x549a	; 0x549a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 69 2a 	jmp	0x54d2	; 0x54d2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6d 2a 	jmp	0x54da	; 0x54da <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 65 2a 	jmp	0x54ca	; 0x54ca <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TMU_vidInit>:
volatile  u8 Preload=0;

 TCB_t All_Tasks[ MAX_NUM_TASKS ];


void TMU_vidInit(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if TIMER_CH == TIMER0
	// ctc, dis oc0 pin , 1024 pres
	TCCR0 = 0x0D;
     e36:	e3 e5       	ldi	r30, 0x53	; 83
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8d e0       	ldi	r24, 0x0D	; 13
     e3c:	80 83       	st	Z, r24
	//max time of OVF
	#if OS_TICK > 0 && OS_TICK <= 16

		OCR0 = (u8) ((OS_TICK * CLOCK_FREQ) / 1024ul);
     e3e:	ec e5       	ldi	r30, 0x5C	; 92
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8c e9       	ldi	r24, 0x9C	; 156
     e44:	80 83       	st	Z, r24
		Num_CTC = 1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 0e 02 	sts	0x020E, r24
		CTC_Count = Num_CTC;
     e4c:	80 91 0e 02 	lds	r24, 0x020E
     e50:	80 93 0f 02 	sts	0x020F, r24
		TIMSKR |= (1<<1);
     e54:	a9 e5       	ldi	r26, 0x59	; 89
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e9 e5       	ldi	r30, 0x59	; 89
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	8c 93       	st	X, r24

	#endif
#else
#error"Timer channel configuration is wrong"
#endif
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <TMU_vidCreateTask>:


void TMU_vidCreateTask(void (*pfun)(void*), void * Parameter , u16 Periodicity, u8 Priority , u8 Offset)
{
     e68:	0f 93       	push	r16
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	28 97       	sbiw	r28, 0x08	; 8
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	7c 83       	std	Y+4, r23	; 0x04
     e84:	6b 83       	std	Y+3, r22	; 0x03
     e86:	5e 83       	std	Y+6, r21	; 0x06
     e88:	4d 83       	std	Y+5, r20	; 0x05
     e8a:	2f 83       	std	Y+7, r18	; 0x07
     e8c:	08 87       	std	Y+8, r16	; 0x08
#if MAX_NUM_TASKS == 0 || MAX_NUM_TASKS > 10
#error " Max num of tasks exceeds 10, it must be below 10"
#endif

	if (pfun != NULL && Periodicity > 0 && Priority < MAX_NUM_TASKS)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	09 f4       	brne	.+2      	; 0xe98 <TMU_vidCreateTask+0x30>
     e96:	57 c0       	rjmp	.+174    	; 0xf46 <TMU_vidCreateTask+0xde>
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	9e 81       	ldd	r25, Y+6	; 0x06
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	09 f4       	brne	.+2      	; 0xea2 <TMU_vidCreateTask+0x3a>
     ea0:	52 c0       	rjmp	.+164    	; 0xf46 <TMU_vidCreateTask+0xde>
     ea2:	8f 81       	ldd	r24, Y+7	; 0x07
     ea4:	85 30       	cpi	r24, 0x05	; 5
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <TMU_vidCreateTask+0x42>
     ea8:	4e c0       	rjmp	.+156    	; 0xf46 <TMU_vidCreateTask+0xde>
	{
		All_Tasks [ Priority ].fun = pfun;
     eaa:	8f 81       	ldd	r24, Y+7	; 0x07
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	fc 01       	movw	r30, r24
     ebe:	e7 5b       	subi	r30, 0xB7	; 183
     ec0:	fd 4f       	sbci	r31, 0xFD	; 253
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	80 83       	st	Z, r24
		All_Tasks [ Priority ].periodicity = Periodicity;
     eca:	8f 81       	ldd	r24, Y+7	; 0x07
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	fc 01       	movw	r30, r24
     ee0:	e7 5b       	subi	r30, 0xB7	; 183
     ee2:	fd 4f       	sbci	r31, 0xFD	; 253
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	91 83       	std	Z+1, r25	; 0x01
     eea:	80 83       	st	Z, r24
		All_Tasks [ Priority ].state = READY;
     eec:	8f 81       	ldd	r24, Y+7	; 0x07
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	fc 01       	movw	r30, r24
     f00:	e1 5b       	subi	r30, 0xB1	; 177
     f02:	fd 4f       	sbci	r31, 0xFD	; 253
     f04:	88 e3       	ldi	r24, 0x38	; 56
     f06:	80 83       	st	Z, r24
		All_Tasks [ Priority ].offset = Offset;
     f08:	8f 81       	ldd	r24, Y+7	; 0x07
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	fc 01       	movw	r30, r24
     f1c:	e0 5b       	subi	r30, 0xB0	; 176
     f1e:	fd 4f       	sbci	r31, 0xFD	; 253
     f20:	88 85       	ldd	r24, Y+8	; 0x08
     f22:	80 83       	st	Z, r24
		All_Tasks [ Priority ].Parameter = Parameter;
     f24:	8f 81       	ldd	r24, Y+7	; 0x07
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	fc 01       	movw	r30, r24
     f3a:	e7 5b       	subi	r30, 0xB7	; 183
     f3c:	fd 4f       	sbci	r31, 0xFD	; 253
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
	}
}
     f46:	28 96       	adiw	r28, 0x08	; 8
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <TMU_vidStartScheduler>:


void TMU_vidStartScheduler(void)
{
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <TMU_vidStartScheduler+0xe>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <TMU_vidStartScheduler+0x10>
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
	u32 Temp_Ticks=0;
     f70:	1a 82       	std	Y+2, r1	; 0x02
     f72:	1b 82       	std	Y+3, r1	; 0x03
     f74:	1c 82       	std	Y+4, r1	; 0x04
     f76:	1d 82       	std	Y+5, r1	; 0x05
	asm("SEI");
     f78:	78 94       	sei
	while(1)
	{
		if (OS_Ticks > Temp_Ticks)
     f7a:	20 91 0a 02 	lds	r18, 0x020A
     f7e:	30 91 0b 02 	lds	r19, 0x020B
     f82:	40 91 0c 02 	lds	r20, 0x020C
     f86:	50 91 0d 02 	lds	r21, 0x020D
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	ac 81       	ldd	r26, Y+4	; 0x04
     f90:	bd 81       	ldd	r27, Y+5	; 0x05
     f92:	82 17       	cp	r24, r18
     f94:	93 07       	cpc	r25, r19
     f96:	a4 07       	cpc	r26, r20
     f98:	b5 07       	cpc	r27, r21
     f9a:	78 f7       	brcc	.-34     	; 0xf7a <TMU_vidStartScheduler+0x20>
		{
			Temp_Ticks = OS_Ticks;
     f9c:	80 91 0a 02 	lds	r24, 0x020A
     fa0:	90 91 0b 02 	lds	r25, 0x020B
     fa4:	a0 91 0c 02 	lds	r26, 0x020C
     fa8:	b0 91 0d 02 	lds	r27, 0x020D
     fac:	8a 83       	std	Y+2, r24	; 0x02
     fae:	9b 83       	std	Y+3, r25	; 0x03
     fb0:	ac 83       	std	Y+4, r26	; 0x04
     fb2:	bd 83       	std	Y+5, r27	; 0x05

			//Descending [highest = max-1]
			//for (s8 i=MAX_NUM_TASKS-1 ; i>=0 ; i--)
			//Ascending  [highest = 0]
			for (u8 i=0 ; i< MAX_NUM_TASKS; i++)
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	b9 c0       	rjmp	.+370    	; 0x112a <TMU_vidStartScheduler+0x1d0>
			{
				if (All_Tasks[i].fun != NULL)
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	fc 01       	movw	r30, r24
     fcc:	e7 5b       	subi	r30, 0xB7	; 183
     fce:	fd 4f       	sbci	r31, 0xFD	; 253
     fd0:	80 81       	ld	r24, Z
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	09 f4       	brne	.+2      	; 0xfda <TMU_vidStartScheduler+0x80>
     fd8:	a5 c0       	rjmp	.+330    	; 0x1124 <TMU_vidStartScheduler+0x1ca>
				{
					if (
     fda:	20 91 0a 02 	lds	r18, 0x020A
     fde:	30 91 0b 02 	lds	r19, 0x020B
     fe2:	40 91 0c 02 	lds	r20, 0x020C
     fe6:	50 91 0d 02 	lds	r21, 0x020D
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	fc 01       	movw	r30, r24
     ffe:	e0 5b       	subi	r30, 0xB0	; 176
    1000:	fd 4f       	sbci	r31, 0xFD	; 253
    1002:	80 81       	ld	r24, Z
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a0 e0       	ldi	r26, 0x00	; 0
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	79 01       	movw	r14, r18
    100e:	8a 01       	movw	r16, r20
    1010:	e8 1a       	sub	r14, r24
    1012:	f9 0a       	sbc	r15, r25
    1014:	0a 0b       	sbc	r16, r26
    1016:	1b 0b       	sbc	r17, r27
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	88 2f       	mov	r24, r24
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	fc 01       	movw	r30, r24
    102e:	e7 5b       	subi	r30, 0xB7	; 183
    1030:	fd 4f       	sbci	r31, 0xFD	; 253
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	9c 01       	movw	r18, r24
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	c8 01       	movw	r24, r16
    103e:	b7 01       	movw	r22, r14
    1040:	0e 94 04 2a 	call	0x5408	; 0x5408 <__udivmodsi4>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	a1 05       	cpc	r26, r1
    104c:	b1 05       	cpc	r27, r1
    104e:	f1 f4       	brne	.+60     	; 0x108c <TMU_vidStartScheduler+0x132>
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	fc 01       	movw	r30, r24
    1064:	e0 5b       	subi	r30, 0xB0	; 176
    1066:	fd 4f       	sbci	r31, 0xFD	; 253
    1068:	80 81       	ld	r24, Z
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	80 91 0a 02 	lds	r24, 0x020A
    1076:	90 91 0b 02 	lds	r25, 0x020B
    107a:	a0 91 0c 02 	lds	r26, 0x020C
    107e:	b0 91 0d 02 	lds	r27, 0x020D
    1082:	82 17       	cp	r24, r18
    1084:	93 07       	cpc	r25, r19
    1086:	a4 07       	cpc	r26, r20
    1088:	b5 07       	cpc	r27, r21
    108a:	f0 f4       	brcc	.+60     	; 0x10c8 <TMU_vidStartScheduler+0x16e>
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	88 2f       	mov	r24, r24
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	fc 01       	movw	r30, r24
    10a0:	e0 5b       	subi	r30, 0xB0	; 176
    10a2:	fd 4f       	sbci	r31, 0xFD	; 253
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	80 91 0a 02 	lds	r24, 0x020A
    10b2:	90 91 0b 02 	lds	r25, 0x020B
    10b6:	a0 91 0c 02 	lds	r26, 0x020C
    10ba:	b0 91 0d 02 	lds	r27, 0x020D
    10be:	28 17       	cp	r18, r24
    10c0:	39 07       	cpc	r19, r25
    10c2:	4a 07       	cpc	r20, r26
    10c4:	5b 07       	cpc	r21, r27
    10c6:	71 f5       	brne	.+92     	; 0x1124 <TMU_vidStartScheduler+0x1ca>
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	fc 01       	movw	r30, r24
    10dc:	e1 5b       	subi	r30, 0xB1	; 177
    10de:	fd 4f       	sbci	r31, 0xFD	; 253
    10e0:	80 81       	ld	r24, Z
    10e2:	88 33       	cpi	r24, 0x38	; 56
    10e4:	f9 f4       	brne	.+62     	; 0x1124 <TMU_vidStartScheduler+0x1ca>
							OS_Ticks == All_Tasks[i].offset
							)
							&& All_Tasks[i].state == READY )
					{
						//Dispatcher
						All_Tasks[i].fun( All_Tasks[i].Parameter );
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	fc 01       	movw	r30, r24
    10fa:	e7 5b       	subi	r30, 0xB7	; 183
    10fc:	fd 4f       	sbci	r31, 0xFD	; 253
    10fe:	20 81       	ld	r18, Z
    1100:	31 81       	ldd	r19, Z+1	; 0x01
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	fc 01       	movw	r30, r24
    1118:	e7 5b       	subi	r30, 0xB7	; 183
    111a:	fd 4f       	sbci	r31, 0xFD	; 253
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	f9 01       	movw	r30, r18
    1122:	09 95       	icall
			Temp_Ticks = OS_Ticks;

			//Descending [highest = max-1]
			//for (s8 i=MAX_NUM_TASKS-1 ; i>=0 ; i--)
			//Ascending  [highest = 0]
			for (u8 i=0 ; i< MAX_NUM_TASKS; i++)
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	85 30       	cpi	r24, 0x05	; 5
    112e:	08 f4       	brcc	.+2      	; 0x1132 <TMU_vidStartScheduler+0x1d8>
    1130:	43 cf       	rjmp	.-378    	; 0xfb8 <TMU_vidStartScheduler+0x5e>
    1132:	23 cf       	rjmp	.-442    	; 0xf7a <TMU_vidStartScheduler+0x20>

00001134 <TMU_vidSuspend>:
	}
}


void TMU_vidSuspend( u8 Priority )
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	0f 92       	push	r0
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	89 83       	std	Y+1, r24	; 0x01
	if (Priority < MAX_NUM_TASKS)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	85 30       	cpi	r24, 0x05	; 5
    1144:	70 f4       	brcc	.+28     	; 0x1162 <TMU_vidSuspend+0x2e>
	{
		All_Tasks[Priority].state = PAUSED;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	fc 01       	movw	r30, r24
    115a:	e1 5b       	subi	r30, 0xB1	; 177
    115c:	fd 4f       	sbci	r31, 0xFD	; 253
    115e:	82 e2       	ldi	r24, 0x22	; 34
    1160:	80 83       	st	Z, r24
	}
}
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <TMU_vidResume>:


void TMU_vidResume ( u8 Priority )
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	0f 92       	push	r0
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	89 83       	std	Y+1, r24	; 0x01
	if (Priority < MAX_NUM_TASKS && All_Tasks[Priority].state == PAUSED)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	85 30       	cpi	r24, 0x05	; 5
    117a:	e8 f4       	brcc	.+58     	; 0x11b6 <TMU_vidResume+0x4c>
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	fc 01       	movw	r30, r24
    1190:	e1 5b       	subi	r30, 0xB1	; 177
    1192:	fd 4f       	sbci	r31, 0xFD	; 253
    1194:	80 81       	ld	r24, Z
    1196:	82 32       	cpi	r24, 0x22	; 34
    1198:	71 f4       	brne	.+28     	; 0x11b6 <TMU_vidResume+0x4c>
	{
		All_Tasks[Priority].state = READY;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	fc 01       	movw	r30, r24
    11ae:	e1 5b       	subi	r30, 0xB1	; 177
    11b0:	fd 4f       	sbci	r31, 0xFD	; 253
    11b2:	88 e3       	ldi	r24, 0x38	; 56
    11b4:	80 83       	st	Z, r24
	}
}
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <TMU_vidDelete>:


void TMU_vidDelete ( u8 Priority )
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01
	if (Priority < MAX_NUM_TASKS)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	85 30       	cpi	r24, 0x05	; 5
    11ce:	e0 f4       	brcc	.+56     	; 0x1208 <TMU_vidDelete+0x4a>
	{
		All_Tasks[Priority].state = KILLED;
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	88 2f       	mov	r24, r24
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	fc 01       	movw	r30, r24
    11e4:	e1 5b       	subi	r30, 0xB1	; 177
    11e6:	fd 4f       	sbci	r31, 0xFD	; 253
    11e8:	8a e5       	ldi	r24, 0x5A	; 90
    11ea:	80 83       	st	Z, r24
		All_Tasks[Priority].fun =NULL;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	fc 01       	movw	r30, r24
    1200:	e7 5b       	subi	r30, 0xB7	; 183
    1202:	fd 4f       	sbci	r31, 0xFD	; 253
    1204:	11 82       	std	Z+1, r1	; 0x01
    1206:	10 82       	st	Z, r1
	}
}
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <M_TIMER1_enu_init>:
static void * TIMER1_ApvidISRParameter [4] ={NULL,NULL,NULL,NULL};
u16 TIMER1_ICR_readings[]={0};
u8 i =0;

/*to be extended after configuration management*/
ES_t M_TIMER1_enu_init(){
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	89 83       	std	Y+1, r24	; 0x01
	//determine Normal WGM
	TCCR1A &= T1_clr_WGM10;
    121e:	af e4       	ldi	r26, 0x4F	; 79
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef e4       	ldi	r30, 0x4F	; 79
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8c 7f       	andi	r24, 0xFC	; 252
    122a:	8c 93       	st	X, r24
	TCCR1A |= T1_Normal_WGM10;
    122c:	af e4       	ldi	r26, 0x4F	; 79
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ef e4       	ldi	r30, 0x4F	; 79
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8c 93       	st	X, r24
	TCCR1B &= T1_clr_WGM32;
    1238:	ae e4       	ldi	r26, 0x4E	; 78
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ee e4       	ldi	r30, 0x4E	; 78
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	87 7c       	andi	r24, 0xC7	; 199
    1244:	8c 93       	st	X, r24
	TCCR1B |= T1_Normal_WGM32;
    1246:	ae e4       	ldi	r26, 0x4E	; 78
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ee e4       	ldi	r30, 0x4E	; 78
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	8c 93       	st	X, r24

	//on compare match Set OCPA
	TCCR1A &= T1_clr_COMA;
    1252:	af e4       	ldi	r26, 0x4F	; 79
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ef e4       	ldi	r30, 0x4F	; 79
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8f 73       	andi	r24, 0x3F	; 63
    125e:	8c 93       	st	X, r24
	TCCR1A |= T1_Set_Set_Set_COMA;
    1260:	af e4       	ldi	r26, 0x4F	; 79
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	ef e4       	ldi	r30, 0x4F	; 79
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 6c       	ori	r24, 0xC0	; 192
    126c:	8c 93       	st	X, r24
	TCCR1B &= T1_clr_COMB;
    126e:	ae e4       	ldi	r26, 0x4E	; 78
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	ee e4       	ldi	r30, 0x4E	; 78
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	8f 7c       	andi	r24, 0xCF	; 207
    127a:	8c 93       	st	X, r24

	//enable OF interrupt
	TIMSKR &= T1_clr_TOIE;
    127c:	a9 e5       	ldi	r26, 0x59	; 89
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e9 e5       	ldi	r30, 0x59	; 89
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	8b 7f       	andi	r24, 0xFB	; 251
    1288:	8c 93       	st	X, r24
	TIMSKR |= T1_En_TOIE;
    128a:	a9 e5       	ldi	r26, 0x59	; 89
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e9 e5       	ldi	r30, 0x59	; 89
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	84 60       	ori	r24, 0x04	; 4
    1296:	8c 93       	st	X, r24

	//enable OCA interrupt
	TIMSKR &= T1_clr_OCIEA;
    1298:	a9 e5       	ldi	r26, 0x59	; 89
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e9 e5       	ldi	r30, 0x59	; 89
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 7e       	andi	r24, 0xEF	; 239
    12a4:	8c 93       	st	X, r24
	TIMSKR |= T1_En_OCIEA;
    12a6:	a9 e5       	ldi	r26, 0x59	; 89
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e9 e5       	ldi	r30, 0x59	; 89
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 61       	ori	r24, 0x10	; 16
    12b2:	8c 93       	st	X, r24
	return Local_enuErrorState;
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b6:	0f 90       	pop	r0
    12b8:	cf 91       	pop	r28
    12ba:	df 91       	pop	r29
    12bc:	08 95       	ret

000012be <M_TIMER1_enu_start>:

ES_t M_TIMER1_enu_start(){
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_OK;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	89 83       	std	Y+1, r24	; 0x01
	//set prescaler to 1
	TCCR1B &= T1_clr_CS;
    12cc:	ae e4       	ldi	r26, 0x4E	; 78
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ee e4       	ldi	r30, 0x4E	; 78
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	88 7f       	andi	r24, 0xF8	; 248
    12d8:	8c 93       	st	X, r24
	TCCR1B |= T1_Clc_CS;
    12da:	ae e4       	ldi	r26, 0x4E	; 78
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	ee e4       	ldi	r30, 0x4E	; 78
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	8c 93       	st	X, r24
	return Local_enuErrorState;
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <M_TIMER1_enu_ICU_IntEnable>:


ES_t M_TIMER1_enu_ICU_IntEnable(){
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	TIMSKR &= T1_clr_TICE;
    1300:	a9 e5       	ldi	r26, 0x59	; 89
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e9 e5       	ldi	r30, 0x59	; 89
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 7d       	andi	r24, 0xDF	; 223
    130c:	8c 93       	st	X, r24
	TIMSKR |= T1_En_TICE;
    130e:	a9 e5       	ldi	r26, 0x59	; 89
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e9 e5       	ldi	r30, 0x59	; 89
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	80 62       	ori	r24, 0x20	; 32
    131a:	8c 93       	st	X, r24
	return Local_enuErrorState;
    131c:	89 81       	ldd	r24, Y+1	; 0x01
}
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <M_TIMER1_enu_ICU_IntDisable>:

ES_t M_TIMER1_enu_ICU_IntDisable(){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	89 83       	std	Y+1, r24	; 0x01
	TIMSKR &= T1_clr_TICE;
    1334:	a9 e5       	ldi	r26, 0x59	; 89
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e9 e5       	ldi	r30, 0x59	; 89
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8f 7d       	andi	r24, 0xDF	; 223
    1340:	8c 93       	st	X, r24
	TIMSKR &= ~(T1_En_TICE);
    1342:	a9 e5       	ldi	r26, 0x59	; 89
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e9 e5       	ldi	r30, 0x59	; 89
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8f 7d       	andi	r24, 0xDF	; 223
    134e:	8c 93       	st	X, r24
	return Local_enuErrorState;
    1350:	89 81       	ldd	r24, Y+1	; 0x01
}
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <M_TIMER1_enu_ICU_void_setTrigg>:

ES_t M_TIMER1_enu_ICU_void_setTrigg(TIMER1_Edge_type copy_edge_type){
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	00 d0       	rcall	.+0      	; 0x1360 <M_TIMER1_enu_ICU_void_setTrigg+0x6>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <M_TIMER1_enu_ICU_void_setTrigg+0x8>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &= T1_clr_ICES;
    136c:	ae e4       	ldi	r26, 0x4E	; 78
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	ee e4       	ldi	r30, 0x4E	; 78
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	8f 7b       	andi	r24, 0xBF	; 191
    1378:	8c 93       	st	X, r24
	switch(copy_edge_type){
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3c 83       	std	Y+4, r19	; 0x04
    1382:	2b 83       	std	Y+3, r18	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	69 f0       	breq	.+26     	; 0x13a6 <M_TIMER1_enu_ICU_void_setTrigg+0x4c>
    138c:	2b 81       	ldd	r18, Y+3	; 0x03
    138e:	3c 81       	ldd	r19, Y+4	; 0x04
    1390:	21 30       	cpi	r18, 0x01	; 1
    1392:	31 05       	cpc	r19, r1
    1394:	81 f4       	brne	.+32     	; 0x13b6 <M_TIMER1_enu_ICU_void_setTrigg+0x5c>
	case rising_edge:
		TCCR1B |= T1_RE_ICES;
    1396:	ae e4       	ldi	r26, 0x4E	; 78
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ee e4       	ldi	r30, 0x4E	; 78
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 64       	ori	r24, 0x40	; 64
    13a2:	8c 93       	st	X, r24
    13a4:	0a c0       	rjmp	.+20     	; 0x13ba <M_TIMER1_enu_ICU_void_setTrigg+0x60>
		break;
	case falling_edge:
		TCCR1B &= ~(T1_RE_ICES);
    13a6:	ae e4       	ldi	r26, 0x4E	; 78
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	ee e4       	ldi	r30, 0x4E	; 78
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8f 7b       	andi	r24, 0xBF	; 191
    13b2:	8c 93       	st	X, r24
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <M_TIMER1_enu_ICU_void_setTrigg+0x60>
		break;
	default:
		Local_enuErrorState = ES_OUT_OF_RANGE;
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <M_TIMER1_enu_ICU_takeReading>:

ES_t M_TIMER1_enu_ICU_takeReading(u16* reading){
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <M_TIMER1_enu_ICU_takeReading+0x6>
    13d0:	0f 92       	push	r0
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	9b 83       	std	Y+3, r25	; 0x03
    13d8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_OK;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	89 83       	std	Y+1, r24	; 0x01
	*reading = ICR1L;
    13de:	e6 e4       	ldi	r30, 0x46	; 70
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	ea 81       	ldd	r30, Y+2	; 0x02
    13ea:	fb 81       	ldd	r31, Y+3	; 0x03
    13ec:	91 83       	std	Z+1, r25	; 0x01
    13ee:	80 83       	st	Z, r24
	return Local_enuErrorState;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <M_TIMER1_ICU_clearTimer>:

ES_t M_TIMER1_ICU_clearTimer(){
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState=ES_OK;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H = 0;
    140c:	ed e4       	ldi	r30, 0x4D	; 77
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	10 82       	st	Z, r1
	return Local_enuErrorState;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
}
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <M_TIMER1_ICU_setCallBack>:
ES_t M_TIMER1_ICU_setCallBack(TIMER1_Int_type copy_Timer1_int_ID, ES_t (*Copy_pfunAppFun)(void*), void * Copy_pvidAppParameter){
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <M_TIMER1_ICU_setCallBack+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <M_TIMER1_ICU_setCallBack+0x8>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <M_TIMER1_ICU_setCallBack+0xa>
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	8a 83       	std	Y+2, r24	; 0x02
    142c:	7c 83       	std	Y+4, r23	; 0x04
    142e:	6b 83       	std	Y+3, r22	; 0x03
    1430:	5e 83       	std	Y+6, r21	; 0x06
    1432:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    1434:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pfunAppFun != NULL){
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	09 f1       	breq	.+66     	; 0x1480 <M_TIMER1_ICU_setCallBack+0x64>
		if(copy_Timer1_int_ID <=1){
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	82 30       	cpi	r24, 0x02	; 2
    1442:	d8 f4       	brcc	.+54     	; 0x147a <M_TIMER1_ICU_setCallBack+0x5e>
		TIMER1_ApfunISRFun[copy_Timer1_int_ID  ] = Copy_pfunAppFun;
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	2b 81       	ldd	r18, Y+3	; 0x03
    144c:	3c 81       	ldd	r19, Y+4	; 0x04
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	fc 01       	movw	r30, r24
    1454:	eb 5e       	subi	r30, 0xEB	; 235
    1456:	fd 4f       	sbci	r31, 0xFD	; 253
    1458:	31 83       	std	Z+1, r19	; 0x01
    145a:	20 83       	st	Z, r18
		TIMER1_ApvidISRParameter[ copy_Timer1_int_ID ] = Copy_pvidAppParameter;
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	fc 01       	movw	r30, r24
    1468:	e3 5e       	subi	r30, 0xE3	; 227
    146a:	fd 4f       	sbci	r31, 0xFD	; 253
    146c:	8d 81       	ldd	r24, Y+5	; 0x05
    146e:	9e 81       	ldd	r25, Y+6	; 0x06
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	05 c0       	rjmp	.+10     	; 0x1484 <M_TIMER1_ICU_setCallBack+0x68>
		}
		else{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <M_TIMER1_ICU_setCallBack+0x68>
		}
	}
	else{
		Local_enuErrorState = ES_NULL_POINTER;
    1480:	83 e0       	ldi	r24, 0x03	; 3
    1482:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
}
    1486:	26 96       	adiw	r28, 0x06	; 6
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <__vector_6>:

ISR(TIMER1_CAPT_vect){
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	2f 93       	push	r18
    14a4:	3f 93       	push	r19
    14a6:	4f 93       	push	r20
    14a8:	5f 93       	push	r21
    14aa:	6f 93       	push	r22
    14ac:	7f 93       	push	r23
    14ae:	8f 93       	push	r24
    14b0:	9f 93       	push	r25
    14b2:	af 93       	push	r26
    14b4:	bf 93       	push	r27
    14b6:	ef 93       	push	r30
    14b8:	ff 93       	push	r31
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
		TCCR1B &= ~(T1_RE_ICES);
		//clear ICF
		TIFR &= ~(T1_set_ICF);
		i=0;
	}*/
	if (TIMER1_ApfunISRFun[TIMER1_IC_int] != NULL){
    14c2:	80 91 15 02 	lds	r24, 0x0215
    14c6:	90 91 16 02 	lds	r25, 0x0216
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	49 f0       	breq	.+18     	; 0x14e0 <__vector_6+0x48>
		TIMER1_ApfunISRFun[TIMER1_IC_int](TIMER1_ApvidISRParameter[ TIMER1_IC_int]);
    14ce:	e0 91 15 02 	lds	r30, 0x0215
    14d2:	f0 91 16 02 	lds	r31, 0x0216
    14d6:	80 91 1d 02 	lds	r24, 0x021D
    14da:	90 91 1e 02 	lds	r25, 0x021E
    14de:	09 95       	icall
	}
}
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <M_TIMER_enum_Timer0_init>:
static u32 local_no_of_compareMAtches=0;

static void (* TIMER0_ApfunISRFun[2])()={NULL,NULL};
static void * TIMER0_ApvidISRParameter [2] ={NULL,NULL};

ES_t M_TIMER_enum_Timer0_init(Timer0_cfg_type copy_Timer0_cfg){
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	61 97       	sbiw	r28, 0x11	; 17
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	2a 83       	std	Y+2, r18	; 0x02
    151c:	3b 83       	std	Y+3, r19	; 0x03
    151e:	4c 83       	std	Y+4, r20	; 0x04
    1520:	5d 83       	std	Y+5, r21	; 0x05
    1522:	6e 83       	std	Y+6, r22	; 0x06
    1524:	7f 83       	std	Y+7, r23	; 0x07
    1526:	88 87       	std	Y+8, r24	; 0x08
ES_t Local_enuErrorState = ES_NOK;
    1528:	19 82       	std	Y+1, r1	; 0x01
switch (copy_Timer0_cfg.WG_mode){
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	39 8b       	std	Y+17, r19	; 0x11
    1532:	28 8b       	std	Y+16, r18	; 0x10
    1534:	88 89       	ldd	r24, Y+16	; 0x10
    1536:	99 89       	ldd	r25, Y+17	; 0x11
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	91 05       	cpc	r25, r1
    153c:	29 f1       	breq	.+74     	; 0x1588 <M_TIMER_enum_Timer0_init+0x82>
    153e:	28 89       	ldd	r18, Y+16	; 0x10
    1540:	39 89       	ldd	r19, Y+17	; 0x11
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	2c f4       	brge	.+10     	; 0x1552 <M_TIMER_enum_Timer0_init+0x4c>
    1548:	88 89       	ldd	r24, Y+16	; 0x10
    154a:	99 89       	ldd	r25, Y+17	; 0x11
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	61 f0       	breq	.+24     	; 0x1568 <M_TIMER_enum_Timer0_init+0x62>
    1550:	4e c0       	rjmp	.+156    	; 0x15ee <M_TIMER_enum_Timer0_init+0xe8>
    1552:	28 89       	ldd	r18, Y+16	; 0x10
    1554:	39 89       	ldd	r19, Y+17	; 0x11
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	39 f1       	breq	.+78     	; 0x15aa <M_TIMER_enum_Timer0_init+0xa4>
    155c:	88 89       	ldd	r24, Y+16	; 0x10
    155e:	99 89       	ldd	r25, Y+17	; 0x11
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	91 05       	cpc	r25, r1
    1564:	99 f1       	breq	.+102    	; 0x15cc <M_TIMER_enum_Timer0_init+0xc6>
    1566:	43 c0       	rjmp	.+134    	; 0x15ee <M_TIMER_enum_Timer0_init+0xe8>
	case Normal:
		TCCR0 &= clr_WGM;
    1568:	a3 e5       	ldi	r26, 0x53	; 83
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e3 e5       	ldi	r30, 0x53	; 83
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	87 7b       	andi	r24, 0xB7	; 183
    1574:	8c 93       	st	X, r24
		TCCR0 |= Normal_WGM;
    1576:	a3 e5       	ldi	r26, 0x53	; 83
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e3 e5       	ldi	r30, 0x53	; 83
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	37 c0       	rjmp	.+110    	; 0x15f6 <M_TIMER_enum_Timer0_init+0xf0>
		break;
	case PhaseCorrect_PWM:
		TCCR0 &= clr_WGM;
    1588:	a3 e5       	ldi	r26, 0x53	; 83
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e3 e5       	ldi	r30, 0x53	; 83
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	87 7b       	andi	r24, 0xB7	; 183
    1594:	8c 93       	st	X, r24
		TCCR0 |= PWM_PC_WGM;
    1596:	a3 e5       	ldi	r26, 0x53	; 83
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e3 e5       	ldi	r30, 0x53	; 83
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	80 64       	ori	r24, 0x40	; 64
    15a2:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	26 c0       	rjmp	.+76     	; 0x15f6 <M_TIMER_enum_Timer0_init+0xf0>
		break;
	case CTC:
		TCCR0 &= clr_WGM;
    15aa:	a3 e5       	ldi	r26, 0x53	; 83
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e3 e5       	ldi	r30, 0x53	; 83
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	87 7b       	andi	r24, 0xB7	; 183
    15b6:	8c 93       	st	X, r24
		TCCR0 |= CTC_WGM;
    15b8:	a3 e5       	ldi	r26, 0x53	; 83
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e3 e5       	ldi	r30, 0x53	; 83
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	88 60       	ori	r24, 0x08	; 8
    15c4:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	15 c0       	rjmp	.+42     	; 0x15f6 <M_TIMER_enum_Timer0_init+0xf0>
		break;
	case Fast_PWM:
		TCCR0 &= clr_WGM;
    15cc:	a3 e5       	ldi	r26, 0x53	; 83
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e3 e5       	ldi	r30, 0x53	; 83
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	87 7b       	andi	r24, 0xB7	; 183
    15d8:	8c 93       	st	X, r24
		TCCR0 |= PWM_FAST_WGM;
    15da:	a3 e5       	ldi	r26, 0x53	; 83
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e3 e5       	ldi	r30, 0x53	; 83
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	88 64       	ori	r24, 0x48	; 72
    15e6:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	04 c0       	rjmp	.+8      	; 0x15f6 <M_TIMER_enum_Timer0_init+0xf0>
		break;
	default:
		Local_enuErrorState = ES_NOK;
    15ee:	19 82       	std	Y+1, r1	; 0x01
		return Local_enuErrorState;
    15f0:	99 81       	ldd	r25, Y+1	; 0x01
    15f2:	9f 87       	std	Y+15, r25	; 0x0f
    15f4:	c2 c0       	rjmp	.+388    	; 0x177a <M_TIMER_enum_Timer0_init+0x274>
}

switch (copy_Timer0_cfg.CO_mode){
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3e 87       	std	Y+14, r19	; 0x0e
    15fe:	2d 87       	std	Y+13, r18	; 0x0d
    1600:	8d 85       	ldd	r24, Y+13	; 0x0d
    1602:	9e 85       	ldd	r25, Y+14	; 0x0e
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	91 05       	cpc	r25, r1
    1608:	19 f1       	breq	.+70     	; 0x1650 <M_TIMER_enum_Timer0_init+0x14a>
    160a:	2d 85       	ldd	r18, Y+13	; 0x0d
    160c:	3e 85       	ldd	r19, Y+14	; 0x0e
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	2c f4       	brge	.+10     	; 0x161e <M_TIMER_enum_Timer0_init+0x118>
    1614:	8d 85       	ldd	r24, Y+13	; 0x0d
    1616:	9e 85       	ldd	r25, Y+14	; 0x0e
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	61 f0       	breq	.+24     	; 0x1634 <M_TIMER_enum_Timer0_init+0x12e>
    161c:	46 c0       	rjmp	.+140    	; 0x16aa <M_TIMER_enum_Timer0_init+0x1a4>
    161e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1620:	3e 85       	ldd	r19, Y+14	; 0x0e
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	19 f1       	breq	.+70     	; 0x166e <M_TIMER_enum_Timer0_init+0x168>
    1628:	8d 85       	ldd	r24, Y+13	; 0x0d
    162a:	9e 85       	ldd	r25, Y+14	; 0x0e
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	69 f1       	breq	.+90     	; 0x168c <M_TIMER_enum_Timer0_init+0x186>
    1632:	3b c0       	rjmp	.+118    	; 0x16aa <M_TIMER_enum_Timer0_init+0x1a4>
	case Disconnected:
		TCCR0 &= clr_COM;
    1634:	a3 e5       	ldi	r26, 0x53	; 83
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e3 e5       	ldi	r30, 0x53	; 83
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	8f 7c       	andi	r24, 0xCF	; 207
    1640:	8c 93       	st	X, r24
		TCCR0 |= Dis_Dis_COM;
    1642:	a3 e5       	ldi	r26, 0x53	; 83
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e3 e5       	ldi	r30, 0x53	; 83
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8c 93       	st	X, r24
    164e:	31 c0       	rjmp	.+98     	; 0x16b2 <M_TIMER_enum_Timer0_init+0x1ac>
		break;
	case Toogle:
		TCCR0 &= clr_COM;
    1650:	a3 e5       	ldi	r26, 0x53	; 83
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e3 e5       	ldi	r30, 0x53	; 83
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 7c       	andi	r24, 0xCF	; 207
    165c:	8c 93       	st	X, r24
		TCCR0 |= Tog_Res_COM;
    165e:	a3 e5       	ldi	r26, 0x53	; 83
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e3 e5       	ldi	r30, 0x53	; 83
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	80 61       	ori	r24, 0x10	; 16
    166a:	8c 93       	st	X, r24
    166c:	22 c0       	rjmp	.+68     	; 0x16b2 <M_TIMER_enum_Timer0_init+0x1ac>
		break;
	case Clear:
		TCCR0 &= clr_COM;
    166e:	a3 e5       	ldi	r26, 0x53	; 83
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e3 e5       	ldi	r30, 0x53	; 83
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 7c       	andi	r24, 0xCF	; 207
    167a:	8c 93       	st	X, r24
		TCCR0 |= Clr_Clr_COM;
    167c:	a3 e5       	ldi	r26, 0x53	; 83
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e3 e5       	ldi	r30, 0x53	; 83
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 62       	ori	r24, 0x20	; 32
    1688:	8c 93       	st	X, r24
    168a:	13 c0       	rjmp	.+38     	; 0x16b2 <M_TIMER_enum_Timer0_init+0x1ac>
		break;
	case Set:
		TCCR0 &= clr_COM;
    168c:	a3 e5       	ldi	r26, 0x53	; 83
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e3 e5       	ldi	r30, 0x53	; 83
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8f 7c       	andi	r24, 0xCF	; 207
    1698:	8c 93       	st	X, r24
		TCCR0 |= Set_Set_COM;
    169a:	a3 e5       	ldi	r26, 0x53	; 83
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e3 e5       	ldi	r30, 0x53	; 83
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 63       	ori	r24, 0x30	; 48
    16a6:	8c 93       	st	X, r24
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <M_TIMER_enum_Timer0_init+0x1ac>
		break;
	default:
		Local_enuErrorState = ES_NOK;
    16aa:	19 82       	std	Y+1, r1	; 0x01
		return Local_enuErrorState;
    16ac:	99 81       	ldd	r25, Y+1	; 0x01
    16ae:	9f 87       	std	Y+15, r25	; 0x0f
    16b0:	64 c0       	rjmp	.+200    	; 0x177a <M_TIMER_enum_Timer0_init+0x274>
}

switch (copy_Timer0_cfg.OF_intterrupt_mode){
    16b2:	8e 81       	ldd	r24, Y+6	; 0x06
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	3c 87       	std	Y+12, r19	; 0x0c
    16ba:	2b 87       	std	Y+11, r18	; 0x0b
    16bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    16be:	9c 85       	ldd	r25, Y+12	; 0x0c
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	31 f0       	breq	.+12     	; 0x16d0 <M_TIMER_enum_Timer0_init+0x1ca>
    16c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    16c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    16c8:	21 30       	cpi	r18, 0x01	; 1
    16ca:	31 05       	cpc	r19, r1
    16cc:	81 f0       	breq	.+32     	; 0x16ee <M_TIMER_enum_Timer0_init+0x1e8>
    16ce:	1e c0       	rjmp	.+60     	; 0x170c <M_TIMER_enum_Timer0_init+0x206>
	case OFI_Disabled:
		TIMSKR  &= clr_TOIE;
    16d0:	a9 e5       	ldi	r26, 0x59	; 89
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e9 e5       	ldi	r30, 0x59	; 89
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	8e 7f       	andi	r24, 0xFE	; 254
    16dc:	8c 93       	st	X, r24
		TIMSKR &= ~(En_TOIE) ;
    16de:	a9 e5       	ldi	r26, 0x59	; 89
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e9 e5       	ldi	r30, 0x59	; 89
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	8e 7f       	andi	r24, 0xFE	; 254
    16ea:	8c 93       	st	X, r24
    16ec:	13 c0       	rjmp	.+38     	; 0x1714 <M_TIMER_enum_Timer0_init+0x20e>
		break;
	case OFI_Enabled:
		TIMSKR &= clr_TOIE;
    16ee:	a9 e5       	ldi	r26, 0x59	; 89
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e9 e5       	ldi	r30, 0x59	; 89
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8e 7f       	andi	r24, 0xFE	; 254
    16fa:	8c 93       	st	X, r24
		TIMSKR |= En_TOIE;
    16fc:	a9 e5       	ldi	r26, 0x59	; 89
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e9 e5       	ldi	r30, 0x59	; 89
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	81 60       	ori	r24, 0x01	; 1
    1708:	8c 93       	st	X, r24
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <M_TIMER_enum_Timer0_init+0x20e>
		break;
	default:
		Local_enuErrorState = ES_NOK;
    170c:	19 82       	std	Y+1, r1	; 0x01
		return Local_enuErrorState;
    170e:	39 81       	ldd	r19, Y+1	; 0x01
    1710:	3f 87       	std	Y+15, r19	; 0x0f
    1712:	33 c0       	rjmp	.+102    	; 0x177a <M_TIMER_enum_Timer0_init+0x274>
}

switch (copy_Timer0_cfg.OC_intterrupt_mode){
    1714:	8f 81       	ldd	r24, Y+7	; 0x07
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3a 87       	std	Y+10, r19	; 0x0a
    171c:	29 87       	std	Y+9, r18	; 0x09
    171e:	89 85       	ldd	r24, Y+9	; 0x09
    1720:	9a 85       	ldd	r25, Y+10	; 0x0a
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	31 f0       	breq	.+12     	; 0x1732 <M_TIMER_enum_Timer0_init+0x22c>
    1726:	29 85       	ldd	r18, Y+9	; 0x09
    1728:	3a 85       	ldd	r19, Y+10	; 0x0a
    172a:	21 30       	cpi	r18, 0x01	; 1
    172c:	31 05       	cpc	r19, r1
    172e:	81 f0       	breq	.+32     	; 0x1750 <M_TIMER_enum_Timer0_init+0x24a>
    1730:	1e c0       	rjmp	.+60     	; 0x176e <M_TIMER_enum_Timer0_init+0x268>
	case OCI_Disabled:
		TIMSKR  &= clr_OCIE;
    1732:	a9 e5       	ldi	r26, 0x59	; 89
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e9 e5       	ldi	r30, 0x59	; 89
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8d 7f       	andi	r24, 0xFD	; 253
    173e:	8c 93       	st	X, r24
		TIMSKR &= ~(En_OCIE) ;
    1740:	a9 e5       	ldi	r26, 0x59	; 89
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e9 e5       	ldi	r30, 0x59	; 89
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	8d 7f       	andi	r24, 0xFD	; 253
    174c:	8c 93       	st	X, r24
    174e:	13 c0       	rjmp	.+38     	; 0x1776 <M_TIMER_enum_Timer0_init+0x270>
		break;
	case OCI_Enabled:
		TIMSKR &= clr_OCIE;
    1750:	a9 e5       	ldi	r26, 0x59	; 89
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e9 e5       	ldi	r30, 0x59	; 89
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	8d 7f       	andi	r24, 0xFD	; 253
    175c:	8c 93       	st	X, r24
		TIMSKR |= En_OCIE;
    175e:	a9 e5       	ldi	r26, 0x59	; 89
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e9 e5       	ldi	r30, 0x59	; 89
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	82 60       	ori	r24, 0x02	; 2
    176a:	8c 93       	st	X, r24
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <M_TIMER_enum_Timer0_init+0x270>
		break;
	default:
		Local_enuErrorState = ES_NOK;
    176e:	19 82       	std	Y+1, r1	; 0x01
		return Local_enuErrorState;
    1770:	39 81       	ldd	r19, Y+1	; 0x01
    1772:	3f 87       	std	Y+15, r19	; 0x0f
    1774:	02 c0       	rjmp	.+4      	; 0x177a <M_TIMER_enum_Timer0_init+0x274>
}
return Local_enuErrorState;
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	8f 87       	std	Y+15, r24	; 0x0f
    177a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    177c:	61 96       	adiw	r28, 0x11	; 17
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <M_TIMER_enum_Timer0_start>:

ES_t M_TIMER_enum_Timer0_start(Timer0_cfg_type copy_cfg){
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	2a 97       	sbiw	r28, 0x0a	; 10
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	2a 83       	std	Y+2, r18	; 0x02
    17a4:	3b 83       	std	Y+3, r19	; 0x03
    17a6:	4c 83       	std	Y+4, r20	; 0x04
    17a8:	5d 83       	std	Y+5, r21	; 0x05
    17aa:	6e 83       	std	Y+6, r22	; 0x06
    17ac:	7f 83       	std	Y+7, r23	; 0x07
    17ae:	88 87       	std	Y+8, r24	; 0x08
ES_t Local_enuErrorState = ES_NOK;
    17b0:	19 82       	std	Y+1, r1	; 0x01
OCR0 = copy_cfg.OCR;
    17b2:	ec e5       	ldi	r30, 0x5C	; 92
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	88 85       	ldd	r24, Y+8	; 0x08
    17b8:	80 83       	st	Z, r24
switch (copy_cfg.clk_source){
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	9a 87       	std	Y+10, r25	; 0x0a
    17c0:	89 87       	std	Y+9, r24	; 0x09
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	21 e0       	ldi	r18, 0x01	; 1
    17c8:	80 30       	cpi	r24, 0x00	; 0
    17ca:	92 07       	cpc	r25, r18
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <M_TIMER_enum_Timer0_start+0x42>
    17ce:	58 c0       	rjmp	.+176    	; 0x1880 <M_TIMER_enum_Timer0_start+0xf2>
    17d0:	89 85       	ldd	r24, Y+9	; 0x09
    17d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d4:	21 e0       	ldi	r18, 0x01	; 1
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	92 07       	cpc	r25, r18
    17da:	80 f4       	brcc	.+32     	; 0x17fc <M_TIMER_enum_Timer0_start+0x6e>
    17dc:	89 85       	ldd	r24, Y+9	; 0x09
    17de:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e0:	88 30       	cpi	r24, 0x08	; 8
    17e2:	91 05       	cpc	r25, r1
    17e4:	79 f1       	breq	.+94     	; 0x1844 <M_TIMER_enum_Timer0_start+0xb6>
    17e6:	89 85       	ldd	r24, Y+9	; 0x09
    17e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ea:	80 34       	cpi	r24, 0x40	; 64
    17ec:	91 05       	cpc	r25, r1
    17ee:	c9 f1       	breq	.+114    	; 0x1862 <M_TIMER_enum_Timer0_start+0xd4>
    17f0:	89 85       	ldd	r24, Y+9	; 0x09
    17f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f4:	81 30       	cpi	r24, 0x01	; 1
    17f6:	91 05       	cpc	r25, r1
    17f8:	b1 f0       	breq	.+44     	; 0x1826 <M_TIMER_enum_Timer0_start+0x98>
    17fa:	7e c0       	rjmp	.+252    	; 0x18f8 <M_TIMER_enum_Timer0_start+0x16a>
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	24 e0       	ldi	r18, 0x04	; 4
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	92 07       	cpc	r25, r18
    1806:	09 f4       	brne	.+2      	; 0x180a <M_TIMER_enum_Timer0_start+0x7c>
    1808:	59 c0       	rjmp	.+178    	; 0x18bc <M_TIMER_enum_Timer0_start+0x12e>
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	24 e0       	ldi	r18, 0x04	; 4
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	92 07       	cpc	r25, r18
    1814:	09 f4       	brne	.+2      	; 0x1818 <M_TIMER_enum_Timer0_start+0x8a>
    1816:	61 c0       	rjmp	.+194    	; 0x18da <M_TIMER_enum_Timer0_start+0x14c>
    1818:	89 85       	ldd	r24, Y+9	; 0x09
    181a:	9a 85       	ldd	r25, Y+10	; 0x0a
    181c:	24 e0       	ldi	r18, 0x04	; 4
    181e:	80 30       	cpi	r24, 0x00	; 0
    1820:	92 07       	cpc	r25, r18
    1822:	e9 f1       	breq	.+122    	; 0x189e <M_TIMER_enum_Timer0_start+0x110>
    1824:	69 c0       	rjmp	.+210    	; 0x18f8 <M_TIMER_enum_Timer0_start+0x16a>
case IO_clk:
	TCCR0 &= clr_CS;
    1826:	a3 e5       	ldi	r26, 0x53	; 83
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e3 e5       	ldi	r30, 0x53	; 83
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	88 7f       	andi	r24, 0xF8	; 248
    1832:	8c 93       	st	X, r24
	TCCR0 |= Clc_CS;
    1834:	a3 e5       	ldi	r26, 0x53	; 83
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e3 e5       	ldi	r30, 0x53	; 83
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	81 60       	ori	r24, 0x01	; 1
    1840:	8c 93       	st	X, r24
    1842:	5b c0       	rjmp	.+182    	; 0x18fa <M_TIMER_enum_Timer0_start+0x16c>
	break;
case IO_8PS_clk:
	TCCR0 &= clr_CS;
    1844:	a3 e5       	ldi	r26, 0x53	; 83
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e3 e5       	ldi	r30, 0x53	; 83
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	88 7f       	andi	r24, 0xF8	; 248
    1850:	8c 93       	st	X, r24
	TCCR0 |= Clc_8PS_CS;
    1852:	a3 e5       	ldi	r26, 0x53	; 83
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e3 e5       	ldi	r30, 0x53	; 83
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	82 60       	ori	r24, 0x02	; 2
    185e:	8c 93       	st	X, r24
    1860:	4c c0       	rjmp	.+152    	; 0x18fa <M_TIMER_enum_Timer0_start+0x16c>
	break;
case IO_64PS_clk:
	TCCR0 &= clr_CS;
    1862:	a3 e5       	ldi	r26, 0x53	; 83
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e3 e5       	ldi	r30, 0x53	; 83
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	88 7f       	andi	r24, 0xF8	; 248
    186e:	8c 93       	st	X, r24
	TCCR0 |= Clc_64PS_CS;
    1870:	a3 e5       	ldi	r26, 0x53	; 83
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e3 e5       	ldi	r30, 0x53	; 83
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	83 60       	ori	r24, 0x03	; 3
    187c:	8c 93       	st	X, r24
    187e:	3d c0       	rjmp	.+122    	; 0x18fa <M_TIMER_enum_Timer0_start+0x16c>
	break;
case IO_256PS_clk:
	TCCR0 &= clr_CS;
    1880:	a3 e5       	ldi	r26, 0x53	; 83
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e3 e5       	ldi	r30, 0x53	; 83
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	88 7f       	andi	r24, 0xF8	; 248
    188c:	8c 93       	st	X, r24
	TCCR0 |= Clc_256PS_CS;
    188e:	a3 e5       	ldi	r26, 0x53	; 83
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e3 e5       	ldi	r30, 0x53	; 83
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	84 60       	ori	r24, 0x04	; 4
    189a:	8c 93       	st	X, r24
    189c:	2e c0       	rjmp	.+92     	; 0x18fa <M_TIMER_enum_Timer0_start+0x16c>
	break;
case IO_1024_clk:
	TCCR0 &= clr_CS;
    189e:	a3 e5       	ldi	r26, 0x53	; 83
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e3 e5       	ldi	r30, 0x53	; 83
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	88 7f       	andi	r24, 0xF8	; 248
    18aa:	8c 93       	st	X, r24
	TCCR0 |= Clc_1024PS_CS;
    18ac:	a3 e5       	ldi	r26, 0x53	; 83
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e3 e5       	ldi	r30, 0x53	; 83
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	85 60       	ori	r24, 0x05	; 5
    18b8:	8c 93       	st	X, r24
    18ba:	1f c0       	rjmp	.+62     	; 0x18fa <M_TIMER_enum_Timer0_start+0x16c>
	break;
case EXT_Falling_clk:
	TCCR0 &= clr_CS;
    18bc:	a3 e5       	ldi	r26, 0x53	; 83
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e3 e5       	ldi	r30, 0x53	; 83
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	88 7f       	andi	r24, 0xF8	; 248
    18c8:	8c 93       	st	X, r24
	TCCR0 |= Ext_Falling_CS;
    18ca:	a3 e5       	ldi	r26, 0x53	; 83
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e3 e5       	ldi	r30, 0x53	; 83
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	86 60       	ori	r24, 0x06	; 6
    18d6:	8c 93       	st	X, r24
    18d8:	10 c0       	rjmp	.+32     	; 0x18fa <M_TIMER_enum_Timer0_start+0x16c>
	break;
case EXT_Rising_clk:
	TCCR0 &= clr_CS;
    18da:	a3 e5       	ldi	r26, 0x53	; 83
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e3 e5       	ldi	r30, 0x53	; 83
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	88 7f       	andi	r24, 0xF8	; 248
    18e6:	8c 93       	st	X, r24
	TCCR0 |= Ext_Rising_CS;
    18e8:	a3 e5       	ldi	r26, 0x53	; 83
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e3 e5       	ldi	r30, 0x53	; 83
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	87 60       	ori	r24, 0x07	; 7
    18f4:	8c 93       	st	X, r24
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <M_TIMER_enum_Timer0_start+0x16c>
	break;
default:
	Local_enuErrorState = ES_NOK;
    18f8:	19 82       	std	Y+1, r1	; 0x01
	break;
}
return Local_enuErrorState;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    18fc:	2a 96       	adiw	r28, 0x0a	; 10
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <M_TIMER_enum_Timer0_stop>:

ES_t M_TIMER_enum_Timer0_stop(){
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
ES_t Local_enu_ErrorState = ES_OK;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	89 83       	std	Y+1, r24	; 0x01
TCCR0 &= clr_CS;
    191c:	a3 e5       	ldi	r26, 0x53	; 83
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e3 e5       	ldi	r30, 0x53	; 83
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	88 7f       	andi	r24, 0xF8	; 248
    1928:	8c 93       	st	X, r24
TCCR0 |= NO_clc_CS;
    192a:	a3 e5       	ldi	r26, 0x53	; 83
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e3 e5       	ldi	r30, 0x53	; 83
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8c 93       	st	X, r24
return Local_enu_ErrorState;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
}
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <M_TIMER_enum_Timer0_GetCounts>:

/*ES_t M_TIMER_enum_Timer0_GetCounts(){
//must see the counter incremented by ISR of overflow
}*/

ES_t M_TIMER_enum_Timer0_GetCounts(Timer0_cfg_type copy_cfg, u32* copy_counts){
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	2c 97       	sbiw	r28, 0x0c	; 12
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	2a 83       	std	Y+2, r18	; 0x02
    195e:	3b 83       	std	Y+3, r19	; 0x03
    1960:	4c 83       	std	Y+4, r20	; 0x04
    1962:	5d 83       	std	Y+5, r21	; 0x05
    1964:	6e 83       	std	Y+6, r22	; 0x06
    1966:	7f 83       	std	Y+7, r23	; 0x07
    1968:	88 87       	std	Y+8, r24	; 0x08
    196a:	1a 87       	std	Y+10, r17	; 0x0a
    196c:	09 87       	std	Y+9, r16	; 0x09
	ES_t Local_enu_ErrorState= ES_NOK;
    196e:	19 82       	std	Y+1, r1	; 0x01
	switch (copy_cfg.WG_mode){
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3c 87       	std	Y+12, r19	; 0x0c
    1978:	2b 87       	std	Y+11, r18	; 0x0b
    197a:	8b 85       	ldd	r24, Y+11	; 0x0b
    197c:	9c 85       	ldd	r25, Y+12	; 0x0c
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	31 f0       	breq	.+12     	; 0x198e <M_TIMER_enum_Timer0_GetCounts+0x4e>
    1982:	2b 85       	ldd	r18, Y+11	; 0x0b
    1984:	3c 85       	ldd	r19, Y+12	; 0x0c
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	f9 f0       	breq	.+62     	; 0x19ca <M_TIMER_enum_Timer0_GetCounts+0x8a>
    198c:	43 c0       	rjmp	.+134    	; 0x1a14 <M_TIMER_enum_Timer0_GetCounts+0xd4>
	case Normal:
		*copy_counts = TCNT0+(No_Of_overFlows*256);
    198e:	e2 e5       	ldi	r30, 0x52	; 82
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	80 91 28 02 	lds	r24, 0x0228
    19a0:	90 91 29 02 	lds	r25, 0x0229
    19a4:	a0 91 2a 02 	lds	r26, 0x022A
    19a8:	b0 91 2b 02 	lds	r27, 0x022B
    19ac:	ba 2f       	mov	r27, r26
    19ae:	a9 2f       	mov	r26, r25
    19b0:	98 2f       	mov	r25, r24
    19b2:	88 27       	eor	r24, r24
    19b4:	82 0f       	add	r24, r18
    19b6:	93 1f       	adc	r25, r19
    19b8:	a4 1f       	adc	r26, r20
    19ba:	b5 1f       	adc	r27, r21
    19bc:	e9 85       	ldd	r30, Y+9	; 0x09
    19be:	fa 85       	ldd	r31, Y+10	; 0x0a
    19c0:	80 83       	st	Z, r24
    19c2:	91 83       	std	Z+1, r25	; 0x01
    19c4:	a2 83       	std	Z+2, r26	; 0x02
    19c6:	b3 83       	std	Z+3, r27	; 0x03
    19c8:	26 c0       	rjmp	.+76     	; 0x1a16 <M_TIMER_enum_Timer0_GetCounts+0xd6>
		break;
	case CTC:
		*copy_counts = TCNT0+(No_Of_compareMatches*copy_cfg.OCR);
    19ca:	e2 e5       	ldi	r30, 0x52	; 82
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	e8 2e       	mov	r14, r24
    19d2:	ff 24       	eor	r15, r15
    19d4:	00 e0       	ldi	r16, 0x00	; 0
    19d6:	10 e0       	ldi	r17, 0x00	; 0
    19d8:	88 85       	ldd	r24, Y+8	; 0x08
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a0 e0       	ldi	r26, 0x00	; 0
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	20 91 2c 02 	lds	r18, 0x022C
    19e6:	30 91 2d 02 	lds	r19, 0x022D
    19ea:	40 91 2e 02 	lds	r20, 0x022E
    19ee:	50 91 2f 02 	lds	r21, 0x022F
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 c5 29 	call	0x538a	; 0x538a <__mulsi3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8e 0d       	add	r24, r14
    1a00:	9f 1d       	adc	r25, r15
    1a02:	a0 1f       	adc	r26, r16
    1a04:	b1 1f       	adc	r27, r17
    1a06:	e9 85       	ldd	r30, Y+9	; 0x09
    1a08:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a0a:	80 83       	st	Z, r24
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	a2 83       	std	Z+2, r26	; 0x02
    1a10:	b3 83       	std	Z+3, r27	; 0x03
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <M_TIMER_enum_Timer0_GetCounts+0xd6>
		break;
	default:
		Local_enu_ErrorState = ES_NOK;
    1a14:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return Local_enu_ErrorState;
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a18:	2c 96       	adiw	r28, 0x0c	; 12
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	08 95       	ret

00001a32 <M_TIMER_enum_Timer0_setDelayTimeMilliSec>:

ES_t M_TIMER_enum_Timer0_setDelayTimeMilliSec(Timer0_cfg_type copy_cfg,u32 millisec){
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	a3 97       	sbiw	r28, 0x23	; 35
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	2f 8b       	std	Y+23, r18	; 0x17
    1a50:	38 8f       	std	Y+24, r19	; 0x18
    1a52:	49 8f       	std	Y+25, r20	; 0x19
    1a54:	5a 8f       	std	Y+26, r21	; 0x1a
    1a56:	6b 8f       	std	Y+27, r22	; 0x1b
    1a58:	7c 8f       	std	Y+28, r23	; 0x1c
    1a5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a5c:	ee 8e       	std	Y+30, r14	; 0x1e
    1a5e:	ff 8e       	std	Y+31, r15	; 0x1f
    1a60:	08 a3       	std	Y+32, r16	; 0x20
    1a62:	19 a3       	std	Y+33, r17	; 0x21
ES_t Local_enu_ErrorState= ES_NOK;
    1a64:	1e 8a       	std	Y+22, r1	; 0x16
TIMER0_WG_mode_type mode=copy_cfg.WG_mode;
    1a66:	8f 89       	ldd	r24, Y+23	; 0x17
    1a68:	8d 8b       	std	Y+21, r24	; 0x15

//calculate tick time
f32 Tick_time = (f32) copy_cfg.clk_source/CLK_FREQ;
    1a6a:	89 8d       	ldd	r24, Y+25	; 0x19
    1a6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a6e:	cc 01       	movw	r24, r24
    1a70:	a0 e0       	ldi	r26, 0x00	; 0
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	34 e2       	ldi	r19, 0x24	; 36
    1a88:	44 e7       	ldi	r20, 0x74	; 116
    1a8a:	5b e4       	ldi	r21, 0x4B	; 75
    1a8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	89 8b       	std	Y+17, r24	; 0x11
    1a96:	9a 8b       	std	Y+18, r25	; 0x12
    1a98:	ab 8b       	std	Y+19, r26	; 0x13
    1a9a:	bc 8b       	std	Y+20, r27	; 0x14
//overall desired ticks
u32 Desired_ticks = millisec/(Tick_time*1000);
    1a9c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1a9e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1aa0:	88 a1       	ldd	r24, Y+32	; 0x20
    1aa2:	99 a1       	ldd	r25, Y+33	; 0x21
    1aa4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1aa8:	7b 01       	movw	r14, r22
    1aaa:	8c 01       	movw	r16, r24
    1aac:	69 89       	ldd	r22, Y+17	; 0x11
    1aae:	7a 89       	ldd	r23, Y+18	; 0x12
    1ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a e7       	ldi	r20, 0x7A	; 122
    1aba:	54 e4       	ldi	r21, 0x44	; 68
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9c 01       	movw	r18, r24
    1ac6:	ad 01       	movw	r20, r26
    1ac8:	c8 01       	movw	r24, r16
    1aca:	b7 01       	movw	r22, r14
    1acc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	8d 87       	std	Y+13, r24	; 0x0d
    1ae2:	9e 87       	std	Y+14, r25	; 0x0e
    1ae4:	af 87       	std	Y+15, r26	; 0x0f
    1ae6:	b8 8b       	std	Y+16, r27	; 0x10
//approximate
 u32 Local_no_of_overflows = Desired_ticks/256;
    1ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aec:	af 85       	ldd	r26, Y+15	; 0x0f
    1aee:	b8 89       	ldd	r27, Y+16	; 0x10
    1af0:	89 2f       	mov	r24, r25
    1af2:	9a 2f       	mov	r25, r26
    1af4:	ab 2f       	mov	r26, r27
    1af6:	bb 27       	eor	r27, r27
    1af8:	89 87       	std	Y+9, r24	; 0x09
    1afa:	9a 87       	std	Y+10, r25	; 0x0a
    1afc:	ab 87       	std	Y+11, r26	; 0x0b
    1afe:	bc 87       	std	Y+12, r27	; 0x0c
//number of counts before the first overflow
u32 No_of_remainingCounts = Desired_ticks % 256;
    1b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b04:	af 85       	ldd	r26, Y+15	; 0x0f
    1b06:	b8 89       	ldd	r27, Y+16	; 0x10
    1b08:	90 70       	andi	r25, 0x00	; 0
    1b0a:	a0 70       	andi	r26, 0x00	; 0
    1b0c:	b0 70       	andi	r27, 0x00	; 0
    1b0e:	8d 83       	std	Y+5, r24	; 0x05
    1b10:	9e 83       	std	Y+6, r25	; 0x06
    1b12:	af 83       	std	Y+7, r26	; 0x07
    1b14:	b8 87       	std	Y+8, r27	; 0x08
//compare match(on CTC mode):
u32 OCR_value=255;
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a0 e0       	ldi	r26, 0x00	; 0
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	9a 83       	std	Y+2, r25	; 0x02
    1b22:	ab 83       	std	Y+3, r26	; 0x03
    1b24:	bc 83       	std	Y+4, r27	; 0x04

switch(mode){
    1b26:	8d 89       	ldd	r24, Y+21	; 0x15
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3b a3       	std	Y+35, r19	; 0x23
    1b2e:	2a a3       	std	Y+34, r18	; 0x22
    1b30:	8a a1       	ldd	r24, Y+34	; 0x22
    1b32:	9b a1       	ldd	r25, Y+35	; 0x23
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	39 f0       	breq	.+14     	; 0x1b46 <M_TIMER_enum_Timer0_setDelayTimeMilliSec+0x114>
    1b38:	2a a1       	ldd	r18, Y+34	; 0x22
    1b3a:	3b a1       	ldd	r19, Y+35	; 0x23
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <M_TIMER_enum_Timer0_setDelayTimeMilliSec+0x112>
    1b42:	65 c0       	rjmp	.+202    	; 0x1c0e <M_TIMER_enum_Timer0_setDelayTimeMilliSec+0x1dc>
    1b44:	78 c0       	rjmp	.+240    	; 0x1c36 <M_TIMER_enum_Timer0_setDelayTimeMilliSec+0x204>
	/*Normal mode*/
	case  Normal:
		//if(number of remaining counts !=0
		if(No_of_remainingCounts){
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	af 81       	ldd	r26, Y+7	; 0x07
    1b4c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	a1 05       	cpc	r26, r1
    1b52:	b1 05       	cpc	r27, r1
    1b54:	81 f0       	breq	.+32     	; 0x1b76 <M_TIMER_enum_Timer0_setDelayTimeMilliSec+0x144>
			TCNT0 = (256-No_of_remainingCounts);
    1b56:	e2 e5       	ldi	r30, 0x52	; 82
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5c:	81 95       	neg	r24
    1b5e:	80 83       	st	Z, r24
			Local_no_of_overflows++;
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	ab 85       	ldd	r26, Y+11	; 0x0b
    1b66:	bc 85       	ldd	r27, Y+12	; 0x0c
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	b1 1d       	adc	r27, r1
    1b6e:	89 87       	std	Y+9, r24	; 0x09
    1b70:	9a 87       	std	Y+10, r25	; 0x0a
    1b72:	ab 87       	std	Y+11, r26	; 0x0b
    1b74:	bc 87       	std	Y+12, r27	; 0x0c
		}
		Local_enu_ErrorState=ES_OK;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	8e 8b       	std	Y+22, r24	; 0x16
		M_TIMER_enum_Timer0_start(copy_cfg);
    1b7a:	2f 89       	ldd	r18, Y+23	; 0x17
    1b7c:	38 8d       	ldd	r19, Y+24	; 0x18
    1b7e:	49 8d       	ldd	r20, Y+25	; 0x19
    1b80:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b82:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b84:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b88:	0e 94 c7 0b 	call	0x178e	; 0x178e <M_TIMER_enum_Timer0_start>
		while(Local_no_of_overflows != No_Of_overFlows){}
    1b8c:	20 91 28 02 	lds	r18, 0x0228
    1b90:	30 91 29 02 	lds	r19, 0x0229
    1b94:	40 91 2a 02 	lds	r20, 0x022A
    1b98:	50 91 2b 02 	lds	r21, 0x022B
    1b9c:	89 85       	ldd	r24, Y+9	; 0x09
    1b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba0:	ab 85       	ldd	r26, Y+11	; 0x0b
    1ba2:	bc 85       	ldd	r27, Y+12	; 0x0c
    1ba4:	82 17       	cp	r24, r18
    1ba6:	93 07       	cpc	r25, r19
    1ba8:	a4 07       	cpc	r26, r20
    1baa:	b5 07       	cpc	r27, r21
    1bac:	79 f7       	brne	.-34     	; 0x1b8c <M_TIMER_enum_Timer0_setDelayTimeMilliSec+0x15a>
		No_Of_overFlows=0;
    1bae:	10 92 28 02 	sts	0x0228, r1
    1bb2:	10 92 29 02 	sts	0x0229, r1
    1bb6:	10 92 2a 02 	sts	0x022A, r1
    1bba:	10 92 2b 02 	sts	0x022B, r1
		M_TIMER_enum_Timer0_stop();
    1bbe:	0e 94 87 0c 	call	0x190e	; 0x190e <M_TIMER_enum_Timer0_stop>
    1bc2:	3a c0       	rjmp	.+116    	; 0x1c38 <M_TIMER_enum_Timer0_setDelayTimeMilliSec+0x206>

	/*CTC mode*/
	case CTC:
		//while OCR_value is not a factor of Desired_ticks
		while(No_of_remainingCounts){
			OCR_value--;
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	ab 81       	ldd	r26, Y+3	; 0x03
    1bca:	bc 81       	ldd	r27, Y+4	; 0x04
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	a1 09       	sbc	r26, r1
    1bd0:	b1 09       	sbc	r27, r1
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	ab 83       	std	Y+3, r26	; 0x03
    1bd8:	bc 83       	std	Y+4, r27	; 0x04
			local_no_of_compareMAtches = Desired_ticks / OCR_value;
    1bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bde:	af 85       	ldd	r26, Y+15	; 0x0f
    1be0:	b8 89       	ldd	r27, Y+16	; 0x10
    1be2:	29 81       	ldd	r18, Y+1	; 0x01
    1be4:	3a 81       	ldd	r19, Y+2	; 0x02
    1be6:	4b 81       	ldd	r20, Y+3	; 0x03
    1be8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 04 2a 	call	0x5408	; 0x5408 <__udivmodsi4>
    1bf2:	da 01       	movw	r26, r20
    1bf4:	c9 01       	movw	r24, r18
    1bf6:	80 93 30 02 	sts	0x0230, r24
    1bfa:	90 93 31 02 	sts	0x0231, r25
    1bfe:	a0 93 32 02 	sts	0x0232, r26
    1c02:	b0 93 33 02 	sts	0x0233, r27
			OCR0 = OCR_value;
    1c06:	ec e5       	ldi	r30, 0x5C	; 92
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	80 83       	st	Z, r24
	break;

	/*CTC mode*/
	case CTC:
		//while OCR_value is not a factor of Desired_ticks
		while(No_of_remainingCounts){
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	af 81       	ldd	r26, Y+7	; 0x07
    1c14:	b8 85       	ldd	r27, Y+8	; 0x08
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	a1 05       	cpc	r26, r1
    1c1a:	b1 05       	cpc	r27, r1
    1c1c:	99 f6       	brne	.-90     	; 0x1bc4 <M_TIMER_enum_Timer0_setDelayTimeMilliSec+0x192>
			OCR_value--;
			local_no_of_compareMAtches = Desired_ticks / OCR_value;
			OCR0 = OCR_value;
		}
		Local_enu_ErrorState=ES_OK;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	8e 8b       	std	Y+22, r24	; 0x16
		M_TIMER_enum_Timer0_start(copy_cfg);
    1c22:	2f 89       	ldd	r18, Y+23	; 0x17
    1c24:	38 8d       	ldd	r19, Y+24	; 0x18
    1c26:	49 8d       	ldd	r20, Y+25	; 0x19
    1c28:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1c2a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1c2c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1c2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c30:	0e 94 c7 0b 	call	0x178e	; 0x178e <M_TIMER_enum_Timer0_start>
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <M_TIMER_enum_Timer0_setDelayTimeMilliSec+0x206>
	break;

	default:
		Local_enu_ErrorState = ES_NOK;
    1c36:	1e 8a       	std	Y+22, r1	; 0x16
	break;
	}
return Local_enu_ErrorState;
    1c38:	8e 89       	ldd	r24, Y+22	; 0x16
}
    1c3a:	a3 96       	adiw	r28, 0x23	; 35
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	08 95       	ret

00001c54 <M_TIMER_enum_Timer0_EnableInt>:

ES_t M_TIMER_enum_Timer0_EnableInt(){
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_ErrorState = ES_OK;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01
	TIMSKR &= clr_OCIE;
    1c62:	a9 e5       	ldi	r26, 0x59	; 89
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e9 e5       	ldi	r30, 0x59	; 89
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8d 7f       	andi	r24, 0xFD	; 253
    1c6e:	8c 93       	st	X, r24
	TIMSKR |= En_OCIE;
    1c70:	a9 e5       	ldi	r26, 0x59	; 89
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e9 e5       	ldi	r30, 0x59	; 89
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	82 60       	ori	r24, 0x02	; 2
    1c7c:	8c 93       	st	X, r24
	return Local_enu_ErrorState;
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <M_TIMER_enum_Timer0_DisableInt>:

ES_t M_TIMER_enum_Timer0_DisableInt(){
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enu_ErrorState = ES_OK;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	89 83       	std	Y+1, r24	; 0x01
	TIMSKR &= clr_OCIE;
    1c96:	a9 e5       	ldi	r26, 0x59	; 89
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e9 e5       	ldi	r30, 0x59	; 89
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8d 7f       	andi	r24, 0xFD	; 253
    1ca2:	8c 93       	st	X, r24
	TIMSKR &= ~(En_OCIE);
    1ca4:	a9 e5       	ldi	r26, 0x59	; 89
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e9 e5       	ldi	r30, 0x59	; 89
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	8d 7f       	andi	r24, 0xFD	; 253
    1cb0:	8c 93       	st	X, r24
	return Local_enu_ErrorState;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb4:	0f 90       	pop	r0
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <M_TIMER_enum_Timer0_setCallBack>:

ES_t M_TIMER_enum_Timer0_setCallBack(TIMER0_Int_type copy_Timer0_int_ID, void (*Copy_pfunAppFun)(void*), void * Copy_pvidAppParameter){
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <M_TIMER_enum_Timer0_setCallBack+0x6>
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <M_TIMER_enum_Timer0_setCallBack+0x8>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <M_TIMER_enum_Timer0_setCallBack+0xa>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	8a 83       	std	Y+2, r24	; 0x02
    1ccc:	7c 83       	std	Y+4, r23	; 0x04
    1cce:	6b 83       	std	Y+3, r22	; 0x03
    1cd0:	5e 83       	std	Y+6, r21	; 0x06
    1cd2:	4d 83       	std	Y+5, r20	; 0x05
ES_t Local_enuErrorState = ES_NOK;
    1cd4:	19 82       	std	Y+1, r1	; 0x01
if (Copy_pfunAppFun != NULL){
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	09 f1       	breq	.+66     	; 0x1d20 <M_TIMER_enum_Timer0_setCallBack+0x64>
	if(copy_Timer0_int_ID <=1){
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	82 30       	cpi	r24, 0x02	; 2
    1ce2:	d8 f4       	brcc	.+54     	; 0x1d1a <M_TIMER_enum_Timer0_setCallBack+0x5e>
	TIMER0_ApfunISRFun[copy_Timer0_int_ID  ] = Copy_pfunAppFun;
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	2b 81       	ldd	r18, Y+3	; 0x03
    1cec:	3c 81       	ldd	r19, Y+4	; 0x04
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	ec 5c       	subi	r30, 0xCC	; 204
    1cf6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf8:	31 83       	std	Z+1, r19	; 0x01
    1cfa:	20 83       	st	Z, r18
	TIMER0_ApvidISRParameter[ copy_Timer0_int_ID ] = Copy_pvidAppParameter;
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	fc 01       	movw	r30, r24
    1d08:	e8 5c       	subi	r30, 0xC8	; 200
    1d0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	05 c0       	rjmp	.+10     	; 0x1d24 <M_TIMER_enum_Timer0_setCallBack+0x68>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <M_TIMER_enum_Timer0_setCallBack+0x68>
	}
}
else{
	Local_enuErrorState = ES_NULL_POINTER;
    1d20:	83 e0       	ldi	r24, 0x03	; 3
    1d22:	89 83       	std	Y+1, r24	; 0x01
}
return Local_enuErrorState;
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d26:	26 96       	adiw	r28, 0x06	; 6
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <M_TIMER_enum_Timer0_setFastPWM>:

ES_t M_TIMER_enum_Timer0_setFastPWM(Timer0_cfg_type copy_cfg,f32 copy_frequency ,f32 copy_duty){
    1d38:	af 92       	push	r10
    1d3a:	bf 92       	push	r11
    1d3c:	cf 92       	push	r12
    1d3e:	df 92       	push	r13
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	66 97       	sbiw	r28, 0x16	; 22
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	2c 83       	std	Y+4, r18	; 0x04
    1d5e:	3d 83       	std	Y+5, r19	; 0x05
    1d60:	4e 83       	std	Y+6, r20	; 0x06
    1d62:	5f 83       	std	Y+7, r21	; 0x07
    1d64:	68 87       	std	Y+8, r22	; 0x08
    1d66:	79 87       	std	Y+9, r23	; 0x09
    1d68:	8a 87       	std	Y+10, r24	; 0x0a
    1d6a:	eb 86       	std	Y+11, r14	; 0x0b
    1d6c:	fc 86       	std	Y+12, r15	; 0x0c
    1d6e:	0d 87       	std	Y+13, r16	; 0x0d
    1d70:	1e 87       	std	Y+14, r17	; 0x0e
    1d72:	af 86       	std	Y+15, r10	; 0x0f
    1d74:	b8 8a       	std	Y+16, r11	; 0x10
    1d76:	c9 8a       	std	Y+17, r12	; 0x11
    1d78:	da 8a       	std	Y+18, r13	; 0x12
	ES_t Local_enuErrorState= ES_OK;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
	switch (copy_cfg.CO_mode){
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	3c 8b       	std	Y+20, r19	; 0x14
    1d86:	2b 8b       	std	Y+19, r18	; 0x13
    1d88:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	91 05       	cpc	r25, r1
    1d90:	31 f0       	breq	.+12     	; 0x1d9e <M_TIMER_enum_Timer0_setFastPWM+0x66>
    1d92:	eb 89       	ldd	r30, Y+19	; 0x13
    1d94:	fc 89       	ldd	r31, Y+20	; 0x14
    1d96:	e3 30       	cpi	r30, 0x03	; 3
    1d98:	f1 05       	cpc	r31, r1
    1d9a:	61 f1       	breq	.+88     	; 0x1df4 <M_TIMER_enum_Timer0_setFastPWM+0xbc>
    1d9c:	56 c0       	rjmp	.+172    	; 0x1e4a <M_TIMER_enum_Timer0_setFastPWM+0x112>
	case 2:
		OCR0 = (((256*copy_duty)/100)-1);
    1d9e:	0c e5       	ldi	r16, 0x5C	; 92
    1da0:	10 e0       	ldi	r17, 0x00	; 0
    1da2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1da4:	78 89       	ldd	r23, Y+16	; 0x10
    1da6:	89 89       	ldd	r24, Y+17	; 0x11
    1da8:	9a 89       	ldd	r25, Y+18	; 0x12
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	53 e4       	ldi	r21, 0x43	; 67
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	48 ec       	ldi	r20, 0xC8	; 200
    1dc4:	52 e4       	ldi	r21, 0x42	; 66
    1dc6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e8       	ldi	r20, 0x80	; 128
    1dd8:	5f e3       	ldi	r21, 0x3F	; 63
    1dda:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	bc 01       	movw	r22, r24
    1de4:	cd 01       	movw	r24, r26
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	f8 01       	movw	r30, r16
    1df0:	80 83       	st	Z, r24
    1df2:	2c c0       	rjmp	.+88     	; 0x1e4c <M_TIMER_enum_Timer0_setFastPWM+0x114>
		break;
	case 3:
		OCR0 = 255-((256*copy_duty)/100);
    1df4:	0c e5       	ldi	r16, 0x5C	; 92
    1df6:	10 e0       	ldi	r17, 0x00	; 0
    1df8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dfa:	78 89       	ldd	r23, Y+16	; 0x10
    1dfc:	89 89       	ldd	r24, Y+17	; 0x11
    1dfe:	9a 89       	ldd	r25, Y+18	; 0x12
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	53 e4       	ldi	r21, 0x43	; 67
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	bc 01       	movw	r22, r24
    1e12:	cd 01       	movw	r24, r26
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	48 ec       	ldi	r20, 0xC8	; 200
    1e1a:	52 ec       	ldi	r21, 0xC2	; 194
    1e1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	53 e4       	ldi	r21, 0x43	; 67
    1e30:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	bc 01       	movw	r22, r24
    1e3a:	cd 01       	movw	r24, r26
    1e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	f8 01       	movw	r30, r16
    1e46:	80 83       	st	Z, r24
    1e48:	01 c0       	rjmp	.+2      	; 0x1e4c <M_TIMER_enum_Timer0_setFastPWM+0x114>
		break;
	default:
		Local_enuErrorState = ES_NOK;
    1e4a:	1b 82       	std	Y+3, r1	; 0x03
		break;
	};
	TIMER0_clk_type desired_ps = CLK_FREQ/(256*copy_frequency);
    1e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	53 e4       	ldi	r21, 0x43	; 67
    1e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9c 01       	movw	r18, r24
    1e66:	ad 01       	movw	r20, r26
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	74 e2       	ldi	r23, 0x24	; 36
    1e6c:	84 e7       	ldi	r24, 0x74	; 116
    1e6e:	9b e4       	ldi	r25, 0x4B	; 75
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
	switch (desired_ps){
    1e88:	29 81       	ldd	r18, Y+1	; 0x01
    1e8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e8c:	3e 8b       	std	Y+22, r19	; 0x16
    1e8e:	2d 8b       	std	Y+21, r18	; 0x15
    1e90:	8d 89       	ldd	r24, Y+21	; 0x15
    1e92:	9e 89       	ldd	r25, Y+22	; 0x16
    1e94:	e1 e0       	ldi	r30, 0x01	; 1
    1e96:	80 30       	cpi	r24, 0x00	; 0
    1e98:	9e 07       	cpc	r25, r30
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <M_TIMER_enum_Timer0_setFastPWM+0x166>
    1e9c:	58 c0       	rjmp	.+176    	; 0x1f4e <M_TIMER_enum_Timer0_setFastPWM+0x216>
    1e9e:	2d 89       	ldd	r18, Y+21	; 0x15
    1ea0:	3e 89       	ldd	r19, Y+22	; 0x16
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	21 30       	cpi	r18, 0x01	; 1
    1ea6:	38 07       	cpc	r19, r24
    1ea8:	80 f4       	brcc	.+32     	; 0x1eca <M_TIMER_enum_Timer0_setFastPWM+0x192>
    1eaa:	ed 89       	ldd	r30, Y+21	; 0x15
    1eac:	fe 89       	ldd	r31, Y+22	; 0x16
    1eae:	e8 30       	cpi	r30, 0x08	; 8
    1eb0:	f1 05       	cpc	r31, r1
    1eb2:	79 f1       	breq	.+94     	; 0x1f12 <M_TIMER_enum_Timer0_setFastPWM+0x1da>
    1eb4:	2d 89       	ldd	r18, Y+21	; 0x15
    1eb6:	3e 89       	ldd	r19, Y+22	; 0x16
    1eb8:	20 34       	cpi	r18, 0x40	; 64
    1eba:	31 05       	cpc	r19, r1
    1ebc:	c9 f1       	breq	.+114    	; 0x1f30 <M_TIMER_enum_Timer0_setFastPWM+0x1f8>
    1ebe:	8d 89       	ldd	r24, Y+21	; 0x15
    1ec0:	9e 89       	ldd	r25, Y+22	; 0x16
    1ec2:	81 30       	cpi	r24, 0x01	; 1
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	b1 f0       	breq	.+44     	; 0x1ef4 <M_TIMER_enum_Timer0_setFastPWM+0x1bc>
    1ec8:	7e c0       	rjmp	.+252    	; 0x1fc6 <M_TIMER_enum_Timer0_setFastPWM+0x28e>
    1eca:	ed 89       	ldd	r30, Y+21	; 0x15
    1ecc:	fe 89       	ldd	r31, Y+22	; 0x16
    1ece:	24 e0       	ldi	r18, 0x04	; 4
    1ed0:	e1 30       	cpi	r30, 0x01	; 1
    1ed2:	f2 07       	cpc	r31, r18
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <M_TIMER_enum_Timer0_setFastPWM+0x1a0>
    1ed6:	59 c0       	rjmp	.+178    	; 0x1f8a <M_TIMER_enum_Timer0_setFastPWM+0x252>
    1ed8:	8d 89       	ldd	r24, Y+21	; 0x15
    1eda:	9e 89       	ldd	r25, Y+22	; 0x16
    1edc:	e4 e0       	ldi	r30, 0x04	; 4
    1ede:	82 30       	cpi	r24, 0x02	; 2
    1ee0:	9e 07       	cpc	r25, r30
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <M_TIMER_enum_Timer0_setFastPWM+0x1ae>
    1ee4:	61 c0       	rjmp	.+194    	; 0x1fa8 <M_TIMER_enum_Timer0_setFastPWM+0x270>
    1ee6:	2d 89       	ldd	r18, Y+21	; 0x15
    1ee8:	3e 89       	ldd	r19, Y+22	; 0x16
    1eea:	84 e0       	ldi	r24, 0x04	; 4
    1eec:	20 30       	cpi	r18, 0x00	; 0
    1eee:	38 07       	cpc	r19, r24
    1ef0:	e9 f1       	breq	.+122    	; 0x1f6c <M_TIMER_enum_Timer0_setFastPWM+0x234>
    1ef2:	69 c0       	rjmp	.+210    	; 0x1fc6 <M_TIMER_enum_Timer0_setFastPWM+0x28e>
	case IO_clk:
		TCCR0 &= clr_CS;
    1ef4:	a3 e5       	ldi	r26, 0x53	; 83
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e3 e5       	ldi	r30, 0x53	; 83
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	88 7f       	andi	r24, 0xF8	; 248
    1f00:	8c 93       	st	X, r24
		TCCR0 |= Clc_CS;
    1f02:	a3 e5       	ldi	r26, 0x53	; 83
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e3 e5       	ldi	r30, 0x53	; 83
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	81 60       	ori	r24, 0x01	; 1
    1f0e:	8c 93       	st	X, r24
    1f10:	5b c0       	rjmp	.+182    	; 0x1fc8 <M_TIMER_enum_Timer0_setFastPWM+0x290>
		break;
	case IO_8PS_clk:
		TCCR0 &= clr_CS;
    1f12:	a3 e5       	ldi	r26, 0x53	; 83
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e3 e5       	ldi	r30, 0x53	; 83
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 7f       	andi	r24, 0xF8	; 248
    1f1e:	8c 93       	st	X, r24
		TCCR0 |= Clc_8PS_CS;
    1f20:	a3 e5       	ldi	r26, 0x53	; 83
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e3 e5       	ldi	r30, 0x53	; 83
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	82 60       	ori	r24, 0x02	; 2
    1f2c:	8c 93       	st	X, r24
    1f2e:	4c c0       	rjmp	.+152    	; 0x1fc8 <M_TIMER_enum_Timer0_setFastPWM+0x290>
		break;
	case IO_64PS_clk:
		TCCR0 &= clr_CS;
    1f30:	a3 e5       	ldi	r26, 0x53	; 83
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e3 e5       	ldi	r30, 0x53	; 83
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	88 7f       	andi	r24, 0xF8	; 248
    1f3c:	8c 93       	st	X, r24
		TCCR0 |= Clc_64PS_CS;
    1f3e:	a3 e5       	ldi	r26, 0x53	; 83
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e3 e5       	ldi	r30, 0x53	; 83
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	83 60       	ori	r24, 0x03	; 3
    1f4a:	8c 93       	st	X, r24
    1f4c:	3d c0       	rjmp	.+122    	; 0x1fc8 <M_TIMER_enum_Timer0_setFastPWM+0x290>
		break;
	case IO_256PS_clk:
		TCCR0 &= clr_CS;
    1f4e:	a3 e5       	ldi	r26, 0x53	; 83
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e3 e5       	ldi	r30, 0x53	; 83
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	88 7f       	andi	r24, 0xF8	; 248
    1f5a:	8c 93       	st	X, r24
		TCCR0 |= Clc_256PS_CS;
    1f5c:	a3 e5       	ldi	r26, 0x53	; 83
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e3 e5       	ldi	r30, 0x53	; 83
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	84 60       	ori	r24, 0x04	; 4
    1f68:	8c 93       	st	X, r24
    1f6a:	2e c0       	rjmp	.+92     	; 0x1fc8 <M_TIMER_enum_Timer0_setFastPWM+0x290>
		break;
	case IO_1024_clk:
		TCCR0 &= clr_CS;
    1f6c:	a3 e5       	ldi	r26, 0x53	; 83
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e3 e5       	ldi	r30, 0x53	; 83
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	88 7f       	andi	r24, 0xF8	; 248
    1f78:	8c 93       	st	X, r24
		TCCR0 |= Clc_1024PS_CS;
    1f7a:	a3 e5       	ldi	r26, 0x53	; 83
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 e5       	ldi	r30, 0x53	; 83
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	85 60       	ori	r24, 0x05	; 5
    1f86:	8c 93       	st	X, r24
    1f88:	1f c0       	rjmp	.+62     	; 0x1fc8 <M_TIMER_enum_Timer0_setFastPWM+0x290>
		break;
	case EXT_Falling_clk:
		TCCR0 &= clr_CS;
    1f8a:	a3 e5       	ldi	r26, 0x53	; 83
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e3 e5       	ldi	r30, 0x53	; 83
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	88 7f       	andi	r24, 0xF8	; 248
    1f96:	8c 93       	st	X, r24
		TCCR0 |= Ext_Falling_CS;
    1f98:	a3 e5       	ldi	r26, 0x53	; 83
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e3 e5       	ldi	r30, 0x53	; 83
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	86 60       	ori	r24, 0x06	; 6
    1fa4:	8c 93       	st	X, r24
    1fa6:	10 c0       	rjmp	.+32     	; 0x1fc8 <M_TIMER_enum_Timer0_setFastPWM+0x290>
		break;
	case EXT_Rising_clk:
		TCCR0 &= clr_CS;
    1fa8:	a3 e5       	ldi	r26, 0x53	; 83
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e3 e5       	ldi	r30, 0x53	; 83
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 7f       	andi	r24, 0xF8	; 248
    1fb4:	8c 93       	st	X, r24
		TCCR0 |= Ext_Rising_CS;
    1fb6:	a3 e5       	ldi	r26, 0x53	; 83
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e3 e5       	ldi	r30, 0x53	; 83
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	87 60       	ori	r24, 0x07	; 7
    1fc2:	8c 93       	st	X, r24
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <M_TIMER_enum_Timer0_setFastPWM+0x290>
		break;
	default:
		Local_enuErrorState = ES_NOK;
    1fc6:	1b 82       	std	Y+3, r1	; 0x03
		break;
	}

	return Local_enuErrorState;
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fca:	66 96       	adiw	r28, 0x16	; 22
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	1f 91       	pop	r17
    1fdc:	0f 91       	pop	r16
    1fde:	ff 90       	pop	r15
    1fe0:	ef 90       	pop	r14
    1fe2:	df 90       	pop	r13
    1fe4:	cf 90       	pop	r12
    1fe6:	bf 90       	pop	r11
    1fe8:	af 90       	pop	r10
    1fea:	08 95       	ret

00001fec <M_TIMER_enum_Timer0_setphaseCorrectPWM>:

ES_t M_TIMER_enum_Timer0_setphaseCorrectPWM(Timer0_cfg_type copy_cfg,f32 copy_frequency ,f32 copy_duty){
    1fec:	af 92       	push	r10
    1fee:	bf 92       	push	r11
    1ff0:	cf 92       	push	r12
    1ff2:	df 92       	push	r13
    1ff4:	ef 92       	push	r14
    1ff6:	ff 92       	push	r15
    1ff8:	0f 93       	push	r16
    1ffa:	1f 93       	push	r17
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
    2004:	66 97       	sbiw	r28, 0x16	; 22
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	2c 83       	std	Y+4, r18	; 0x04
    2012:	3d 83       	std	Y+5, r19	; 0x05
    2014:	4e 83       	std	Y+6, r20	; 0x06
    2016:	5f 83       	std	Y+7, r21	; 0x07
    2018:	68 87       	std	Y+8, r22	; 0x08
    201a:	79 87       	std	Y+9, r23	; 0x09
    201c:	8a 87       	std	Y+10, r24	; 0x0a
    201e:	eb 86       	std	Y+11, r14	; 0x0b
    2020:	fc 86       	std	Y+12, r15	; 0x0c
    2022:	0d 87       	std	Y+13, r16	; 0x0d
    2024:	1e 87       	std	Y+14, r17	; 0x0e
    2026:	af 86       	std	Y+15, r10	; 0x0f
    2028:	b8 8a       	std	Y+16, r11	; 0x10
    202a:	c9 8a       	std	Y+17, r12	; 0x11
    202c:	da 8a       	std	Y+18, r13	; 0x12
	ES_t Local_enuErrorState= ES_OK;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	8b 83       	std	Y+3, r24	; 0x03
	switch (copy_cfg.CO_mode){
    2032:	8d 81       	ldd	r24, Y+5	; 0x05
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	3c 8b       	std	Y+20, r19	; 0x14
    203a:	2b 8b       	std	Y+19, r18	; 0x13
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	82 30       	cpi	r24, 0x02	; 2
    2042:	91 05       	cpc	r25, r1
    2044:	31 f0       	breq	.+12     	; 0x2052 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x66>
    2046:	eb 89       	ldd	r30, Y+19	; 0x13
    2048:	fc 89       	ldd	r31, Y+20	; 0x14
    204a:	e3 30       	cpi	r30, 0x03	; 3
    204c:	f1 05       	cpc	r31, r1
    204e:	11 f1       	breq	.+68     	; 0x2094 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0xa8>
    2050:	4c c0       	rjmp	.+152    	; 0x20ea <M_TIMER_enum_Timer0_setphaseCorrectPWM+0xfe>
		case 2:
			OCR0 = ((255*copy_duty)/100);
    2052:	0c e5       	ldi	r16, 0x5C	; 92
    2054:	10 e0       	ldi	r17, 0x00	; 0
    2056:	6f 85       	ldd	r22, Y+15	; 0x0f
    2058:	78 89       	ldd	r23, Y+16	; 0x10
    205a:	89 89       	ldd	r24, Y+17	; 0x11
    205c:	9a 89       	ldd	r25, Y+18	; 0x12
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	53 e4       	ldi	r21, 0x43	; 67
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	48 ec       	ldi	r20, 0xC8	; 200
    2078:	52 e4       	ldi	r21, 0x42	; 66
    207a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	f8 01       	movw	r30, r16
    2090:	80 83       	st	Z, r24
    2092:	2c c0       	rjmp	.+88     	; 0x20ec <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x100>
			break;
		case 3:
			OCR0 = (255-((256*copy_duty)/100));
    2094:	0c e5       	ldi	r16, 0x5C	; 92
    2096:	10 e0       	ldi	r17, 0x00	; 0
    2098:	6f 85       	ldd	r22, Y+15	; 0x0f
    209a:	78 89       	ldd	r23, Y+16	; 0x10
    209c:	89 89       	ldd	r24, Y+17	; 0x11
    209e:	9a 89       	ldd	r25, Y+18	; 0x12
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	53 e4       	ldi	r21, 0x43	; 67
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	48 ec       	ldi	r20, 0xC8	; 200
    20ba:	52 ec       	ldi	r21, 0xC2	; 194
    20bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	53 e4       	ldi	r21, 0x43	; 67
    20d0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	f8 01       	movw	r30, r16
    20e6:	80 83       	st	Z, r24
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x100>
			break;
		default:
			Local_enuErrorState = ES_NOK;
    20ea:	1b 82       	std	Y+3, r1	; 0x03
			break;
		};
	TIMER0_clk_type desired_ps = CLK_FREQ/(510*copy_frequency);
    20ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4f ef       	ldi	r20, 0xFF	; 255
    20fa:	53 e4       	ldi	r21, 0x43	; 67
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9c 01       	movw	r18, r24
    2106:	ad 01       	movw	r20, r26
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	74 e2       	ldi	r23, 0x24	; 36
    210c:	84 e7       	ldi	r24, 0x74	; 116
    210e:	9b e4       	ldi	r25, 0x4B	; 75
    2110:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
	switch (desired_ps){
    2128:	29 81       	ldd	r18, Y+1	; 0x01
    212a:	3a 81       	ldd	r19, Y+2	; 0x02
    212c:	3e 8b       	std	Y+22, r19	; 0x16
    212e:	2d 8b       	std	Y+21, r18	; 0x15
    2130:	8d 89       	ldd	r24, Y+21	; 0x15
    2132:	9e 89       	ldd	r25, Y+22	; 0x16
    2134:	e1 e0       	ldi	r30, 0x01	; 1
    2136:	80 30       	cpi	r24, 0x00	; 0
    2138:	9e 07       	cpc	r25, r30
    213a:	09 f4       	brne	.+2      	; 0x213e <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x152>
    213c:	58 c0       	rjmp	.+176    	; 0x21ee <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x202>
    213e:	2d 89       	ldd	r18, Y+21	; 0x15
    2140:	3e 89       	ldd	r19, Y+22	; 0x16
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	21 30       	cpi	r18, 0x01	; 1
    2146:	38 07       	cpc	r19, r24
    2148:	80 f4       	brcc	.+32     	; 0x216a <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x17e>
    214a:	ed 89       	ldd	r30, Y+21	; 0x15
    214c:	fe 89       	ldd	r31, Y+22	; 0x16
    214e:	e8 30       	cpi	r30, 0x08	; 8
    2150:	f1 05       	cpc	r31, r1
    2152:	79 f1       	breq	.+94     	; 0x21b2 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x1c6>
    2154:	2d 89       	ldd	r18, Y+21	; 0x15
    2156:	3e 89       	ldd	r19, Y+22	; 0x16
    2158:	20 34       	cpi	r18, 0x40	; 64
    215a:	31 05       	cpc	r19, r1
    215c:	c9 f1       	breq	.+114    	; 0x21d0 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x1e4>
    215e:	8d 89       	ldd	r24, Y+21	; 0x15
    2160:	9e 89       	ldd	r25, Y+22	; 0x16
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	91 05       	cpc	r25, r1
    2166:	b1 f0       	breq	.+44     	; 0x2194 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x1a8>
    2168:	7e c0       	rjmp	.+252    	; 0x2266 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x27a>
    216a:	ed 89       	ldd	r30, Y+21	; 0x15
    216c:	fe 89       	ldd	r31, Y+22	; 0x16
    216e:	24 e0       	ldi	r18, 0x04	; 4
    2170:	e1 30       	cpi	r30, 0x01	; 1
    2172:	f2 07       	cpc	r31, r18
    2174:	09 f4       	brne	.+2      	; 0x2178 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x18c>
    2176:	59 c0       	rjmp	.+178    	; 0x222a <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x23e>
    2178:	8d 89       	ldd	r24, Y+21	; 0x15
    217a:	9e 89       	ldd	r25, Y+22	; 0x16
    217c:	e4 e0       	ldi	r30, 0x04	; 4
    217e:	82 30       	cpi	r24, 0x02	; 2
    2180:	9e 07       	cpc	r25, r30
    2182:	09 f4       	brne	.+2      	; 0x2186 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x19a>
    2184:	61 c0       	rjmp	.+194    	; 0x2248 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x25c>
    2186:	2d 89       	ldd	r18, Y+21	; 0x15
    2188:	3e 89       	ldd	r19, Y+22	; 0x16
    218a:	84 e0       	ldi	r24, 0x04	; 4
    218c:	20 30       	cpi	r18, 0x00	; 0
    218e:	38 07       	cpc	r19, r24
    2190:	e9 f1       	breq	.+122    	; 0x220c <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x220>
    2192:	69 c0       	rjmp	.+210    	; 0x2266 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x27a>
		case IO_clk:
			TCCR0 &= clr_CS;
    2194:	a3 e5       	ldi	r26, 0x53	; 83
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e3 e5       	ldi	r30, 0x53	; 83
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	88 7f       	andi	r24, 0xF8	; 248
    21a0:	8c 93       	st	X, r24
			TCCR0 |= Clc_CS;
    21a2:	a3 e5       	ldi	r26, 0x53	; 83
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e3 e5       	ldi	r30, 0x53	; 83
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	81 60       	ori	r24, 0x01	; 1
    21ae:	8c 93       	st	X, r24
    21b0:	5b c0       	rjmp	.+182    	; 0x2268 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x27c>
			break;
		case IO_8PS_clk:
			TCCR0 &= clr_CS;
    21b2:	a3 e5       	ldi	r26, 0x53	; 83
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e3 e5       	ldi	r30, 0x53	; 83
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	88 7f       	andi	r24, 0xF8	; 248
    21be:	8c 93       	st	X, r24
			TCCR0 |= Clc_8PS_CS;
    21c0:	a3 e5       	ldi	r26, 0x53	; 83
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e3 e5       	ldi	r30, 0x53	; 83
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	82 60       	ori	r24, 0x02	; 2
    21cc:	8c 93       	st	X, r24
    21ce:	4c c0       	rjmp	.+152    	; 0x2268 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x27c>
			break;
		case IO_64PS_clk:
			TCCR0 &= clr_CS;
    21d0:	a3 e5       	ldi	r26, 0x53	; 83
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e3 e5       	ldi	r30, 0x53	; 83
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	88 7f       	andi	r24, 0xF8	; 248
    21dc:	8c 93       	st	X, r24
			TCCR0 |= Clc_64PS_CS;
    21de:	a3 e5       	ldi	r26, 0x53	; 83
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e3 e5       	ldi	r30, 0x53	; 83
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	83 60       	ori	r24, 0x03	; 3
    21ea:	8c 93       	st	X, r24
    21ec:	3d c0       	rjmp	.+122    	; 0x2268 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x27c>
			break;
		case IO_256PS_clk:
			TCCR0 &= clr_CS;
    21ee:	a3 e5       	ldi	r26, 0x53	; 83
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e3 e5       	ldi	r30, 0x53	; 83
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	88 7f       	andi	r24, 0xF8	; 248
    21fa:	8c 93       	st	X, r24
			TCCR0 |= Clc_256PS_CS;
    21fc:	a3 e5       	ldi	r26, 0x53	; 83
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e3 e5       	ldi	r30, 0x53	; 83
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	84 60       	ori	r24, 0x04	; 4
    2208:	8c 93       	st	X, r24
    220a:	2e c0       	rjmp	.+92     	; 0x2268 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x27c>
			break;
		case IO_1024_clk:
			TCCR0 &= clr_CS;
    220c:	a3 e5       	ldi	r26, 0x53	; 83
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e3 e5       	ldi	r30, 0x53	; 83
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	88 7f       	andi	r24, 0xF8	; 248
    2218:	8c 93       	st	X, r24
			TCCR0 |= Clc_1024PS_CS;
    221a:	a3 e5       	ldi	r26, 0x53	; 83
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e5       	ldi	r30, 0x53	; 83
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	85 60       	ori	r24, 0x05	; 5
    2226:	8c 93       	st	X, r24
    2228:	1f c0       	rjmp	.+62     	; 0x2268 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x27c>
			break;
		case EXT_Falling_clk:
			TCCR0 &= clr_CS;
    222a:	a3 e5       	ldi	r26, 0x53	; 83
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e3 e5       	ldi	r30, 0x53	; 83
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	88 7f       	andi	r24, 0xF8	; 248
    2236:	8c 93       	st	X, r24
			TCCR0 |= Ext_Falling_CS;
    2238:	a3 e5       	ldi	r26, 0x53	; 83
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e3 e5       	ldi	r30, 0x53	; 83
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	86 60       	ori	r24, 0x06	; 6
    2244:	8c 93       	st	X, r24
    2246:	10 c0       	rjmp	.+32     	; 0x2268 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x27c>
			break;
		case EXT_Rising_clk:
			TCCR0 &= clr_CS;
    2248:	a3 e5       	ldi	r26, 0x53	; 83
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	e3 e5       	ldi	r30, 0x53	; 83
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	80 81       	ld	r24, Z
    2252:	88 7f       	andi	r24, 0xF8	; 248
    2254:	8c 93       	st	X, r24
			TCCR0 |= Ext_Rising_CS;
    2256:	a3 e5       	ldi	r26, 0x53	; 83
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	e3 e5       	ldi	r30, 0x53	; 83
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	87 60       	ori	r24, 0x07	; 7
    2262:	8c 93       	st	X, r24
    2264:	01 c0       	rjmp	.+2      	; 0x2268 <M_TIMER_enum_Timer0_setphaseCorrectPWM+0x27c>
			break;
		default:
			Local_enuErrorState = ES_NOK;
    2266:	1b 82       	std	Y+3, r1	; 0x03
			break;
		}

	return Local_enuErrorState;
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
}
    226a:	66 96       	adiw	r28, 0x16	; 22
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	1f 91       	pop	r17
    227c:	0f 91       	pop	r16
    227e:	ff 90       	pop	r15
    2280:	ef 90       	pop	r14
    2282:	df 90       	pop	r13
    2284:	cf 90       	pop	r12
    2286:	bf 90       	pop	r11
    2288:	af 90       	pop	r10
    228a:	08 95       	ret

0000228c <__vector_11>:

ISR(TIMER0_OVF_vect)
{
    228c:	1f 92       	push	r1
    228e:	0f 92       	push	r0
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	0f 92       	push	r0
    2294:	11 24       	eor	r1, r1
    2296:	8f 93       	push	r24
    2298:	9f 93       	push	r25
    229a:	af 93       	push	r26
    229c:	bf 93       	push	r27
    229e:	ef 93       	push	r30
    22a0:	ff 93       	push	r31
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
	OVF_Count --;
    22aa:	80 91 12 02 	lds	r24, 0x0212
    22ae:	90 91 13 02 	lds	r25, 0x0213
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	90 93 13 02 	sts	0x0213, r25
    22b8:	80 93 12 02 	sts	0x0212, r24
	if (OVF_Count == 0)
    22bc:	80 91 12 02 	lds	r24, 0x0212
    22c0:	90 91 13 02 	lds	r25, 0x0213
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	01 f5       	brne	.+64     	; 0x2308 <__vector_11+0x7c>
	{
		TCNT2 = Preload;
    22c8:	e4 e4       	ldi	r30, 0x44	; 68
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 91 14 02 	lds	r24, 0x0214
    22d0:	80 83       	st	Z, r24

		OS_Ticks++;
    22d2:	80 91 0a 02 	lds	r24, 0x020A
    22d6:	90 91 0b 02 	lds	r25, 0x020B
    22da:	a0 91 0c 02 	lds	r26, 0x020C
    22de:	b0 91 0d 02 	lds	r27, 0x020D
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	a1 1d       	adc	r26, r1
    22e6:	b1 1d       	adc	r27, r1
    22e8:	80 93 0a 02 	sts	0x020A, r24
    22ec:	90 93 0b 02 	sts	0x020B, r25
    22f0:	a0 93 0c 02 	sts	0x020C, r26
    22f4:	b0 93 0d 02 	sts	0x020D, r27

		OVF_Count = Num_OVF;
    22f8:	80 91 10 02 	lds	r24, 0x0210
    22fc:	90 91 11 02 	lds	r25, 0x0211
    2300:	90 93 13 02 	sts	0x0213, r25
    2304:	80 93 12 02 	sts	0x0212, r24
	}
}
    2308:	cf 91       	pop	r28
    230a:	df 91       	pop	r29
    230c:	ff 91       	pop	r31
    230e:	ef 91       	pop	r30
    2310:	bf 91       	pop	r27
    2312:	af 91       	pop	r26
    2314:	9f 91       	pop	r25
    2316:	8f 91       	pop	r24
    2318:	0f 90       	pop	r0
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	0f 90       	pop	r0
    231e:	1f 90       	pop	r1
    2320:	18 95       	reti

00002322 <__vector_10>:


ISR(TIMER0_COMP_vect)
{
    2322:	1f 92       	push	r1
    2324:	0f 92       	push	r0
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	0f 92       	push	r0
    232a:	11 24       	eor	r1, r1
    232c:	8f 93       	push	r24
    232e:	9f 93       	push	r25
    2330:	af 93       	push	r26
    2332:	bf 93       	push	r27
    2334:	df 93       	push	r29
    2336:	cf 93       	push	r28
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
	CTC_Count --;
    233c:	80 91 0f 02 	lds	r24, 0x020F
    2340:	81 50       	subi	r24, 0x01	; 1
    2342:	80 93 0f 02 	sts	0x020F, r24
		if (CTC_Count == 0)
    2346:	80 91 0f 02 	lds	r24, 0x020F
    234a:	88 23       	and	r24, r24
    234c:	b9 f4       	brne	.+46     	; 0x237c <__vector_10+0x5a>
		{
			OS_Ticks++;
    234e:	80 91 0a 02 	lds	r24, 0x020A
    2352:	90 91 0b 02 	lds	r25, 0x020B
    2356:	a0 91 0c 02 	lds	r26, 0x020C
    235a:	b0 91 0d 02 	lds	r27, 0x020D
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	a1 1d       	adc	r26, r1
    2362:	b1 1d       	adc	r27, r1
    2364:	80 93 0a 02 	sts	0x020A, r24
    2368:	90 93 0b 02 	sts	0x020B, r25
    236c:	a0 93 0c 02 	sts	0x020C, r26
    2370:	b0 93 0d 02 	sts	0x020D, r27
			CTC_Count = Num_CTC;
    2374:	80 91 0e 02 	lds	r24, 0x020E
    2378:	80 93 0f 02 	sts	0x020F, r24
		}
}
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	bf 91       	pop	r27
    2382:	af 91       	pop	r26
    2384:	9f 91       	pop	r25
    2386:	8f 91       	pop	r24
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f 90       	pop	r0
    238e:	1f 90       	pop	r1
    2390:	18 95       	reti

00002392 <PORT_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void PORT_Init(const PORT_ConfigType * ConfigPtr)
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	2b 97       	sbiw	r28, 0x0b	; 11
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	9d 83       	std	Y+5, r25	; 0x05
    23a8:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    23aa:	8c 81       	ldd	r24, Y+4	; 0x04
    23ac:	9d 81       	ldd	r25, Y+5	; 0x05
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <PORT_Init+0x22>
    23b2:	51 c2       	rjmp	.+1186   	; 0x2856 <PORT_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    23b4:	1b 82       	std	Y+3, r1	; 0x03
    23b6:	4b c2       	rjmp	.+1174   	; 0x284e <PORT_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9c 01       	movw	r18, r24
    23c0:	22 0f       	add	r18, r18
    23c2:	33 1f       	adc	r19, r19
    23c4:	22 0f       	add	r18, r18
    23c6:	33 1f       	adc	r19, r19
    23c8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ca:	9d 81       	ldd	r25, Y+5	; 0x05
    23cc:	fc 01       	movw	r30, r24
    23ce:	e2 0f       	add	r30, r18
    23d0:	f3 1f       	adc	r31, r19
    23d2:	80 81       	ld	r24, Z
    23d4:	9a e0       	ldi	r25, 0x0A	; 10
    23d6:	69 2f       	mov	r22, r25
    23d8:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__udivmodqi4>
    23dc:	89 2f       	mov	r24, r25
    23de:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9c 01       	movw	r18, r24
    23e8:	22 0f       	add	r18, r18
    23ea:	33 1f       	adc	r19, r19
    23ec:	22 0f       	add	r18, r18
    23ee:	33 1f       	adc	r19, r19
    23f0:	8c 81       	ldd	r24, Y+4	; 0x04
    23f2:	9d 81       	ldd	r25, Y+5	; 0x05
    23f4:	fc 01       	movw	r30, r24
    23f6:	e2 0f       	add	r30, r18
    23f8:	f3 1f       	adc	r31, r19
    23fa:	80 81       	ld	r24, Z
    23fc:	9a e0       	ldi	r25, 0x0A	; 10
    23fe:	69 2f       	mov	r22, r25
    2400:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__udivmodqi4>
    2404:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9c 01       	movw	r18, r24
    240e:	22 0f       	add	r18, r18
    2410:	33 1f       	adc	r19, r19
    2412:	22 0f       	add	r18, r18
    2414:	33 1f       	adc	r19, r19
    2416:	8c 81       	ldd	r24, Y+4	; 0x04
    2418:	9d 81       	ldd	r25, Y+5	; 0x05
    241a:	fc 01       	movw	r30, r24
    241c:	e2 0f       	add	r30, r18
    241e:	f3 1f       	adc	r31, r19
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	88 23       	and	r24, r24
    2424:	89 f0       	breq	.+34     	; 0x2448 <PORT_Init+0xb6>
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	88 2f       	mov	r24, r24
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 01       	movw	r18, r24
    242e:	22 0f       	add	r18, r18
    2430:	33 1f       	adc	r19, r19
    2432:	22 0f       	add	r18, r18
    2434:	33 1f       	adc	r19, r19
    2436:	8c 81       	ldd	r24, Y+4	; 0x04
    2438:	9d 81       	ldd	r25, Y+5	; 0x05
    243a:	fc 01       	movw	r30, r24
    243c:	e2 0f       	add	r30, r18
    243e:	f3 1f       	adc	r31, r19
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	81 30       	cpi	r24, 0x01	; 1
    2444:	09 f0       	breq	.+2      	; 0x2448 <PORT_Init+0xb6>
    2446:	00 c2       	rjmp	.+1024   	; 0x2848 <PORT_Init+0x4b6>
				{
					switch(Local_port)
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	3b 87       	std	Y+11, r19	; 0x0b
    2450:	2a 87       	std	Y+10, r18	; 0x0a
    2452:	6a 85       	ldd	r22, Y+10	; 0x0a
    2454:	7b 85       	ldd	r23, Y+11	; 0x0b
    2456:	62 30       	cpi	r22, 0x02	; 2
    2458:	71 05       	cpc	r23, r1
    245a:	d1 f1       	breq	.+116    	; 0x24d0 <PORT_Init+0x13e>
    245c:	8a 85       	ldd	r24, Y+10	; 0x0a
    245e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2460:	83 30       	cpi	r24, 0x03	; 3
    2462:	91 05       	cpc	r25, r1
    2464:	34 f4       	brge	.+12     	; 0x2472 <PORT_Init+0xe0>
    2466:	2a 85       	ldd	r18, Y+10	; 0x0a
    2468:	3b 85       	ldd	r19, Y+11	; 0x0b
    246a:	21 30       	cpi	r18, 0x01	; 1
    246c:	31 05       	cpc	r19, r1
    246e:	71 f0       	breq	.+28     	; 0x248c <PORT_Init+0xfa>
    2470:	94 c0       	rjmp	.+296    	; 0x259a <PORT_Init+0x208>
    2472:	6a 85       	ldd	r22, Y+10	; 0x0a
    2474:	7b 85       	ldd	r23, Y+11	; 0x0b
    2476:	63 30       	cpi	r22, 0x03	; 3
    2478:	71 05       	cpc	r23, r1
    247a:	09 f4       	brne	.+2      	; 0x247e <PORT_Init+0xec>
    247c:	4b c0       	rjmp	.+150    	; 0x2514 <PORT_Init+0x182>
    247e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2480:	9b 85       	ldd	r25, Y+11	; 0x0b
    2482:	84 30       	cpi	r24, 0x04	; 4
    2484:	91 05       	cpc	r25, r1
    2486:	09 f4       	brne	.+2      	; 0x248a <PORT_Init+0xf8>
    2488:	67 c0       	rjmp	.+206    	; 0x2558 <PORT_Init+0x1c6>
    248a:	87 c0       	rjmp	.+270    	; 0x259a <PORT_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    248c:	aa e3       	ldi	r26, 0x3A	; 58
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ea e3       	ldi	r30, 0x3A	; 58
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	40 81       	ld	r20, Z
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9c 01       	movw	r18, r24
    249e:	22 0f       	add	r18, r18
    24a0:	33 1f       	adc	r19, r19
    24a2:	22 0f       	add	r18, r18
    24a4:	33 1f       	adc	r19, r19
    24a6:	8c 81       	ldd	r24, Y+4	; 0x04
    24a8:	9d 81       	ldd	r25, Y+5	; 0x05
    24aa:	fc 01       	movw	r30, r24
    24ac:	e2 0f       	add	r30, r18
    24ae:	f3 1f       	adc	r31, r19
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	b9 01       	movw	r22, r18
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <PORT_Init+0x132>
    24c0:	66 0f       	add	r22, r22
    24c2:	77 1f       	adc	r23, r23
    24c4:	8a 95       	dec	r24
    24c6:	e2 f7       	brpl	.-8      	; 0x24c0 <PORT_Init+0x12e>
    24c8:	cb 01       	movw	r24, r22
    24ca:	84 2b       	or	r24, r20
    24cc:	8c 93       	st	X, r24
    24ce:	65 c0       	rjmp	.+202    	; 0x259a <PORT_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    24d0:	a7 e3       	ldi	r26, 0x37	; 55
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e7 e3       	ldi	r30, 0x37	; 55
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	40 81       	ld	r20, Z
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	88 2f       	mov	r24, r24
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 01       	movw	r18, r24
    24e2:	22 0f       	add	r18, r18
    24e4:	33 1f       	adc	r19, r19
    24e6:	22 0f       	add	r18, r18
    24e8:	33 1f       	adc	r19, r19
    24ea:	8c 81       	ldd	r24, Y+4	; 0x04
    24ec:	9d 81       	ldd	r25, Y+5	; 0x05
    24ee:	fc 01       	movw	r30, r24
    24f0:	e2 0f       	add	r30, r18
    24f2:	f3 1f       	adc	r31, r19
    24f4:	82 81       	ldd	r24, Z+2	; 0x02
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	b9 01       	movw	r22, r18
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <PORT_Init+0x176>
    2504:	66 0f       	add	r22, r22
    2506:	77 1f       	adc	r23, r23
    2508:	8a 95       	dec	r24
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <PORT_Init+0x172>
    250c:	cb 01       	movw	r24, r22
    250e:	84 2b       	or	r24, r20
    2510:	8c 93       	st	X, r24
    2512:	43 c0       	rjmp	.+134    	; 0x259a <PORT_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    2514:	a4 e3       	ldi	r26, 0x34	; 52
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	e4 e3       	ldi	r30, 0x34	; 52
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	40 81       	ld	r20, Z
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	88 2f       	mov	r24, r24
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	9c 01       	movw	r18, r24
    2526:	22 0f       	add	r18, r18
    2528:	33 1f       	adc	r19, r19
    252a:	22 0f       	add	r18, r18
    252c:	33 1f       	adc	r19, r19
    252e:	8c 81       	ldd	r24, Y+4	; 0x04
    2530:	9d 81       	ldd	r25, Y+5	; 0x05
    2532:	fc 01       	movw	r30, r24
    2534:	e2 0f       	add	r30, r18
    2536:	f3 1f       	adc	r31, r19
    2538:	82 81       	ldd	r24, Z+2	; 0x02
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	88 2f       	mov	r24, r24
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	b9 01       	movw	r22, r18
    2546:	02 c0       	rjmp	.+4      	; 0x254c <PORT_Init+0x1ba>
    2548:	66 0f       	add	r22, r22
    254a:	77 1f       	adc	r23, r23
    254c:	8a 95       	dec	r24
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <PORT_Init+0x1b6>
    2550:	cb 01       	movw	r24, r22
    2552:	84 2b       	or	r24, r20
    2554:	8c 93       	st	X, r24
    2556:	21 c0       	rjmp	.+66     	; 0x259a <PORT_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    2558:	a1 e3       	ldi	r26, 0x31	; 49
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e1 e3       	ldi	r30, 0x31	; 49
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	40 81       	ld	r20, Z
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	88 2f       	mov	r24, r24
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9c 01       	movw	r18, r24
    256a:	22 0f       	add	r18, r18
    256c:	33 1f       	adc	r19, r19
    256e:	22 0f       	add	r18, r18
    2570:	33 1f       	adc	r19, r19
    2572:	8c 81       	ldd	r24, Y+4	; 0x04
    2574:	9d 81       	ldd	r25, Y+5	; 0x05
    2576:	fc 01       	movw	r30, r24
    2578:	e2 0f       	add	r30, r18
    257a:	f3 1f       	adc	r31, r19
    257c:	82 81       	ldd	r24, Z+2	; 0x02
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	b9 01       	movw	r22, r18
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <PORT_Init+0x1fe>
    258c:	66 0f       	add	r22, r22
    258e:	77 1f       	adc	r23, r23
    2590:	8a 95       	dec	r24
    2592:	e2 f7       	brpl	.-8      	; 0x258c <PORT_Init+0x1fa>
    2594:	cb 01       	movw	r24, r22
    2596:	84 2b       	or	r24, r20
    2598:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9c 01       	movw	r18, r24
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	22 0f       	add	r18, r18
    25a8:	33 1f       	adc	r19, r19
    25aa:	8c 81       	ldd	r24, Y+4	; 0x04
    25ac:	9d 81       	ldd	r25, Y+5	; 0x05
    25ae:	fc 01       	movw	r30, r24
    25b0:	e2 0f       	add	r30, r18
    25b2:	f3 1f       	adc	r31, r19
    25b4:	81 81       	ldd	r24, Z+1	; 0x01
    25b6:	88 23       	and	r24, r24
    25b8:	89 f0       	breq	.+34     	; 0x25dc <PORT_Init+0x24a>
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	88 2f       	mov	r24, r24
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9c 01       	movw	r18, r24
    25c2:	22 0f       	add	r18, r18
    25c4:	33 1f       	adc	r19, r19
    25c6:	22 0f       	add	r18, r18
    25c8:	33 1f       	adc	r19, r19
    25ca:	8c 81       	ldd	r24, Y+4	; 0x04
    25cc:	9d 81       	ldd	r25, Y+5	; 0x05
    25ce:	fc 01       	movw	r30, r24
    25d0:	e2 0f       	add	r30, r18
    25d2:	f3 1f       	adc	r31, r19
    25d4:	81 81       	ldd	r24, Z+1	; 0x01
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	09 f0       	breq	.+2      	; 0x25dc <PORT_Init+0x24a>
    25da:	36 c1       	rjmp	.+620    	; 0x2848 <PORT_Init+0x4b6>
					{
						switch(Local_port)
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	39 87       	std	Y+9, r19	; 0x09
    25e4:	28 87       	std	Y+8, r18	; 0x08
    25e6:	68 85       	ldd	r22, Y+8	; 0x08
    25e8:	79 85       	ldd	r23, Y+9	; 0x09
    25ea:	62 30       	cpi	r22, 0x02	; 2
    25ec:	71 05       	cpc	r23, r1
    25ee:	d1 f1       	breq	.+116    	; 0x2664 <PORT_Init+0x2d2>
    25f0:	88 85       	ldd	r24, Y+8	; 0x08
    25f2:	99 85       	ldd	r25, Y+9	; 0x09
    25f4:	83 30       	cpi	r24, 0x03	; 3
    25f6:	91 05       	cpc	r25, r1
    25f8:	34 f4       	brge	.+12     	; 0x2606 <PORT_Init+0x274>
    25fa:	28 85       	ldd	r18, Y+8	; 0x08
    25fc:	39 85       	ldd	r19, Y+9	; 0x09
    25fe:	21 30       	cpi	r18, 0x01	; 1
    2600:	31 05       	cpc	r19, r1
    2602:	71 f0       	breq	.+28     	; 0x2620 <PORT_Init+0x28e>
    2604:	94 c0       	rjmp	.+296    	; 0x272e <PORT_Init+0x39c>
    2606:	68 85       	ldd	r22, Y+8	; 0x08
    2608:	79 85       	ldd	r23, Y+9	; 0x09
    260a:	63 30       	cpi	r22, 0x03	; 3
    260c:	71 05       	cpc	r23, r1
    260e:	09 f4       	brne	.+2      	; 0x2612 <PORT_Init+0x280>
    2610:	4b c0       	rjmp	.+150    	; 0x26a8 <PORT_Init+0x316>
    2612:	88 85       	ldd	r24, Y+8	; 0x08
    2614:	99 85       	ldd	r25, Y+9	; 0x09
    2616:	84 30       	cpi	r24, 0x04	; 4
    2618:	91 05       	cpc	r25, r1
    261a:	09 f4       	brne	.+2      	; 0x261e <PORT_Init+0x28c>
    261c:	67 c0       	rjmp	.+206    	; 0x26ec <PORT_Init+0x35a>
    261e:	87 c0       	rjmp	.+270    	; 0x272e <PORT_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2620:	ab e3       	ldi	r26, 0x3B	; 59
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	eb e3       	ldi	r30, 0x3B	; 59
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	40 81       	ld	r20, Z
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	88 2f       	mov	r24, r24
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9c 01       	movw	r18, r24
    2632:	22 0f       	add	r18, r18
    2634:	33 1f       	adc	r19, r19
    2636:	22 0f       	add	r18, r18
    2638:	33 1f       	adc	r19, r19
    263a:	8c 81       	ldd	r24, Y+4	; 0x04
    263c:	9d 81       	ldd	r25, Y+5	; 0x05
    263e:	fc 01       	movw	r30, r24
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
    2644:	81 81       	ldd	r24, Z+1	; 0x01
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	8a 81       	ldd	r24, Y+2	; 0x02
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	b9 01       	movw	r22, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <PORT_Init+0x2c6>
    2654:	66 0f       	add	r22, r22
    2656:	77 1f       	adc	r23, r23
    2658:	8a 95       	dec	r24
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <PORT_Init+0x2c2>
    265c:	cb 01       	movw	r24, r22
    265e:	84 2b       	or	r24, r20
    2660:	8c 93       	st	X, r24
    2662:	65 c0       	rjmp	.+202    	; 0x272e <PORT_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    2664:	a8 e3       	ldi	r26, 0x38	; 56
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e8 e3       	ldi	r30, 0x38	; 56
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	40 81       	ld	r20, Z
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	88 2f       	mov	r24, r24
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9c 01       	movw	r18, r24
    2676:	22 0f       	add	r18, r18
    2678:	33 1f       	adc	r19, r19
    267a:	22 0f       	add	r18, r18
    267c:	33 1f       	adc	r19, r19
    267e:	8c 81       	ldd	r24, Y+4	; 0x04
    2680:	9d 81       	ldd	r25, Y+5	; 0x05
    2682:	fc 01       	movw	r30, r24
    2684:	e2 0f       	add	r30, r18
    2686:	f3 1f       	adc	r31, r19
    2688:	81 81       	ldd	r24, Z+1	; 0x01
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	b9 01       	movw	r22, r18
    2696:	02 c0       	rjmp	.+4      	; 0x269c <PORT_Init+0x30a>
    2698:	66 0f       	add	r22, r22
    269a:	77 1f       	adc	r23, r23
    269c:	8a 95       	dec	r24
    269e:	e2 f7       	brpl	.-8      	; 0x2698 <PORT_Init+0x306>
    26a0:	cb 01       	movw	r24, r22
    26a2:	84 2b       	or	r24, r20
    26a4:	8c 93       	st	X, r24
    26a6:	43 c0       	rjmp	.+134    	; 0x272e <PORT_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    26a8:	a5 e3       	ldi	r26, 0x35	; 53
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e5 e3       	ldi	r30, 0x35	; 53
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	40 81       	ld	r20, Z
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	88 2f       	mov	r24, r24
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9c 01       	movw	r18, r24
    26ba:	22 0f       	add	r18, r18
    26bc:	33 1f       	adc	r19, r19
    26be:	22 0f       	add	r18, r18
    26c0:	33 1f       	adc	r19, r19
    26c2:	8c 81       	ldd	r24, Y+4	; 0x04
    26c4:	9d 81       	ldd	r25, Y+5	; 0x05
    26c6:	fc 01       	movw	r30, r24
    26c8:	e2 0f       	add	r30, r18
    26ca:	f3 1f       	adc	r31, r19
    26cc:	81 81       	ldd	r24, Z+1	; 0x01
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	b9 01       	movw	r22, r18
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <PORT_Init+0x34e>
    26dc:	66 0f       	add	r22, r22
    26de:	77 1f       	adc	r23, r23
    26e0:	8a 95       	dec	r24
    26e2:	e2 f7       	brpl	.-8      	; 0x26dc <PORT_Init+0x34a>
    26e4:	cb 01       	movw	r24, r22
    26e6:	84 2b       	or	r24, r20
    26e8:	8c 93       	st	X, r24
    26ea:	21 c0       	rjmp	.+66     	; 0x272e <PORT_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    26ec:	a2 e3       	ldi	r26, 0x32	; 50
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e2 e3       	ldi	r30, 0x32	; 50
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	40 81       	ld	r20, Z
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	9c 01       	movw	r18, r24
    26fe:	22 0f       	add	r18, r18
    2700:	33 1f       	adc	r19, r19
    2702:	22 0f       	add	r18, r18
    2704:	33 1f       	adc	r19, r19
    2706:	8c 81       	ldd	r24, Y+4	; 0x04
    2708:	9d 81       	ldd	r25, Y+5	; 0x05
    270a:	fc 01       	movw	r30, r24
    270c:	e2 0f       	add	r30, r18
    270e:	f3 1f       	adc	r31, r19
    2710:	81 81       	ldd	r24, Z+1	; 0x01
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	b9 01       	movw	r22, r18
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <PORT_Init+0x392>
    2720:	66 0f       	add	r22, r22
    2722:	77 1f       	adc	r23, r23
    2724:	8a 95       	dec	r24
    2726:	e2 f7       	brpl	.-8      	; 0x2720 <PORT_Init+0x38e>
    2728:	cb 01       	movw	r24, r22
    272a:	84 2b       	or	r24, r20
    272c:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	88 2f       	mov	r24, r24
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9c 01       	movw	r18, r24
    2736:	22 0f       	add	r18, r18
    2738:	33 1f       	adc	r19, r19
    273a:	22 0f       	add	r18, r18
    273c:	33 1f       	adc	r19, r19
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	9d 81       	ldd	r25, Y+5	; 0x05
    2742:	fc 01       	movw	r30, r24
    2744:	e2 0f       	add	r30, r18
    2746:	f3 1f       	adc	r31, r19
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	88 23       	and	r24, r24
    274c:	09 f0       	breq	.+2      	; 0x2750 <PORT_Init+0x3be>
    274e:	7c c0       	rjmp	.+248    	; 0x2848 <PORT_Init+0x4b6>
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	9c 01       	movw	r18, r24
    2758:	22 0f       	add	r18, r18
    275a:	33 1f       	adc	r19, r19
    275c:	22 0f       	add	r18, r18
    275e:	33 1f       	adc	r19, r19
    2760:	8c 81       	ldd	r24, Y+4	; 0x04
    2762:	9d 81       	ldd	r25, Y+5	; 0x05
    2764:	fc 01       	movw	r30, r24
    2766:	e2 0f       	add	r30, r18
    2768:	f3 1f       	adc	r31, r19
    276a:	83 81       	ldd	r24, Z+3	; 0x03
    276c:	88 23       	and	r24, r24
    276e:	09 f0       	breq	.+2      	; 0x2772 <PORT_Init+0x3e0>
    2770:	6b c0       	rjmp	.+214    	; 0x2848 <PORT_Init+0x4b6>
						{
							switch(Local_port)
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	3f 83       	std	Y+7, r19	; 0x07
    277a:	2e 83       	std	Y+6, r18	; 0x06
    277c:	6e 81       	ldd	r22, Y+6	; 0x06
    277e:	7f 81       	ldd	r23, Y+7	; 0x07
    2780:	62 30       	cpi	r22, 0x02	; 2
    2782:	71 05       	cpc	r23, r1
    2784:	49 f1       	breq	.+82     	; 0x27d8 <PORT_Init+0x446>
    2786:	8e 81       	ldd	r24, Y+6	; 0x06
    2788:	9f 81       	ldd	r25, Y+7	; 0x07
    278a:	83 30       	cpi	r24, 0x03	; 3
    278c:	91 05       	cpc	r25, r1
    278e:	34 f4       	brge	.+12     	; 0x279c <PORT_Init+0x40a>
    2790:	2e 81       	ldd	r18, Y+6	; 0x06
    2792:	3f 81       	ldd	r19, Y+7	; 0x07
    2794:	21 30       	cpi	r18, 0x01	; 1
    2796:	31 05       	cpc	r19, r1
    2798:	61 f0       	breq	.+24     	; 0x27b2 <PORT_Init+0x420>
    279a:	56 c0       	rjmp	.+172    	; 0x2848 <PORT_Init+0x4b6>
    279c:	6e 81       	ldd	r22, Y+6	; 0x06
    279e:	7f 81       	ldd	r23, Y+7	; 0x07
    27a0:	63 30       	cpi	r22, 0x03	; 3
    27a2:	71 05       	cpc	r23, r1
    27a4:	61 f1       	breq	.+88     	; 0x27fe <PORT_Init+0x46c>
    27a6:	8e 81       	ldd	r24, Y+6	; 0x06
    27a8:	9f 81       	ldd	r25, Y+7	; 0x07
    27aa:	84 30       	cpi	r24, 0x04	; 4
    27ac:	91 05       	cpc	r25, r1
    27ae:	d1 f1       	breq	.+116    	; 0x2824 <PORT_Init+0x492>
    27b0:	4b c0       	rjmp	.+150    	; 0x2848 <PORT_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    27b2:	ab e3       	ldi	r26, 0x3B	; 59
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	eb e3       	ldi	r30, 0x3B	; 59
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	40 81       	ld	r20, Z
    27bc:	8a 81       	ldd	r24, Y+2	; 0x02
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	02 2e       	mov	r0, r18
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <PORT_Init+0x43c>
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	0a 94       	dec	r0
    27d0:	e2 f7       	brpl	.-8      	; 0x27ca <PORT_Init+0x438>
    27d2:	84 2b       	or	r24, r20
    27d4:	8c 93       	st	X, r24
    27d6:	38 c0       	rjmp	.+112    	; 0x2848 <PORT_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    27d8:	a8 e3       	ldi	r26, 0x38	; 56
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	e8 e3       	ldi	r30, 0x38	; 56
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	40 81       	ld	r20, Z
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	02 2e       	mov	r0, r18
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <PORT_Init+0x462>
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	0a 94       	dec	r0
    27f6:	e2 f7       	brpl	.-8      	; 0x27f0 <PORT_Init+0x45e>
    27f8:	84 2b       	or	r24, r20
    27fa:	8c 93       	st	X, r24
    27fc:	25 c0       	rjmp	.+74     	; 0x2848 <PORT_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    27fe:	a5 e3       	ldi	r26, 0x35	; 53
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e5 e3       	ldi	r30, 0x35	; 53
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	40 81       	ld	r20, Z
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	02 2e       	mov	r0, r18
    2814:	02 c0       	rjmp	.+4      	; 0x281a <PORT_Init+0x488>
    2816:	88 0f       	add	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	0a 94       	dec	r0
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <PORT_Init+0x484>
    281e:	84 2b       	or	r24, r20
    2820:	8c 93       	st	X, r24
    2822:	12 c0       	rjmp	.+36     	; 0x2848 <PORT_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    2824:	a2 e3       	ldi	r26, 0x32	; 50
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e2 e3       	ldi	r30, 0x32	; 50
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	40 81       	ld	r20, Z
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	02 2e       	mov	r0, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <PORT_Init+0x4ae>
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	0a 94       	dec	r0
    2842:	e2 f7       	brpl	.-8      	; 0x283c <PORT_Init+0x4aa>
    2844:	84 2b       	or	r24, r20
    2846:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	8f 5f       	subi	r24, 0xFF	; 255
    284c:	8b 83       	std	Y+3, r24	; 0x03
    284e:	8b 81       	ldd	r24, Y+3	; 0x03
    2850:	80 32       	cpi	r24, 0x20	; 32
    2852:	08 f4       	brcc	.+2      	; 0x2856 <PORT_Init+0x4c4>
    2854:	b1 cd       	rjmp	.-1182   	; 0x23b8 <PORT_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    2856:	2b 96       	adiw	r28, 0x0b	; 11
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <GIE_enuInit>:
#include "Error_State.h"
#include "GIE_priv.h"
#include "GIE_int.h"

ES_t GIE_enuInit(void)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    2870:	f8 94       	cli
	//SREG &=~ (1<<7);
	return ES_OK;
    2872:	81 e0       	ldi	r24, 0x01	; 1
}
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <GIE_enuEnable>:

ES_t GIE_enuEnable(void)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
	asm("SEI");
    2882:	78 94       	sei
	//SREG |=  (1<<7);
	return ES_OK;
    2884:	81 e0       	ldi	r24, 0x01	; 1
}
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    2894:	f8 94       	cli
	//SREG &=~ (1<<7);
	return ES_OK;
    2896:	81 e0       	ldi	r24, 0x01	; 1
}
    2898:	cf 91       	pop	r28
    289a:	df 91       	pop	r29
    289c:	08 95       	ret

0000289e <EXTI_enuInit>:
static void (* EXTI_ApfunISRFun[3])(void*)={NULL,NULL,NULL};
static void * EXTI_ApvidISRParameter [3] ={NULL,NULL,NULL};


ES_t EXTI_enuInit(EXTI_t * Copy_pAstrEXTIConfig)
{
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	28 97       	sbiw	r28, 0x08	; 8
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	9c 83       	std	Y+4, r25	; 0x04
    28b4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    28b6:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_pAstrEXTIConfig != NULL)
    28b8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ba:	9c 81       	ldd	r25, Y+4	; 0x04
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	09 f4       	brne	.+2      	; 0x28c2 <EXTI_enuInit+0x24>
    28c0:	db c1       	rjmp	.+950    	; 0x2c78 <EXTI_enuInit+0x3da>
	{
		u8 Local_u8Iter=0;
    28c2:	19 82       	std	Y+1, r1	; 0x01
    28c4:	d2 c1       	rjmp	.+932    	; 0x2c6a <EXTI_enuInit+0x3cc>
		for(;Local_u8Iter < EXTI_u8EXTINum ; Local_u8Iter++)
		{
			if (Copy_pAstrEXTIConfig[Local_u8Iter].intNum == INT0 ||
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	c9 01       	movw	r24, r18
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	28 0f       	add	r18, r24
    28d4:	39 1f       	adc	r19, r25
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	fc 01       	movw	r30, r24
    28dc:	e2 0f       	add	r30, r18
    28de:	f3 1f       	adc	r31, r19
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	88 23       	and	r24, r24
    28e4:	89 f0       	breq	.+34     	; 0x2908 <EXTI_enuInit+0x6a>
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	c9 01       	movw	r24, r18
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	28 0f       	add	r18, r24
    28f4:	39 1f       	adc	r19, r25
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	fc 01       	movw	r30, r24
    28fc:	e2 0f       	add	r30, r18
    28fe:	f3 1f       	adc	r31, r19
    2900:	82 81       	ldd	r24, Z+2	; 0x02
    2902:	81 30       	cpi	r24, 0x01	; 1
    2904:	09 f0       	breq	.+2      	; 0x2908 <EXTI_enuInit+0x6a>
    2906:	34 c1       	rjmp	.+616    	; 0x2b70 <EXTI_enuInit+0x2d2>
					Copy_pAstrEXTIConfig[Local_u8Iter].intNum == INT1)
			{
				MCUCR &= ~ (3 << (2*Copy_pAstrEXTIConfig[Local_u8Iter].intNum) );
    2908:	a5 e5       	ldi	r26, 0x55	; 85
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e5 e5       	ldi	r30, 0x55	; 85
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	48 2f       	mov	r20, r24
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	c9 01       	movw	r24, r18
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	28 0f       	add	r18, r24
    2922:	39 1f       	adc	r19, r25
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	fc 01       	movw	r30, r24
    292a:	e2 0f       	add	r30, r18
    292c:	f3 1f       	adc	r31, r19
    292e:	82 81       	ldd	r24, Z+2	; 0x02
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9c 01       	movw	r18, r24
    2936:	22 0f       	add	r18, r18
    2938:	33 1f       	adc	r19, r19
    293a:	83 e0       	ldi	r24, 0x03	; 3
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <EXTI_enuInit+0xa6>
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	2a 95       	dec	r18
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <EXTI_enuInit+0xa2>
    2948:	80 95       	com	r24
    294a:	84 23       	and	r24, r20
    294c:	8c 93       	st	X, r24

				switch (Copy_pAstrEXTIConfig[Local_u8Iter].senseLvl)
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	c9 01       	movw	r24, r18
    2956:	88 0f       	add	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	28 0f       	add	r18, r24
    295c:	39 1f       	adc	r19, r25
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	fc 01       	movw	r30, r24
    2964:	e2 0f       	add	r30, r18
    2966:	f3 1f       	adc	r31, r19
    2968:	80 81       	ld	r24, Z
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	38 87       	std	Y+8, r19	; 0x08
    2970:	2f 83       	std	Y+7, r18	; 0x07
    2972:	8f 81       	ldd	r24, Y+7	; 0x07
    2974:	98 85       	ldd	r25, Y+8	; 0x08
    2976:	83 34       	cpi	r24, 0x43	; 67
    2978:	91 05       	cpc	r25, r1
    297a:	09 f4       	brne	.+2      	; 0x297e <EXTI_enuInit+0xe0>
    297c:	65 c0       	rjmp	.+202    	; 0x2a48 <EXTI_enuInit+0x1aa>
    297e:	2f 81       	ldd	r18, Y+7	; 0x07
    2980:	38 85       	ldd	r19, Y+8	; 0x08
    2982:	24 34       	cpi	r18, 0x44	; 68
    2984:	31 05       	cpc	r19, r1
    2986:	5c f4       	brge	.+22     	; 0x299e <EXTI_enuInit+0x100>
    2988:	8f 81       	ldd	r24, Y+7	; 0x07
    298a:	98 85       	ldd	r25, Y+8	; 0x08
    298c:	80 32       	cpi	r24, 0x20	; 32
    298e:	91 05       	cpc	r25, r1
    2990:	79 f0       	breq	.+30     	; 0x29b0 <EXTI_enuInit+0x112>
    2992:	2f 81       	ldd	r18, Y+7	; 0x07
    2994:	38 85       	ldd	r19, Y+8	; 0x08
    2996:	21 34       	cpi	r18, 0x41	; 65
    2998:	31 05       	cpc	r19, r1
    299a:	39 f0       	breq	.+14     	; 0x29aa <EXTI_enuInit+0x10c>
    299c:	7b c0       	rjmp	.+246    	; 0x2a94 <EXTI_enuInit+0x1f6>
    299e:	8f 81       	ldd	r24, Y+7	; 0x07
    29a0:	98 85       	ldd	r25, Y+8	; 0x08
    29a2:	81 36       	cpi	r24, 0x61	; 97
    29a4:	91 05       	cpc	r25, r1
    29a6:	51 f1       	breq	.+84     	; 0x29fc <EXTI_enuInit+0x15e>
    29a8:	75 c0       	rjmp	.+234    	; 0x2a94 <EXTI_enuInit+0x1f6>
				{
				case LOW_LVL:
					Local_enuErrorState = ES_OK;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	8a 83       	std	Y+2, r24	; 0x02
    29ae:	74 c0       	rjmp	.+232    	; 0x2a98 <EXTI_enuInit+0x1fa>
					break;
				case ANY_LOGICAL:
					MCUCR |=   (1 << (2*Copy_pAstrEXTIConfig[Local_u8Iter].intNum) );
    29b0:	a5 e5       	ldi	r26, 0x55	; 85
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e5 e5       	ldi	r30, 0x55	; 85
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	48 2f       	mov	r20, r24
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	c9 01       	movw	r24, r18
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	28 0f       	add	r18, r24
    29ca:	39 1f       	adc	r19, r25
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	9c 81       	ldd	r25, Y+4	; 0x04
    29d0:	fc 01       	movw	r30, r24
    29d2:	e2 0f       	add	r30, r18
    29d4:	f3 1f       	adc	r31, r19
    29d6:	82 81       	ldd	r24, Z+2	; 0x02
    29d8:	88 2f       	mov	r24, r24
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 01       	movw	r18, r24
    29de:	22 0f       	add	r18, r18
    29e0:	33 1f       	adc	r19, r19
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	02 2e       	mov	r0, r18
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <EXTI_enuInit+0x150>
    29ea:	88 0f       	add	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	0a 94       	dec	r0
    29f0:	e2 f7       	brpl	.-8      	; 0x29ea <EXTI_enuInit+0x14c>
    29f2:	84 2b       	or	r24, r20
    29f4:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	8a 83       	std	Y+2, r24	; 0x02
    29fa:	4e c0       	rjmp	.+156    	; 0x2a98 <EXTI_enuInit+0x1fa>
					break;

				case FALLING:
					MCUCR |=   (2 << (2*Copy_pAstrEXTIConfig[Local_u8Iter].intNum) );
    29fc:	a5 e5       	ldi	r26, 0x55	; 85
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e5 e5       	ldi	r30, 0x55	; 85
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	48 2f       	mov	r20, r24
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	c9 01       	movw	r24, r18
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	28 0f       	add	r18, r24
    2a16:	39 1f       	adc	r19, r25
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	e2 0f       	add	r30, r18
    2a20:	f3 1f       	adc	r31, r19
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	88 2f       	mov	r24, r24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9c 01       	movw	r18, r24
    2a2a:	22 0f       	add	r18, r18
    2a2c:	33 1f       	adc	r19, r19
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	02 2e       	mov	r0, r18
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <EXTI_enuInit+0x19c>
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	0a 94       	dec	r0
    2a3c:	e2 f7       	brpl	.-8      	; 0x2a36 <EXTI_enuInit+0x198>
    2a3e:	84 2b       	or	r24, r20
    2a40:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	8a 83       	std	Y+2, r24	; 0x02
    2a46:	28 c0       	rjmp	.+80     	; 0x2a98 <EXTI_enuInit+0x1fa>
					break;

				case RISING:
					MCUCR |=   (3 << (2*Copy_pAstrEXTIConfig[Local_u8Iter].intNum) );
    2a48:	a5 e5       	ldi	r26, 0x55	; 85
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
    2a4c:	e5 e5       	ldi	r30, 0x55	; 85
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	48 2f       	mov	r20, r24
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	c9 01       	movw	r24, r18
    2a5c:	88 0f       	add	r24, r24
    2a5e:	99 1f       	adc	r25, r25
    2a60:	28 0f       	add	r18, r24
    2a62:	39 1f       	adc	r19, r25
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	9c 81       	ldd	r25, Y+4	; 0x04
    2a68:	fc 01       	movw	r30, r24
    2a6a:	e2 0f       	add	r30, r18
    2a6c:	f3 1f       	adc	r31, r19
    2a6e:	82 81       	ldd	r24, Z+2	; 0x02
    2a70:	88 2f       	mov	r24, r24
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	9c 01       	movw	r18, r24
    2a76:	22 0f       	add	r18, r18
    2a78:	33 1f       	adc	r19, r19
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	02 2e       	mov	r0, r18
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <EXTI_enuInit+0x1e8>
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	0a 94       	dec	r0
    2a88:	e2 f7       	brpl	.-8      	; 0x2a82 <EXTI_enuInit+0x1e4>
    2a8a:	84 2b       	or	r24, r20
    2a8c:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	8a 83       	std	Y+2, r24	; 0x02
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <EXTI_enuInit+0x1fa>
					break;

				default :
					Local_enuErrorState = ES_OUT_OF_RANGE;
    2a94:	82 e0       	ldi	r24, 0x02	; 2
    2a96:	8a 83       	std	Y+2, r24	; 0x02
				}

				if (Copy_pAstrEXTIConfig[Local_u8Iter].intMode == ENABLE)
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	c9 01       	movw	r24, r18
    2aa0:	88 0f       	add	r24, r24
    2aa2:	99 1f       	adc	r25, r25
    2aa4:	28 0f       	add	r18, r24
    2aa6:	39 1f       	adc	r19, r25
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	fc 01       	movw	r30, r24
    2aae:	e2 0f       	add	r30, r18
    2ab0:	f3 1f       	adc	r31, r19
    2ab2:	81 81       	ldd	r24, Z+1	; 0x01
    2ab4:	85 32       	cpi	r24, 0x25	; 37
    2ab6:	21 f5       	brne	.+72     	; 0x2b00 <EXTI_enuInit+0x262>
				{
					GICR |= (1 << (6 + Copy_pAstrEXTIConfig[Local_u8Iter].intNum));
    2ab8:	ab e5       	ldi	r26, 0x5B	; 91
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	eb e5       	ldi	r30, 0x5B	; 91
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	c9 01       	movw	r24, r18
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	28 0f       	add	r18, r24
    2ad2:	39 1f       	adc	r19, r25
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	fc 01       	movw	r30, r24
    2ada:	e2 0f       	add	r30, r18
    2adc:	f3 1f       	adc	r31, r19
    2ade:	82 81       	ldd	r24, Z+2	; 0x02
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9c 01       	movw	r18, r24
    2ae6:	2a 5f       	subi	r18, 0xFA	; 250
    2ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	02 2e       	mov	r0, r18
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <EXTI_enuInit+0x258>
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	0a 94       	dec	r0
    2af8:	e2 f7       	brpl	.-8      	; 0x2af2 <EXTI_enuInit+0x254>
    2afa:	84 2b       	or	r24, r20
    2afc:	8c 93       	st	X, r24
    2afe:	b2 c0       	rjmp	.+356    	; 0x2c64 <EXTI_enuInit+0x3c6>
				}
				else if (Copy_pAstrEXTIConfig[Local_u8Iter].intMode == DISABLE)
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	c9 01       	movw	r24, r18
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	28 0f       	add	r18, r24
    2b0e:	39 1f       	adc	r19, r25
    2b10:	8b 81       	ldd	r24, Y+3	; 0x03
    2b12:	9c 81       	ldd	r25, Y+4	; 0x04
    2b14:	fc 01       	movw	r30, r24
    2b16:	e2 0f       	add	r30, r18
    2b18:	f3 1f       	adc	r31, r19
    2b1a:	81 81       	ldd	r24, Z+1	; 0x01
    2b1c:	8a 30       	cpi	r24, 0x0A	; 10
    2b1e:	29 f5       	brne	.+74     	; 0x2b6a <EXTI_enuInit+0x2cc>
				{
					GICR &=~(1 << (6 + Copy_pAstrEXTIConfig[Local_u8Iter].intNum));
    2b20:	ab e5       	ldi	r26, 0x5B	; 91
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	eb e5       	ldi	r30, 0x5B	; 91
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	48 2f       	mov	r20, r24
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	c9 01       	movw	r24, r18
    2b34:	88 0f       	add	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	28 0f       	add	r18, r24
    2b3a:	39 1f       	adc	r19, r25
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	fc 01       	movw	r30, r24
    2b42:	e2 0f       	add	r30, r18
    2b44:	f3 1f       	adc	r31, r19
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	9c 01       	movw	r18, r24
    2b4e:	2a 5f       	subi	r18, 0xFA	; 250
    2b50:	3f 4f       	sbci	r19, 0xFF	; 255
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	02 2e       	mov	r0, r18
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <EXTI_enuInit+0x2c0>
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	0a 94       	dec	r0
    2b60:	e2 f7       	brpl	.-8      	; 0x2b5a <EXTI_enuInit+0x2bc>
    2b62:	80 95       	com	r24
    2b64:	84 23       	and	r24, r20
    2b66:	8c 93       	st	X, r24
    2b68:	7d c0       	rjmp	.+250    	; 0x2c64 <EXTI_enuInit+0x3c6>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    2b6a:	82 e0       	ldi	r24, 0x02	; 2
    2b6c:	8a 83       	std	Y+2, r24	; 0x02
    2b6e:	7a c0       	rjmp	.+244    	; 0x2c64 <EXTI_enuInit+0x3c6>
				}


			}
			else if(Copy_pAstrEXTIConfig[Local_u8Iter].intNum == INT2)
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	28 2f       	mov	r18, r24
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	c9 01       	movw	r24, r18
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	28 0f       	add	r18, r24
    2b7e:	39 1f       	adc	r19, r25
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	9c 81       	ldd	r25, Y+4	; 0x04
    2b84:	fc 01       	movw	r30, r24
    2b86:	e2 0f       	add	r30, r18
    2b88:	f3 1f       	adc	r31, r19
    2b8a:	82 81       	ldd	r24, Z+2	; 0x02
    2b8c:	82 30       	cpi	r24, 0x02	; 2
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <EXTI_enuInit+0x2f4>
    2b90:	67 c0       	rjmp	.+206    	; 0x2c60 <EXTI_enuInit+0x3c2>
			{
				MCUCSR &= ~ (1 << 6);
    2b92:	a4 e5       	ldi	r26, 0x54	; 84
    2b94:	b0 e0       	ldi	r27, 0x00	; 0
    2b96:	e4 e5       	ldi	r30, 0x54	; 84
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	80 81       	ld	r24, Z
    2b9c:	8f 7b       	andi	r24, 0xBF	; 191
    2b9e:	8c 93       	st	X, r24

				switch (Copy_pAstrEXTIConfig[Local_u8Iter].senseLvl)
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	c9 01       	movw	r24, r18
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	28 0f       	add	r18, r24
    2bae:	39 1f       	adc	r19, r25
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	e2 0f       	add	r30, r18
    2bb8:	f3 1f       	adc	r31, r19
    2bba:	80 81       	ld	r24, Z
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	3e 83       	std	Y+6, r19	; 0x06
    2bc2:	2d 83       	std	Y+5, r18	; 0x05
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc8:	83 34       	cpi	r24, 0x43	; 67
    2bca:	91 05       	cpc	r25, r1
    2bcc:	41 f0       	breq	.+16     	; 0x2bde <EXTI_enuInit+0x340>
    2bce:	2d 81       	ldd	r18, Y+5	; 0x05
    2bd0:	3e 81       	ldd	r19, Y+6	; 0x06
    2bd2:	21 36       	cpi	r18, 0x61	; 97
    2bd4:	31 05       	cpc	r19, r1
    2bd6:	69 f4       	brne	.+26     	; 0x2bf2 <EXTI_enuInit+0x354>
				{
				case FALLING:
					Local_enuErrorState = ES_OK;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	8a 83       	std	Y+2, r24	; 0x02
    2bdc:	0c c0       	rjmp	.+24     	; 0x2bf6 <EXTI_enuInit+0x358>
					break;

				case RISING:
					MCUCSR |=   (1 << 6);
    2bde:	a4 e5       	ldi	r26, 0x54	; 84
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e4 e5       	ldi	r30, 0x54	; 84
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	80 64       	ori	r24, 0x40	; 64
    2bea:	8c 93       	st	X, r24
					Local_enuErrorState = ES_OK;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	8a 83       	std	Y+2, r24	; 0x02
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <EXTI_enuInit+0x358>
					break;

				default :
					Local_enuErrorState = ES_OUT_OF_RANGE;
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	8a 83       	std	Y+2, r24	; 0x02
				}

				if (Copy_pAstrEXTIConfig[Local_u8Iter].intMode == ENABLE)
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	c9 01       	movw	r24, r18
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	28 0f       	add	r18, r24
    2c04:	39 1f       	adc	r19, r25
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	e2 0f       	add	r30, r18
    2c0e:	f3 1f       	adc	r31, r19
    2c10:	81 81       	ldd	r24, Z+1	; 0x01
    2c12:	85 32       	cpi	r24, 0x25	; 37
    2c14:	41 f4       	brne	.+16     	; 0x2c26 <EXTI_enuInit+0x388>
				{
					GICR |= (1 << 5);
    2c16:	ab e5       	ldi	r26, 0x5B	; 91
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	eb e5       	ldi	r30, 0x5B	; 91
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	80 62       	ori	r24, 0x20	; 32
    2c22:	8c 93       	st	X, r24
    2c24:	1a c0       	rjmp	.+52     	; 0x2c5a <EXTI_enuInit+0x3bc>
				}
				else if (Copy_pAstrEXTIConfig[Local_u8Iter].intMode == DISABLE)
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	c9 01       	movw	r24, r18
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	28 0f       	add	r18, r24
    2c34:	39 1f       	adc	r19, r25
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	e2 0f       	add	r30, r18
    2c3e:	f3 1f       	adc	r31, r19
    2c40:	81 81       	ldd	r24, Z+1	; 0x01
    2c42:	8a 30       	cpi	r24, 0x0A	; 10
    2c44:	41 f4       	brne	.+16     	; 0x2c56 <EXTI_enuInit+0x3b8>
				{
					GICR &=~(1 << 5);
    2c46:	ab e5       	ldi	r26, 0x5B	; 91
    2c48:	b0 e0       	ldi	r27, 0x00	; 0
    2c4a:	eb e5       	ldi	r30, 0x5B	; 91
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
    2c50:	8f 7d       	andi	r24, 0xDF	; 223
    2c52:	8c 93       	st	X, r24
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <EXTI_enuInit+0x3bc>
				}
				else
				{
					Local_enuErrorState = ES_OUT_OF_RANGE;
    2c56:	82 e0       	ldi	r24, 0x02	; 2
    2c58:	8a 83       	std	Y+2, r24	; 0x02
				}

				Local_enuErrorState = ES_OK;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <EXTI_enuInit+0x3c6>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pAstrEXTIConfig != NULL)
	{
		u8 Local_u8Iter=0;
		for(;Local_u8Iter < EXTI_u8EXTINum ; Local_u8Iter++)
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	8f 5f       	subi	r24, 0xFF	; 255
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	90 91 68 01 	lds	r25, 0x0168
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	89 17       	cp	r24, r25
    2c72:	08 f4       	brcc	.+2      	; 0x2c76 <EXTI_enuInit+0x3d8>
    2c74:	28 ce       	rjmp	.-944    	; 0x28c6 <EXTI_enuInit+0x28>
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <EXTI_enuInit+0x3de>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c7e:	28 96       	adiw	r28, 0x08	; 8
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <EXTI_enuSetSenseLvl>:

ES_t EXTI_enuSetSenseLvl(EXTI_t * Copy_pstrEXTIInfo, u8 Copy_u8SenseLvl)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <EXTI_enuSetSenseLvl+0x6>
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <EXTI_enuSetSenseLvl+0x8>
    2c98:	00 d0       	rcall	.+0      	; 0x2c9a <EXTI_enuSetSenseLvl+0xa>
    2c9a:	cd b7       	in	r28, 0x3d	; 61
    2c9c:	de b7       	in	r29, 0x3e	; 62
    2c9e:	9b 83       	std	Y+3, r25	; 0x03
    2ca0:	8a 83       	std	Y+2, r24	; 0x02
    2ca2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2ca4:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8SenseLvl)
    2ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	3e 83       	std	Y+6, r19	; 0x06
    2cae:	2d 83       	std	Y+5, r18	; 0x05
    2cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb4:	83 34       	cpi	r24, 0x43	; 67
    2cb6:	91 05       	cpc	r25, r1
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <EXTI_enuSetSenseLvl+0x2c>
    2cba:	4f c0       	rjmp	.+158    	; 0x2d5a <EXTI_enuSetSenseLvl+0xca>
    2cbc:	2d 81       	ldd	r18, Y+5	; 0x05
    2cbe:	3e 81       	ldd	r19, Y+6	; 0x06
    2cc0:	24 34       	cpi	r18, 0x44	; 68
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	5c f4       	brge	.+22     	; 0x2cdc <EXTI_enuSetSenseLvl+0x4c>
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	80 32       	cpi	r24, 0x20	; 32
    2ccc:	91 05       	cpc	r25, r1
    2cce:	79 f0       	breq	.+30     	; 0x2cee <EXTI_enuSetSenseLvl+0x5e>
    2cd0:	2d 81       	ldd	r18, Y+5	; 0x05
    2cd2:	3e 81       	ldd	r19, Y+6	; 0x06
    2cd4:	21 34       	cpi	r18, 0x41	; 65
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	39 f0       	breq	.+14     	; 0x2ce8 <EXTI_enuSetSenseLvl+0x58>
    2cda:	5a c0       	rjmp	.+180    	; 0x2d90 <EXTI_enuSetSenseLvl+0x100>
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	81 36       	cpi	r24, 0x61	; 97
    2ce2:	91 05       	cpc	r25, r1
    2ce4:	f9 f0       	breq	.+62     	; 0x2d24 <EXTI_enuSetSenseLvl+0x94>
    2ce6:	54 c0       	rjmp	.+168    	; 0x2d90 <EXTI_enuSetSenseLvl+0x100>
					{
					case LOW_LVL:
						Local_enuErrorState = ES_OK;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	53 c0       	rjmp	.+166    	; 0x2d94 <EXTI_enuSetSenseLvl+0x104>
						break;
					case ANY_LOGICAL:
						MCUCR |=   (1 << (2*Copy_pstrEXTIInfo->intNum) );
    2cee:	a5 e5       	ldi	r26, 0x55	; 85
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	e5 e5       	ldi	r30, 0x55	; 85
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	48 2f       	mov	r20, r24
    2cfa:	ea 81       	ldd	r30, Y+2	; 0x02
    2cfc:	fb 81       	ldd	r31, Y+3	; 0x03
    2cfe:	82 81       	ldd	r24, Z+2	; 0x02
    2d00:	88 2f       	mov	r24, r24
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	9c 01       	movw	r18, r24
    2d06:	22 0f       	add	r18, r18
    2d08:	33 1f       	adc	r19, r19
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	02 2e       	mov	r0, r18
    2d10:	02 c0       	rjmp	.+4      	; 0x2d16 <EXTI_enuSetSenseLvl+0x86>
    2d12:	88 0f       	add	r24, r24
    2d14:	99 1f       	adc	r25, r25
    2d16:	0a 94       	dec	r0
    2d18:	e2 f7       	brpl	.-8      	; 0x2d12 <EXTI_enuSetSenseLvl+0x82>
    2d1a:	84 2b       	or	r24, r20
    2d1c:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	38 c0       	rjmp	.+112    	; 0x2d94 <EXTI_enuSetSenseLvl+0x104>
						break;

					case FALLING:
						MCUCR |=   (2 << (2*Copy_pstrEXTIInfo->intNum) );
    2d24:	a5 e5       	ldi	r26, 0x55	; 85
    2d26:	b0 e0       	ldi	r27, 0x00	; 0
    2d28:	e5 e5       	ldi	r30, 0x55	; 85
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	80 81       	ld	r24, Z
    2d2e:	48 2f       	mov	r20, r24
    2d30:	ea 81       	ldd	r30, Y+2	; 0x02
    2d32:	fb 81       	ldd	r31, Y+3	; 0x03
    2d34:	82 81       	ldd	r24, Z+2	; 0x02
    2d36:	88 2f       	mov	r24, r24
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9c 01       	movw	r18, r24
    2d3c:	22 0f       	add	r18, r18
    2d3e:	33 1f       	adc	r19, r19
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	02 2e       	mov	r0, r18
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <EXTI_enuSetSenseLvl+0xbc>
    2d48:	88 0f       	add	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	0a 94       	dec	r0
    2d4e:	e2 f7       	brpl	.-8      	; 0x2d48 <EXTI_enuSetSenseLvl+0xb8>
    2d50:	84 2b       	or	r24, r20
    2d52:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	89 83       	std	Y+1, r24	; 0x01
    2d58:	1d c0       	rjmp	.+58     	; 0x2d94 <EXTI_enuSetSenseLvl+0x104>
						break;

					case RISING:
						MCUCR |=   (3 << (2*Copy_pstrEXTIInfo->intNum) );
    2d5a:	a5 e5       	ldi	r26, 0x55	; 85
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	e5 e5       	ldi	r30, 0x55	; 85
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	48 2f       	mov	r20, r24
    2d66:	ea 81       	ldd	r30, Y+2	; 0x02
    2d68:	fb 81       	ldd	r31, Y+3	; 0x03
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	9c 01       	movw	r18, r24
    2d72:	22 0f       	add	r18, r18
    2d74:	33 1f       	adc	r19, r19
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	02 2e       	mov	r0, r18
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <EXTI_enuSetSenseLvl+0xf2>
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	0a 94       	dec	r0
    2d84:	e2 f7       	brpl	.-8      	; 0x2d7e <EXTI_enuSetSenseLvl+0xee>
    2d86:	84 2b       	or	r24, r20
    2d88:	8c 93       	st	X, r24
						Local_enuErrorState = ES_OK;
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	02 c0       	rjmp	.+4      	; 0x2d94 <EXTI_enuSetSenseLvl+0x104>
						break;

					default :
						Local_enuErrorState = ES_OUT_OF_RANGE;
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	89 83       	std	Y+1, r24	; 0x01
					}

	return Local_enuErrorState;
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d96:	26 96       	adiw	r28, 0x06	; 6
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <EXTI_enuEnableInt>:

ES_t EXTI_enuEnableInt(EXTI_t * Copy_pstrEXTIInfo)
{
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <EXTI_enuEnableInt+0x6>
    2dae:	0f 92       	push	r0
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	9b 83       	std	Y+3, r25	; 0x03
    2db6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2db8:	19 82       	std	Y+1, r1	; 0x01

	GICR |= (1 << (6 + Copy_pstrEXTIInfo->intNum));
    2dba:	ab e5       	ldi	r26, 0x5B	; 91
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	eb e5       	ldi	r30, 0x5B	; 91
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	48 2f       	mov	r20, r24
    2dc6:	ea 81       	ldd	r30, Y+2	; 0x02
    2dc8:	fb 81       	ldd	r31, Y+3	; 0x03
    2dca:	82 81       	ldd	r24, Z+2	; 0x02
    2dcc:	88 2f       	mov	r24, r24
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	9c 01       	movw	r18, r24
    2dd2:	2a 5f       	subi	r18, 0xFA	; 250
    2dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	02 2e       	mov	r0, r18
    2ddc:	02 c0       	rjmp	.+4      	; 0x2de2 <EXTI_enuEnableInt+0x3a>
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	0a 94       	dec	r0
    2de4:	e2 f7       	brpl	.-8      	; 0x2dde <EXTI_enuEnableInt+0x36>
    2de6:	84 2b       	or	r24, r20
    2de8:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <EXTI_enuDisbleInt>:

ES_t EXTI_enuDisbleInt(EXTI_t * Copy_pstrEXTIInfo)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <EXTI_enuDisbleInt+0x6>
    2dfe:	0f 92       	push	r0
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	9b 83       	std	Y+3, r25	; 0x03
    2e06:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2e08:	19 82       	std	Y+1, r1	; 0x01

	GICR &=~(1 << (6 + Copy_pstrEXTIInfo->intNum));
    2e0a:	ab e5       	ldi	r26, 0x5B	; 91
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	eb e5       	ldi	r30, 0x5B	; 91
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	48 2f       	mov	r20, r24
    2e16:	ea 81       	ldd	r30, Y+2	; 0x02
    2e18:	fb 81       	ldd	r31, Y+3	; 0x03
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	88 2f       	mov	r24, r24
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	9c 01       	movw	r18, r24
    2e22:	2a 5f       	subi	r18, 0xFA	; 250
    2e24:	3f 4f       	sbci	r19, 0xFF	; 255
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	02 2e       	mov	r0, r18
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <EXTI_enuDisbleInt+0x3a>
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	0a 94       	dec	r0
    2e34:	e2 f7       	brpl	.-8      	; 0x2e2e <EXTI_enuDisbleInt+0x36>
    2e36:	80 95       	com	r24
    2e38:	84 23       	and	r24, r20
    2e3a:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	cf 91       	pop	r28
    2e46:	df 91       	pop	r29
    2e48:	08 95       	ret

00002e4a <EXTI_enuCallBack>:


ES_t EXTI_enuCallBack(EXTI_t * Copy_pstrEXTIInfo, void (*Copy_pfunAppFun)(void*) , void * Copy_pvidAppParameter)
{
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	27 97       	sbiw	r28, 0x07	; 7
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    2e5e:	9b 83       	std	Y+3, r25	; 0x03
    2e60:	8a 83       	std	Y+2, r24	; 0x02
    2e62:	7d 83       	std	Y+5, r23	; 0x05
    2e64:	6c 83       	std	Y+4, r22	; 0x04
    2e66:	5f 83       	std	Y+7, r21	; 0x07
    2e68:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    2e6a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pstrEXTIInfo != NULL &&
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	59 f1       	breq	.+86     	; 0x2eca <EXTI_enuCallBack+0x80>
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	9d 81       	ldd	r25, Y+5	; 0x05
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	39 f1       	breq	.+78     	; 0x2eca <EXTI_enuCallBack+0x80>
			Copy_pfunAppFun != NULL)
	{
		if (Copy_pstrEXTIInfo -> intNum <= INT2)
    2e7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2e7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2e80:	82 81       	ldd	r24, Z+2	; 0x02
    2e82:	83 30       	cpi	r24, 0x03	; 3
    2e84:	f8 f4       	brcc	.+62     	; 0x2ec4 <EXTI_enuCallBack+0x7a>
		{
			EXTI_ApfunISRFun[ Copy_pstrEXTIInfo->intNum ] = Copy_pfunAppFun;
    2e86:	ea 81       	ldd	r30, Y+2	; 0x02
    2e88:	fb 81       	ldd	r31, Y+3	; 0x03
    2e8a:	82 81       	ldd	r24, Z+2	; 0x02
    2e8c:	88 2f       	mov	r24, r24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	88 0f       	add	r24, r24
    2e92:	99 1f       	adc	r25, r25
    2e94:	fc 01       	movw	r30, r24
    2e96:	e4 5c       	subi	r30, 0xC4	; 196
    2e98:	fd 4f       	sbci	r31, 0xFD	; 253
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9e:	91 83       	std	Z+1, r25	; 0x01
    2ea0:	80 83       	st	Z, r24
			EXTI_ApvidISRParameter[ Copy_pstrEXTIInfo->intNum ] = Copy_pvidAppParameter;
    2ea2:	ea 81       	ldd	r30, Y+2	; 0x02
    2ea4:	fb 81       	ldd	r31, Y+3	; 0x03
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	88 2f       	mov	r24, r24
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	88 0f       	add	r24, r24
    2eae:	99 1f       	adc	r25, r25
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	ee 5b       	subi	r30, 0xBE	; 190
    2eb4:	fd 4f       	sbci	r31, 0xFD	; 253
    2eb6:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eba:	91 83       	std	Z+1, r25	; 0x01
    2ebc:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	05 c0       	rjmp	.+10     	; 0x2ece <EXTI_enuCallBack+0x84>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2ec4:	82 e0       	ldi	r24, 0x02	; 2
    2ec6:	89 83       	std	Y+1, r24	; 0x01
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <EXTI_enuCallBack+0x84>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2eca:	83 e0       	ldi	r24, 0x03	; 3
    2ecc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ed0:	27 96       	adiw	r28, 0x07	; 7
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	08 95       	ret

00002ee2 <__vector_1>:


ISR(INT0_vect)
{
    2ee2:	1f 92       	push	r1
    2ee4:	0f 92       	push	r0
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	0f 92       	push	r0
    2eea:	11 24       	eor	r1, r1
    2eec:	2f 93       	push	r18
    2eee:	3f 93       	push	r19
    2ef0:	4f 93       	push	r20
    2ef2:	5f 93       	push	r21
    2ef4:	6f 93       	push	r22
    2ef6:	7f 93       	push	r23
    2ef8:	8f 93       	push	r24
    2efa:	9f 93       	push	r25
    2efc:	af 93       	push	r26
    2efe:	bf 93       	push	r27
    2f00:	ef 93       	push	r30
    2f02:	ff 93       	push	r31
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunISRFun[INT0] != NULL)
    2f0c:	80 91 3c 02 	lds	r24, 0x023C
    2f10:	90 91 3d 02 	lds	r25, 0x023D
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	49 f0       	breq	.+18     	; 0x2f2a <__vector_1+0x48>
	{
		EXTI_ApfunISRFun [INT0] ( EXTI_ApvidISRParameter[ INT0 ] );
    2f18:	e0 91 3c 02 	lds	r30, 0x023C
    2f1c:	f0 91 3d 02 	lds	r31, 0x023D
    2f20:	80 91 42 02 	lds	r24, 0x0242
    2f24:	90 91 43 02 	lds	r25, 0x0243
    2f28:	09 95       	icall
	}
}
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	ff 91       	pop	r31
    2f30:	ef 91       	pop	r30
    2f32:	bf 91       	pop	r27
    2f34:	af 91       	pop	r26
    2f36:	9f 91       	pop	r25
    2f38:	8f 91       	pop	r24
    2f3a:	7f 91       	pop	r23
    2f3c:	6f 91       	pop	r22
    2f3e:	5f 91       	pop	r21
    2f40:	4f 91       	pop	r20
    2f42:	3f 91       	pop	r19
    2f44:	2f 91       	pop	r18
    2f46:	0f 90       	pop	r0
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	0f 90       	pop	r0
    2f4c:	1f 90       	pop	r1
    2f4e:	18 95       	reti

00002f50 <__vector_2>:


ISR(INT1_vect)
{
    2f50:	1f 92       	push	r1
    2f52:	0f 92       	push	r0
    2f54:	0f b6       	in	r0, 0x3f	; 63
    2f56:	0f 92       	push	r0
    2f58:	11 24       	eor	r1, r1
    2f5a:	2f 93       	push	r18
    2f5c:	3f 93       	push	r19
    2f5e:	4f 93       	push	r20
    2f60:	5f 93       	push	r21
    2f62:	6f 93       	push	r22
    2f64:	7f 93       	push	r23
    2f66:	8f 93       	push	r24
    2f68:	9f 93       	push	r25
    2f6a:	af 93       	push	r26
    2f6c:	bf 93       	push	r27
    2f6e:	ef 93       	push	r30
    2f70:	ff 93       	push	r31
    2f72:	df 93       	push	r29
    2f74:	cf 93       	push	r28
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunISRFun[INT1] != NULL)
    2f7a:	80 91 3e 02 	lds	r24, 0x023E
    2f7e:	90 91 3f 02 	lds	r25, 0x023F
    2f82:	00 97       	sbiw	r24, 0x00	; 0
    2f84:	49 f0       	breq	.+18     	; 0x2f98 <__vector_2+0x48>
	{
		EXTI_ApfunISRFun [INT1] ( EXTI_ApvidISRParameter[ INT1 ] );
    2f86:	e0 91 3e 02 	lds	r30, 0x023E
    2f8a:	f0 91 3f 02 	lds	r31, 0x023F
    2f8e:	80 91 44 02 	lds	r24, 0x0244
    2f92:	90 91 45 02 	lds	r25, 0x0245
    2f96:	09 95       	icall
	}
}
    2f98:	cf 91       	pop	r28
    2f9a:	df 91       	pop	r29
    2f9c:	ff 91       	pop	r31
    2f9e:	ef 91       	pop	r30
    2fa0:	bf 91       	pop	r27
    2fa2:	af 91       	pop	r26
    2fa4:	9f 91       	pop	r25
    2fa6:	8f 91       	pop	r24
    2fa8:	7f 91       	pop	r23
    2faa:	6f 91       	pop	r22
    2fac:	5f 91       	pop	r21
    2fae:	4f 91       	pop	r20
    2fb0:	3f 91       	pop	r19
    2fb2:	2f 91       	pop	r18
    2fb4:	0f 90       	pop	r0
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	0f 90       	pop	r0
    2fba:	1f 90       	pop	r1
    2fbc:	18 95       	reti

00002fbe <__vector_3>:


ISR(INT2_vect)
{
    2fbe:	1f 92       	push	r1
    2fc0:	0f 92       	push	r0
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	0f 92       	push	r0
    2fc6:	11 24       	eor	r1, r1
    2fc8:	2f 93       	push	r18
    2fca:	3f 93       	push	r19
    2fcc:	4f 93       	push	r20
    2fce:	5f 93       	push	r21
    2fd0:	6f 93       	push	r22
    2fd2:	7f 93       	push	r23
    2fd4:	8f 93       	push	r24
    2fd6:	9f 93       	push	r25
    2fd8:	af 93       	push	r26
    2fda:	bf 93       	push	r27
    2fdc:	ef 93       	push	r30
    2fde:	ff 93       	push	r31
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunISRFun[INT2] != NULL)
    2fe8:	80 91 40 02 	lds	r24, 0x0240
    2fec:	90 91 41 02 	lds	r25, 0x0241
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	49 f0       	breq	.+18     	; 0x3006 <__vector_3+0x48>
	{
		EXTI_ApfunISRFun [INT2] ( EXTI_ApvidISRParameter[ INT2 ] );
    2ff4:	e0 91 40 02 	lds	r30, 0x0240
    2ff8:	f0 91 41 02 	lds	r31, 0x0241
    2ffc:	80 91 46 02 	lds	r24, 0x0246
    3000:	90 91 47 02 	lds	r25, 0x0247
    3004:	09 95       	icall
	}
}
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	ff 91       	pop	r31
    300c:	ef 91       	pop	r30
    300e:	bf 91       	pop	r27
    3010:	af 91       	pop	r26
    3012:	9f 91       	pop	r25
    3014:	8f 91       	pop	r24
    3016:	7f 91       	pop	r23
    3018:	6f 91       	pop	r22
    301a:	5f 91       	pop	r21
    301c:	4f 91       	pop	r20
    301e:	3f 91       	pop	r19
    3020:	2f 91       	pop	r18
    3022:	0f 90       	pop	r0
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	0f 90       	pop	r0
    3028:	1f 90       	pop	r1
    302a:	18 95       	reti

0000302c <M_DIO_enu_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
DIO_LevelType  M_DIO_enu_getPinValue(DIO_ChannelType ChannelId)
{
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	00 d0       	rcall	.+0      	; 0x3032 <M_DIO_enu_getPinValue+0x6>
    3032:	00 d0       	rcall	.+0      	; 0x3034 <M_DIO_enu_getPinValue+0x8>
    3034:	00 d0       	rcall	.+0      	; 0x3036 <M_DIO_enu_getPinValue+0xa>
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    303c:	8c 81       	ldd	r24, Y+4	; 0x04
    303e:	9a e0       	ldi	r25, 0x0A	; 10
    3040:	69 2f       	mov	r22, r25
    3042:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__udivmodqi4>
    3046:	89 2f       	mov	r24, r25
    3048:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    304a:	8c 81       	ldd	r24, Y+4	; 0x04
    304c:	9a e0       	ldi	r25, 0x0A	; 10
    304e:	69 2f       	mov	r22, r25
    3050:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__udivmodqi4>
    3054:	8a 83       	std	Y+2, r24	; 0x02

	DIO_LevelType Local_levelType;
	switch(port)
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	28 2f       	mov	r18, r24
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	3e 83       	std	Y+6, r19	; 0x06
    305e:	2d 83       	std	Y+5, r18	; 0x05
    3060:	4d 81       	ldd	r20, Y+5	; 0x05
    3062:	5e 81       	ldd	r21, Y+6	; 0x06
    3064:	42 30       	cpi	r20, 0x02	; 2
    3066:	51 05       	cpc	r21, r1
    3068:	41 f1       	breq	.+80     	; 0x30ba <M_DIO_enu_getPinValue+0x8e>
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	83 30       	cpi	r24, 0x03	; 3
    3070:	91 05       	cpc	r25, r1
    3072:	34 f4       	brge	.+12     	; 0x3080 <M_DIO_enu_getPinValue+0x54>
    3074:	2d 81       	ldd	r18, Y+5	; 0x05
    3076:	3e 81       	ldd	r19, Y+6	; 0x06
    3078:	21 30       	cpi	r18, 0x01	; 1
    307a:	31 05       	cpc	r19, r1
    307c:	61 f0       	breq	.+24     	; 0x3096 <M_DIO_enu_getPinValue+0x6a>
    307e:	52 c0       	rjmp	.+164    	; 0x3124 <M_DIO_enu_getPinValue+0xf8>
    3080:	4d 81       	ldd	r20, Y+5	; 0x05
    3082:	5e 81       	ldd	r21, Y+6	; 0x06
    3084:	43 30       	cpi	r20, 0x03	; 3
    3086:	51 05       	cpc	r21, r1
    3088:	51 f1       	breq	.+84     	; 0x30de <M_DIO_enu_getPinValue+0xb2>
    308a:	8d 81       	ldd	r24, Y+5	; 0x05
    308c:	9e 81       	ldd	r25, Y+6	; 0x06
    308e:	84 30       	cpi	r24, 0x04	; 4
    3090:	91 05       	cpc	r25, r1
    3092:	b9 f1       	breq	.+110    	; 0x3102 <M_DIO_enu_getPinValue+0xd6>
    3094:	47 c0       	rjmp	.+142    	; 0x3124 <M_DIO_enu_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    3096:	e9 e3       	ldi	r30, 0x39	; 57
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	88 2f       	mov	r24, r24
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	a9 01       	movw	r20, r18
    30a8:	02 c0       	rjmp	.+4      	; 0x30ae <M_DIO_enu_getPinValue+0x82>
    30aa:	55 95       	asr	r21
    30ac:	47 95       	ror	r20
    30ae:	8a 95       	dec	r24
    30b0:	e2 f7       	brpl	.-8      	; 0x30aa <M_DIO_enu_getPinValue+0x7e>
    30b2:	ca 01       	movw	r24, r20
    30b4:	81 70       	andi	r24, 0x01	; 1
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	35 c0       	rjmp	.+106    	; 0x3124 <M_DIO_enu_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    30ba:	e6 e3       	ldi	r30, 0x36	; 54
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	28 2f       	mov	r18, r24
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	88 2f       	mov	r24, r24
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	a9 01       	movw	r20, r18
    30cc:	02 c0       	rjmp	.+4      	; 0x30d2 <M_DIO_enu_getPinValue+0xa6>
    30ce:	55 95       	asr	r21
    30d0:	47 95       	ror	r20
    30d2:	8a 95       	dec	r24
    30d4:	e2 f7       	brpl	.-8      	; 0x30ce <M_DIO_enu_getPinValue+0xa2>
    30d6:	ca 01       	movw	r24, r20
    30d8:	81 70       	andi	r24, 0x01	; 1
    30da:	89 83       	std	Y+1, r24	; 0x01
    30dc:	23 c0       	rjmp	.+70     	; 0x3124 <M_DIO_enu_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    30de:	e3 e3       	ldi	r30, 0x33	; 51
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	28 2f       	mov	r18, r24
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ea:	88 2f       	mov	r24, r24
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	a9 01       	movw	r20, r18
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <M_DIO_enu_getPinValue+0xca>
    30f2:	55 95       	asr	r21
    30f4:	47 95       	ror	r20
    30f6:	8a 95       	dec	r24
    30f8:	e2 f7       	brpl	.-8      	; 0x30f2 <M_DIO_enu_getPinValue+0xc6>
    30fa:	ca 01       	movw	r24, r20
    30fc:	81 70       	andi	r24, 0x01	; 1
    30fe:	89 83       	std	Y+1, r24	; 0x01
    3100:	11 c0       	rjmp	.+34     	; 0x3124 <M_DIO_enu_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    3102:	e0 e3       	ldi	r30, 0x30	; 48
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	28 2f       	mov	r18, r24
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	8b 81       	ldd	r24, Y+3	; 0x03
    310e:	88 2f       	mov	r24, r24
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	a9 01       	movw	r20, r18
    3114:	02 c0       	rjmp	.+4      	; 0x311a <M_DIO_enu_getPinValue+0xee>
    3116:	55 95       	asr	r21
    3118:	47 95       	ror	r20
    311a:	8a 95       	dec	r24
    311c:	e2 f7       	brpl	.-8      	; 0x3116 <M_DIO_enu_getPinValue+0xea>
    311e:	ca 01       	movw	r24, r20
    3120:	81 70       	andi	r24, 0x01	; 1
    3122:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    3124:	89 81       	ldd	r24, Y+1	; 0x01
}
    3126:	26 96       	adiw	r28, 0x06	; 6
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <M_DIO_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_void_setPinValue(DIO_ChannelType ChannelId,DIO_LevelType Level)
{
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	28 97       	sbiw	r28, 0x08	; 8
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	8b 83       	std	Y+3, r24	; 0x03
    314e:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9a e0       	ldi	r25, 0x0A	; 10
    3154:	69 2f       	mov	r22, r25
    3156:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__udivmodqi4>
    315a:	89 2f       	mov	r24, r25
    315c:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	9a e0       	ldi	r25, 0x0A	; 10
    3162:	69 2f       	mov	r22, r25
    3164:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__udivmodqi4>
    3168:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    316a:	8c 81       	ldd	r24, Y+4	; 0x04
    316c:	81 30       	cpi	r24, 0x01	; 1
    316e:	09 f0       	breq	.+2      	; 0x3172 <M_DIO_void_setPinValue+0x3a>
    3170:	70 c0       	rjmp	.+224    	; 0x3252 <M_DIO_void_setPinValue+0x11a>
	{
		switch(port)
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	28 2f       	mov	r18, r24
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	38 87       	std	Y+8, r19	; 0x08
    317a:	2f 83       	std	Y+7, r18	; 0x07
    317c:	8f 81       	ldd	r24, Y+7	; 0x07
    317e:	98 85       	ldd	r25, Y+8	; 0x08
    3180:	82 30       	cpi	r24, 0x02	; 2
    3182:	91 05       	cpc	r25, r1
    3184:	51 f1       	breq	.+84     	; 0x31da <M_DIO_void_setPinValue+0xa2>
    3186:	2f 81       	ldd	r18, Y+7	; 0x07
    3188:	38 85       	ldd	r19, Y+8	; 0x08
    318a:	23 30       	cpi	r18, 0x03	; 3
    318c:	31 05       	cpc	r19, r1
    318e:	34 f4       	brge	.+12     	; 0x319c <M_DIO_void_setPinValue+0x64>
    3190:	8f 81       	ldd	r24, Y+7	; 0x07
    3192:	98 85       	ldd	r25, Y+8	; 0x08
    3194:	81 30       	cpi	r24, 0x01	; 1
    3196:	91 05       	cpc	r25, r1
    3198:	61 f0       	breq	.+24     	; 0x31b2 <M_DIO_void_setPinValue+0x7a>
    319a:	d3 c0       	rjmp	.+422    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
    319c:	2f 81       	ldd	r18, Y+7	; 0x07
    319e:	38 85       	ldd	r19, Y+8	; 0x08
    31a0:	23 30       	cpi	r18, 0x03	; 3
    31a2:	31 05       	cpc	r19, r1
    31a4:	71 f1       	breq	.+92     	; 0x3202 <M_DIO_void_setPinValue+0xca>
    31a6:	8f 81       	ldd	r24, Y+7	; 0x07
    31a8:	98 85       	ldd	r25, Y+8	; 0x08
    31aa:	84 30       	cpi	r24, 0x04	; 4
    31ac:	91 05       	cpc	r25, r1
    31ae:	e9 f1       	breq	.+122    	; 0x322a <M_DIO_void_setPinValue+0xf2>
    31b0:	c8 c0       	rjmp	.+400    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    31b2:	ab e3       	ldi	r26, 0x3B	; 59
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	eb e3       	ldi	r30, 0x3B	; 59
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	48 2f       	mov	r20, r24
    31be:	8a 81       	ldd	r24, Y+2	; 0x02
    31c0:	28 2f       	mov	r18, r24
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	02 2e       	mov	r0, r18
    31ca:	02 c0       	rjmp	.+4      	; 0x31d0 <M_DIO_void_setPinValue+0x98>
    31cc:	88 0f       	add	r24, r24
    31ce:	99 1f       	adc	r25, r25
    31d0:	0a 94       	dec	r0
    31d2:	e2 f7       	brpl	.-8      	; 0x31cc <M_DIO_void_setPinValue+0x94>
    31d4:	84 2b       	or	r24, r20
    31d6:	8c 93       	st	X, r24
    31d8:	b4 c0       	rjmp	.+360    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    31da:	a8 e3       	ldi	r26, 0x38	; 56
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e8 e3       	ldi	r30, 0x38	; 56
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	48 2f       	mov	r20, r24
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	28 2f       	mov	r18, r24
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	02 2e       	mov	r0, r18
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <M_DIO_void_setPinValue+0xc0>
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	0a 94       	dec	r0
    31fa:	e2 f7       	brpl	.-8      	; 0x31f4 <M_DIO_void_setPinValue+0xbc>
    31fc:	84 2b       	or	r24, r20
    31fe:	8c 93       	st	X, r24
    3200:	a0 c0       	rjmp	.+320    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    3202:	a5 e3       	ldi	r26, 0x35	; 53
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e5 e3       	ldi	r30, 0x35	; 53
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	48 2f       	mov	r20, r24
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	02 2e       	mov	r0, r18
    321a:	02 c0       	rjmp	.+4      	; 0x3220 <M_DIO_void_setPinValue+0xe8>
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	0a 94       	dec	r0
    3222:	e2 f7       	brpl	.-8      	; 0x321c <M_DIO_void_setPinValue+0xe4>
    3224:	84 2b       	or	r24, r20
    3226:	8c 93       	st	X, r24
    3228:	8c c0       	rjmp	.+280    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    322a:	a2 e3       	ldi	r26, 0x32	; 50
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	e2 e3       	ldi	r30, 0x32	; 50
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	48 2f       	mov	r20, r24
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	02 2e       	mov	r0, r18
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <M_DIO_void_setPinValue+0x110>
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	0a 94       	dec	r0
    324a:	e2 f7       	brpl	.-8      	; 0x3244 <M_DIO_void_setPinValue+0x10c>
    324c:	84 2b       	or	r24, r20
    324e:	8c 93       	st	X, r24
    3250:	78 c0       	rjmp	.+240    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    3252:	8c 81       	ldd	r24, Y+4	; 0x04
    3254:	88 23       	and	r24, r24
    3256:	09 f0       	breq	.+2      	; 0x325a <M_DIO_void_setPinValue+0x122>
    3258:	74 c0       	rjmp	.+232    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
	{
		switch(port)
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	28 2f       	mov	r18, r24
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	3e 83       	std	Y+6, r19	; 0x06
    3262:	2d 83       	std	Y+5, r18	; 0x05
    3264:	8d 81       	ldd	r24, Y+5	; 0x05
    3266:	9e 81       	ldd	r25, Y+6	; 0x06
    3268:	82 30       	cpi	r24, 0x02	; 2
    326a:	91 05       	cpc	r25, r1
    326c:	61 f1       	breq	.+88     	; 0x32c6 <M_DIO_void_setPinValue+0x18e>
    326e:	2d 81       	ldd	r18, Y+5	; 0x05
    3270:	3e 81       	ldd	r19, Y+6	; 0x06
    3272:	23 30       	cpi	r18, 0x03	; 3
    3274:	31 05       	cpc	r19, r1
    3276:	34 f4       	brge	.+12     	; 0x3284 <M_DIO_void_setPinValue+0x14c>
    3278:	8d 81       	ldd	r24, Y+5	; 0x05
    327a:	9e 81       	ldd	r25, Y+6	; 0x06
    327c:	81 30       	cpi	r24, 0x01	; 1
    327e:	91 05       	cpc	r25, r1
    3280:	69 f0       	breq	.+26     	; 0x329c <M_DIO_void_setPinValue+0x164>
    3282:	5f c0       	rjmp	.+190    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
    3284:	2d 81       	ldd	r18, Y+5	; 0x05
    3286:	3e 81       	ldd	r19, Y+6	; 0x06
    3288:	23 30       	cpi	r18, 0x03	; 3
    328a:	31 05       	cpc	r19, r1
    328c:	89 f1       	breq	.+98     	; 0x32f0 <M_DIO_void_setPinValue+0x1b8>
    328e:	8d 81       	ldd	r24, Y+5	; 0x05
    3290:	9e 81       	ldd	r25, Y+6	; 0x06
    3292:	84 30       	cpi	r24, 0x04	; 4
    3294:	91 05       	cpc	r25, r1
    3296:	09 f4       	brne	.+2      	; 0x329a <M_DIO_void_setPinValue+0x162>
    3298:	40 c0       	rjmp	.+128    	; 0x331a <M_DIO_void_setPinValue+0x1e2>
    329a:	53 c0       	rjmp	.+166    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    329c:	ab e3       	ldi	r26, 0x3B	; 59
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	eb e3       	ldi	r30, 0x3B	; 59
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	80 81       	ld	r24, Z
    32a6:	48 2f       	mov	r20, r24
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	28 2f       	mov	r18, r24
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	02 2e       	mov	r0, r18
    32b4:	02 c0       	rjmp	.+4      	; 0x32ba <M_DIO_void_setPinValue+0x182>
    32b6:	88 0f       	add	r24, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	0a 94       	dec	r0
    32bc:	e2 f7       	brpl	.-8      	; 0x32b6 <M_DIO_void_setPinValue+0x17e>
    32be:	80 95       	com	r24
    32c0:	84 23       	and	r24, r20
    32c2:	8c 93       	st	X, r24
    32c4:	3e c0       	rjmp	.+124    	; 0x3342 <M_DIO_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    32c6:	a8 e3       	ldi	r26, 0x38	; 56
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	e8 e3       	ldi	r30, 0x38	; 56
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	48 2f       	mov	r20, r24
    32d2:	8a 81       	ldd	r24, Y+2	; 0x02
    32d4:	28 2f       	mov	r18, r24
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	02 2e       	mov	r0, r18
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <M_DIO_void_setPinValue+0x1ac>
    32e0:	88 0f       	add	r24, r24
    32e2:	99 1f       	adc	r25, r25
    32e4:	0a 94       	dec	r0
    32e6:	e2 f7       	brpl	.-8      	; 0x32e0 <M_DIO_void_setPinValue+0x1a8>
    32e8:	80 95       	com	r24
    32ea:	84 23       	and	r24, r20
    32ec:	8c 93       	st	X, r24
    32ee:	29 c0       	rjmp	.+82     	; 0x3342 <M_DIO_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    32f0:	a5 e3       	ldi	r26, 0x35	; 53
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	e5 e3       	ldi	r30, 0x35	; 53
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	48 2f       	mov	r20, r24
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	28 2f       	mov	r18, r24
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	02 2e       	mov	r0, r18
    3308:	02 c0       	rjmp	.+4      	; 0x330e <M_DIO_void_setPinValue+0x1d6>
    330a:	88 0f       	add	r24, r24
    330c:	99 1f       	adc	r25, r25
    330e:	0a 94       	dec	r0
    3310:	e2 f7       	brpl	.-8      	; 0x330a <M_DIO_void_setPinValue+0x1d2>
    3312:	80 95       	com	r24
    3314:	84 23       	and	r24, r20
    3316:	8c 93       	st	X, r24
    3318:	14 c0       	rjmp	.+40     	; 0x3342 <M_DIO_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    331a:	a2 e3       	ldi	r26, 0x32	; 50
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	e2 e3       	ldi	r30, 0x32	; 50
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	48 2f       	mov	r20, r24
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	02 2e       	mov	r0, r18
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <M_DIO_void_setPinValue+0x200>
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	0a 94       	dec	r0
    333a:	e2 f7       	brpl	.-8      	; 0x3334 <M_DIO_void_setPinValue+0x1fc>
    333c:	80 95       	com	r24
    333e:	84 23       	and	r24, r20
    3340:	8c 93       	st	X, r24
		}

	}

}
    3342:	28 96       	adiw	r28, 0x08	; 8
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
    334e:	cf 91       	pop	r28
    3350:	df 91       	pop	r29
    3352:	08 95       	ret

00003354 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(DIO_PortType PortId)
{
    3354:	df 93       	push	r29
    3356:	cf 93       	push	r28
    3358:	00 d0       	rcall	.+0      	; 0x335a <M_Dio_en_getPortValue+0x6>
    335a:	00 d0       	rcall	.+0      	; 0x335c <M_Dio_en_getPortValue+0x8>
    335c:	cd b7       	in	r28, 0x3d	; 61
    335e:	de b7       	in	r29, 0x3e	; 62
    3360:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    3362:	8a 81       	ldd	r24, Y+2	; 0x02
    3364:	28 2f       	mov	r18, r24
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	3c 83       	std	Y+4, r19	; 0x04
    336a:	2b 83       	std	Y+3, r18	; 0x03
    336c:	8b 81       	ldd	r24, Y+3	; 0x03
    336e:	9c 81       	ldd	r25, Y+4	; 0x04
    3370:	82 30       	cpi	r24, 0x02	; 2
    3372:	91 05       	cpc	r25, r1
    3374:	d9 f0       	breq	.+54     	; 0x33ac <M_Dio_en_getPortValue+0x58>
    3376:	2b 81       	ldd	r18, Y+3	; 0x03
    3378:	3c 81       	ldd	r19, Y+4	; 0x04
    337a:	23 30       	cpi	r18, 0x03	; 3
    337c:	31 05       	cpc	r19, r1
    337e:	34 f4       	brge	.+12     	; 0x338c <M_Dio_en_getPortValue+0x38>
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	9c 81       	ldd	r25, Y+4	; 0x04
    3384:	81 30       	cpi	r24, 0x01	; 1
    3386:	91 05       	cpc	r25, r1
    3388:	61 f0       	breq	.+24     	; 0x33a2 <M_Dio_en_getPortValue+0x4e>
    338a:	1e c0       	rjmp	.+60     	; 0x33c8 <M_Dio_en_getPortValue+0x74>
    338c:	2b 81       	ldd	r18, Y+3	; 0x03
    338e:	3c 81       	ldd	r19, Y+4	; 0x04
    3390:	23 30       	cpi	r18, 0x03	; 3
    3392:	31 05       	cpc	r19, r1
    3394:	81 f0       	breq	.+32     	; 0x33b6 <M_Dio_en_getPortValue+0x62>
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	84 30       	cpi	r24, 0x04	; 4
    339c:	91 05       	cpc	r25, r1
    339e:	81 f0       	breq	.+32     	; 0x33c0 <M_Dio_en_getPortValue+0x6c>
    33a0:	13 c0       	rjmp	.+38     	; 0x33c8 <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    33a2:	eb e3       	ldi	r30, 0x3B	; 59
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	0e c0       	rjmp	.+28     	; 0x33c8 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    33ac:	e8 e3       	ldi	r30, 0x38	; 56
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	80 81       	ld	r24, Z
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	09 c0       	rjmp	.+18     	; 0x33c8 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    33b6:	e5 e3       	ldi	r30, 0x35	; 53
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	89 83       	std	Y+1, r24	; 0x01
    33be:	04 c0       	rjmp	.+8      	; 0x33c8 <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    33c0:	e2 e3       	ldi	r30, 0x32	; 50
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	80 81       	ld	r24, Z
    33c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(DIO_PortType PortId,Dio_PortLevelType Level)
{
    33d8:	df 93       	push	r29
    33da:	cf 93       	push	r28
    33dc:	00 d0       	rcall	.+0      	; 0x33de <M_Dio_void_setPortValue+0x6>
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <M_Dio_void_setPortValue+0x8>
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	89 83       	std	Y+1, r24	; 0x01
    33e6:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	28 2f       	mov	r18, r24
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	3c 83       	std	Y+4, r19	; 0x04
    33f0:	2b 83       	std	Y+3, r18	; 0x03
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	9c 81       	ldd	r25, Y+4	; 0x04
    33f6:	82 30       	cpi	r24, 0x02	; 2
    33f8:	91 05       	cpc	r25, r1
    33fa:	d9 f0       	breq	.+54     	; 0x3432 <M_Dio_void_setPortValue+0x5a>
    33fc:	2b 81       	ldd	r18, Y+3	; 0x03
    33fe:	3c 81       	ldd	r19, Y+4	; 0x04
    3400:	23 30       	cpi	r18, 0x03	; 3
    3402:	31 05       	cpc	r19, r1
    3404:	34 f4       	brge	.+12     	; 0x3412 <M_Dio_void_setPortValue+0x3a>
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	9c 81       	ldd	r25, Y+4	; 0x04
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	91 05       	cpc	r25, r1
    340e:	61 f0       	breq	.+24     	; 0x3428 <M_Dio_void_setPortValue+0x50>
    3410:	1e c0       	rjmp	.+60     	; 0x344e <M_Dio_void_setPortValue+0x76>
    3412:	2b 81       	ldd	r18, Y+3	; 0x03
    3414:	3c 81       	ldd	r19, Y+4	; 0x04
    3416:	23 30       	cpi	r18, 0x03	; 3
    3418:	31 05       	cpc	r19, r1
    341a:	81 f0       	breq	.+32     	; 0x343c <M_Dio_void_setPortValue+0x64>
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	9c 81       	ldd	r25, Y+4	; 0x04
    3420:	84 30       	cpi	r24, 0x04	; 4
    3422:	91 05       	cpc	r25, r1
    3424:	81 f0       	breq	.+32     	; 0x3446 <M_Dio_void_setPortValue+0x6e>
    3426:	13 c0       	rjmp	.+38     	; 0x344e <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    3428:	eb e3       	ldi	r30, 0x3B	; 59
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	8a 81       	ldd	r24, Y+2	; 0x02
    342e:	80 83       	st	Z, r24
    3430:	0e c0       	rjmp	.+28     	; 0x344e <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    3432:	e8 e3       	ldi	r30, 0x38	; 56
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	8a 81       	ldd	r24, Y+2	; 0x02
    3438:	80 83       	st	Z, r24
    343a:	09 c0       	rjmp	.+18     	; 0x344e <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    343c:	e5 e3       	ldi	r30, 0x35	; 53
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	8a 81       	ldd	r24, Y+2	; 0x02
    3442:	80 83       	st	Z, r24
    3444:	04 c0       	rjmp	.+8      	; 0x344e <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    3446:	e2 e3       	ldi	r30, 0x32	; 50
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	80 83       	st	Z, r24
	}
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <M_DIO_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_void_togglePinValue(DIO_ChannelType channelId)
{
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	00 d0       	rcall	.+0      	; 0x3462 <M_DIO_void_togglePinValue+0x6>
    3462:	00 d0       	rcall	.+0      	; 0x3464 <M_DIO_void_togglePinValue+0x8>
    3464:	0f 92       	push	r0
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
    346e:	9a e0       	ldi	r25, 0x0A	; 10
    3470:	69 2f       	mov	r22, r25
    3472:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__udivmodqi4>
    3476:	89 2f       	mov	r24, r25
    3478:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    347a:	8b 81       	ldd	r24, Y+3	; 0x03
    347c:	9a e0       	ldi	r25, 0x0A	; 10
    347e:	69 2f       	mov	r22, r25
    3480:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <__udivmodqi4>
    3484:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	28 2f       	mov	r18, r24
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	3d 83       	std	Y+5, r19	; 0x05
    348e:	2c 83       	std	Y+4, r18	; 0x04
    3490:	8c 81       	ldd	r24, Y+4	; 0x04
    3492:	9d 81       	ldd	r25, Y+5	; 0x05
    3494:	82 30       	cpi	r24, 0x02	; 2
    3496:	91 05       	cpc	r25, r1
    3498:	51 f1       	breq	.+84     	; 0x34ee <M_DIO_void_togglePinValue+0x92>
    349a:	2c 81       	ldd	r18, Y+4	; 0x04
    349c:	3d 81       	ldd	r19, Y+5	; 0x05
    349e:	23 30       	cpi	r18, 0x03	; 3
    34a0:	31 05       	cpc	r19, r1
    34a2:	34 f4       	brge	.+12     	; 0x34b0 <M_DIO_void_togglePinValue+0x54>
    34a4:	8c 81       	ldd	r24, Y+4	; 0x04
    34a6:	9d 81       	ldd	r25, Y+5	; 0x05
    34a8:	81 30       	cpi	r24, 0x01	; 1
    34aa:	91 05       	cpc	r25, r1
    34ac:	61 f0       	breq	.+24     	; 0x34c6 <M_DIO_void_togglePinValue+0x6a>
    34ae:	5a c0       	rjmp	.+180    	; 0x3564 <M_DIO_void_togglePinValue+0x108>
    34b0:	2c 81       	ldd	r18, Y+4	; 0x04
    34b2:	3d 81       	ldd	r19, Y+5	; 0x05
    34b4:	23 30       	cpi	r18, 0x03	; 3
    34b6:	31 05       	cpc	r19, r1
    34b8:	71 f1       	breq	.+92     	; 0x3516 <M_DIO_void_togglePinValue+0xba>
    34ba:	8c 81       	ldd	r24, Y+4	; 0x04
    34bc:	9d 81       	ldd	r25, Y+5	; 0x05
    34be:	84 30       	cpi	r24, 0x04	; 4
    34c0:	91 05       	cpc	r25, r1
    34c2:	e9 f1       	breq	.+122    	; 0x353e <M_DIO_void_togglePinValue+0xe2>
    34c4:	4f c0       	rjmp	.+158    	; 0x3564 <M_DIO_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    34c6:	ab e3       	ldi	r26, 0x3B	; 59
    34c8:	b0 e0       	ldi	r27, 0x00	; 0
    34ca:	eb e3       	ldi	r30, 0x3B	; 59
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	48 2f       	mov	r20, r24
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	28 2f       	mov	r18, r24
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	02 2e       	mov	r0, r18
    34de:	02 c0       	rjmp	.+4      	; 0x34e4 <M_DIO_void_togglePinValue+0x88>
    34e0:	88 0f       	add	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	0a 94       	dec	r0
    34e6:	e2 f7       	brpl	.-8      	; 0x34e0 <M_DIO_void_togglePinValue+0x84>
    34e8:	84 27       	eor	r24, r20
    34ea:	8c 93       	st	X, r24
    34ec:	3b c0       	rjmp	.+118    	; 0x3564 <M_DIO_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    34ee:	a8 e3       	ldi	r26, 0x38	; 56
    34f0:	b0 e0       	ldi	r27, 0x00	; 0
    34f2:	e8 e3       	ldi	r30, 0x38	; 56
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	80 81       	ld	r24, Z
    34f8:	48 2f       	mov	r20, r24
    34fa:	8a 81       	ldd	r24, Y+2	; 0x02
    34fc:	28 2f       	mov	r18, r24
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	02 2e       	mov	r0, r18
    3506:	02 c0       	rjmp	.+4      	; 0x350c <M_DIO_void_togglePinValue+0xb0>
    3508:	88 0f       	add	r24, r24
    350a:	99 1f       	adc	r25, r25
    350c:	0a 94       	dec	r0
    350e:	e2 f7       	brpl	.-8      	; 0x3508 <M_DIO_void_togglePinValue+0xac>
    3510:	84 27       	eor	r24, r20
    3512:	8c 93       	st	X, r24
    3514:	27 c0       	rjmp	.+78     	; 0x3564 <M_DIO_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    3516:	a5 e3       	ldi	r26, 0x35	; 53
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e5 e3       	ldi	r30, 0x35	; 53
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	48 2f       	mov	r20, r24
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	28 2f       	mov	r18, r24
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	02 2e       	mov	r0, r18
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <M_DIO_void_togglePinValue+0xd8>
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	0a 94       	dec	r0
    3536:	e2 f7       	brpl	.-8      	; 0x3530 <M_DIO_void_togglePinValue+0xd4>
    3538:	84 27       	eor	r24, r20
    353a:	8c 93       	st	X, r24
    353c:	13 c0       	rjmp	.+38     	; 0x3564 <M_DIO_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    353e:	a2 e3       	ldi	r26, 0x32	; 50
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	e2 e3       	ldi	r30, 0x32	; 50
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
    3548:	48 2f       	mov	r20, r24
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
    354c:	28 2f       	mov	r18, r24
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	02 2e       	mov	r0, r18
    3556:	02 c0       	rjmp	.+4      	; 0x355c <M_DIO_void_togglePinValue+0x100>
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	0a 94       	dec	r0
    355e:	e2 f7       	brpl	.-8      	; 0x3558 <M_DIO_void_togglePinValue+0xfc>
    3560:	84 27       	eor	r24, r20
    3562:	8c 93       	st	X, r24
	}

}
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	cf 91       	pop	r28
    3570:	df 91       	pop	r29
    3572:	08 95       	ret

00003574 <H_KEYPAD_u8_getPressedKey>:
#include "AVR\delay.h"
#include "DIO_Int.h"
#include "KP_Int.h"
#include "KP_Cfg.h"

u8 H_KEYPAD_u8_getPressedKey(void){
    3574:	df 93       	push	r29
    3576:	cf 93       	push	r28
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	e2 97       	sbiw	r28, 0x32	; 50
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	cd bf       	out	0x3d, r28	; 61
	u8 copy_u8Keyvalue=0;
    3588:	1d 8a       	std	Y+21, r1	; 0x15
	DIO_LevelType signal=0;
    358a:	1c 8a       	std	Y+20, r1	; 0x14
	u8 flag=0;
    358c:	1b 8a       	std	Y+19, r1	; 0x13
	int r=0;
    358e:	1a 8a       	std	Y+18, r1	; 0x12
    3590:	19 8a       	std	Y+17, r1	; 0x11
	int c=0;
    3592:	18 8a       	std	Y+16, r1	; 0x10
    3594:	1f 86       	std	Y+15, r1	; 0x0f
	DIO_ChannelType rows[] = {KP_ROW1 , KP_ROW2 , KP_ROW3 , KP_ROW4};
    3596:	83 e2       	ldi	r24, 0x23	; 35
    3598:	8e 8b       	std	Y+22, r24	; 0x16
    359a:	82 e2       	ldi	r24, 0x22	; 34
    359c:	8f 8b       	std	Y+23, r24	; 0x17
    359e:	81 e2       	ldi	r24, 0x21	; 33
    35a0:	88 8f       	std	Y+24, r24	; 0x18
    35a2:	80 e2       	ldi	r24, 0x20	; 32
    35a4:	89 8f       	std	Y+25, r24	; 0x19
	DIO_ChannelType cols[] = {KP_COL1 , KP_COL2 ,KP_COL3 , KP_COL4};
    35a6:	8f e2       	ldi	r24, 0x2F	; 47
    35a8:	8a 8f       	std	Y+26, r24	; 0x1a
    35aa:	8e e2       	ldi	r24, 0x2E	; 46
    35ac:	8b 8f       	std	Y+27, r24	; 0x1b
    35ae:	8d e2       	ldi	r24, 0x2D	; 45
    35b0:	8c 8f       	std	Y+28, r24	; 0x1c
    35b2:	8b e2       	ldi	r24, 0x2B	; 43
    35b4:	8d 8f       	std	Y+29, r24	; 0x1d
	for(r=0;r<NO_OF_ROWS;r++){
    35b6:	1a 8a       	std	Y+18, r1	; 0x12
    35b8:	19 8a       	std	Y+17, r1	; 0x11
    35ba:	fe c0       	rjmp	.+508    	; 0x37b8 <H_KEYPAD_u8_getPressedKey+0x244>
		M_DIO_void_setPinValue(rows[r],DIO_LOW);
    35bc:	29 89       	ldd	r18, Y+17	; 0x11
    35be:	3a 89       	ldd	r19, Y+18	; 0x12
    35c0:	ce 01       	movw	r24, r28
    35c2:	46 96       	adiw	r24, 0x16	; 22
    35c4:	fc 01       	movw	r30, r24
    35c6:	e2 0f       	add	r30, r18
    35c8:	f3 1f       	adc	r31, r19
    35ca:	80 81       	ld	r24, Z
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
		for(c=0;c<NO_ON_COLS;c++){
    35d2:	18 8a       	std	Y+16, r1	; 0x10
    35d4:	1f 86       	std	Y+15, r1	; 0x0f
    35d6:	da c0       	rjmp	.+436    	; 0x378c <H_KEYPAD_u8_getPressedKey+0x218>
			signal =M_DIO_enu_getPinValue(cols[c]);
    35d8:	2f 85       	ldd	r18, Y+15	; 0x0f
    35da:	38 89       	ldd	r19, Y+16	; 0x10
    35dc:	ce 01       	movw	r24, r28
    35de:	4a 96       	adiw	r24, 0x1a	; 26
    35e0:	fc 01       	movw	r30, r24
    35e2:	e2 0f       	add	r30, r18
    35e4:	f3 1f       	adc	r31, r19
    35e6:	80 81       	ld	r24, Z
    35e8:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    35ec:	8c 8b       	std	Y+20, r24	; 0x14
			if(!signal){
    35ee:	8c 89       	ldd	r24, Y+20	; 0x14
    35f0:	88 23       	and	r24, r24
    35f2:	09 f0       	breq	.+2      	; 0x35f6 <H_KEYPAD_u8_getPressedKey+0x82>
    35f4:	c6 c0       	rjmp	.+396    	; 0x3782 <H_KEYPAD_u8_getPressedKey+0x20e>
    35f6:	80 e0       	ldi	r24, 0x00	; 0
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	a0 e2       	ldi	r26, 0x20	; 32
    35fc:	b1 e4       	ldi	r27, 0x41	; 65
    35fe:	8b 87       	std	Y+11, r24	; 0x0b
    3600:	9c 87       	std	Y+12, r25	; 0x0c
    3602:	ad 87       	std	Y+13, r26	; 0x0d
    3604:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3606:	6b 85       	ldd	r22, Y+11	; 0x0b
    3608:	7c 85       	ldd	r23, Y+12	; 0x0c
    360a:	8d 85       	ldd	r24, Y+13	; 0x0d
    360c:	9e 85       	ldd	r25, Y+14	; 0x0e
    360e:	20 e0       	ldi	r18, 0x00	; 0
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	4a e7       	ldi	r20, 0x7A	; 122
    3614:	55 e4       	ldi	r21, 0x45	; 69
    3616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	8f 83       	std	Y+7, r24	; 0x07
    3620:	98 87       	std	Y+8, r25	; 0x08
    3622:	a9 87       	std	Y+9, r26	; 0x09
    3624:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3626:	6f 81       	ldd	r22, Y+7	; 0x07
    3628:	78 85       	ldd	r23, Y+8	; 0x08
    362a:	89 85       	ldd	r24, Y+9	; 0x09
    362c:	9a 85       	ldd	r25, Y+10	; 0x0a
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e8       	ldi	r20, 0x80	; 128
    3634:	5f e3       	ldi	r21, 0x3F	; 63
    3636:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    363a:	88 23       	and	r24, r24
    363c:	2c f4       	brge	.+10     	; 0x3648 <H_KEYPAD_u8_getPressedKey+0xd4>
		__ticks = 1;
    363e:	81 e0       	ldi	r24, 0x01	; 1
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	9e 83       	std	Y+6, r25	; 0x06
    3644:	8d 83       	std	Y+5, r24	; 0x05
    3646:	3f c0       	rjmp	.+126    	; 0x36c6 <H_KEYPAD_u8_getPressedKey+0x152>
	else if (__tmp > 65535)
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	3f ef       	ldi	r19, 0xFF	; 255
    3654:	4f e7       	ldi	r20, 0x7F	; 127
    3656:	57 e4       	ldi	r21, 0x47	; 71
    3658:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    365c:	18 16       	cp	r1, r24
    365e:	4c f5       	brge	.+82     	; 0x36b2 <H_KEYPAD_u8_getPressedKey+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3660:	6b 85       	ldd	r22, Y+11	; 0x0b
    3662:	7c 85       	ldd	r23, Y+12	; 0x0c
    3664:	8d 85       	ldd	r24, Y+13	; 0x0d
    3666:	9e 85       	ldd	r25, Y+14	; 0x0e
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e2       	ldi	r20, 0x20	; 32
    366e:	51 e4       	ldi	r21, 0x41	; 65
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	bc 01       	movw	r22, r24
    367a:	cd 01       	movw	r24, r26
    367c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	9e 83       	std	Y+6, r25	; 0x06
    3686:	8d 83       	std	Y+5, r24	; 0x05
    3688:	0f c0       	rjmp	.+30     	; 0x36a8 <H_KEYPAD_u8_getPressedKey+0x134>
    368a:	80 e9       	ldi	r24, 0x90	; 144
    368c:	91 e0       	ldi	r25, 0x01	; 1
    368e:	9c 83       	std	Y+4, r25	; 0x04
    3690:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	9c 81       	ldd	r25, Y+4	; 0x04
    3696:	01 97       	sbiw	r24, 0x01	; 1
    3698:	f1 f7       	brne	.-4      	; 0x3696 <H_KEYPAD_u8_getPressedKey+0x122>
    369a:	9c 83       	std	Y+4, r25	; 0x04
    369c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    369e:	8d 81       	ldd	r24, Y+5	; 0x05
    36a0:	9e 81       	ldd	r25, Y+6	; 0x06
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	9e 83       	std	Y+6, r25	; 0x06
    36a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36a8:	8d 81       	ldd	r24, Y+5	; 0x05
    36aa:	9e 81       	ldd	r25, Y+6	; 0x06
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	69 f7       	brne	.-38     	; 0x368a <H_KEYPAD_u8_getPressedKey+0x116>
    36b0:	14 c0       	rjmp	.+40     	; 0x36da <H_KEYPAD_u8_getPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b2:	6f 81       	ldd	r22, Y+7	; 0x07
    36b4:	78 85       	ldd	r23, Y+8	; 0x08
    36b6:	89 85       	ldd	r24, Y+9	; 0x09
    36b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	9e 83       	std	Y+6, r25	; 0x06
    36c4:	8d 83       	std	Y+5, r24	; 0x05
    36c6:	8d 81       	ldd	r24, Y+5	; 0x05
    36c8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ca:	9a 83       	std	Y+2, r25	; 0x02
    36cc:	89 83       	std	Y+1, r24	; 0x01
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
    36d0:	9a 81       	ldd	r25, Y+2	; 0x02
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	f1 f7       	brne	.-4      	; 0x36d2 <H_KEYPAD_u8_getPressedKey+0x15e>
    36d6:	9a 83       	std	Y+2, r25	; 0x02
    36d8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				signal = M_DIO_enu_getPinValue(cols[c]);
    36da:	2f 85       	ldd	r18, Y+15	; 0x0f
    36dc:	38 89       	ldd	r19, Y+16	; 0x10
    36de:	ce 01       	movw	r24, r28
    36e0:	4a 96       	adiw	r24, 0x1a	; 26
    36e2:	fc 01       	movw	r30, r24
    36e4:	e2 0f       	add	r30, r18
    36e6:	f3 1f       	adc	r31, r19
    36e8:	80 81       	ld	r24, Z
    36ea:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    36ee:	8c 8b       	std	Y+20, r24	; 0x14
				if(!signal){
    36f0:	8c 89       	ldd	r24, Y+20	; 0x14
    36f2:	88 23       	and	r24, r24
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <H_KEYPAD_u8_getPressedKey+0x184>
    36f6:	45 c0       	rjmp	.+138    	; 0x3782 <H_KEYPAD_u8_getPressedKey+0x20e>
    36f8:	40 c0       	rjmp	.+128    	; 0x377a <H_KEYPAD_u8_getPressedKey+0x206>
					while(!signal){
						signal = M_DIO_enu_getPinValue(cols[c]);
    36fa:	2f 85       	ldd	r18, Y+15	; 0x0f
    36fc:	38 89       	ldd	r19, Y+16	; 0x10
    36fe:	ce 01       	movw	r24, r28
    3700:	4a 96       	adiw	r24, 0x1a	; 26
    3702:	fc 01       	movw	r30, r24
    3704:	e2 0f       	add	r30, r18
    3706:	f3 1f       	adc	r31, r19
    3708:	80 81       	ld	r24, Z
    370a:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    370e:	8c 8b       	std	Y+20, r24	; 0x14
						#if (KP_MODE == calculator_mode )
							u8 localU8KeyValues[NO_OF_ROWS][NO_ON_COLS] = calculator_keys;
    3710:	ce 01       	movw	r24, r28
    3712:	4e 96       	adiw	r24, 0x1e	; 30
    3714:	9f a7       	std	Y+47, r25	; 0x2f
    3716:	8e a7       	std	Y+46, r24	; 0x2e
    3718:	e9 e7       	ldi	r30, 0x79	; 121
    371a:	f1 e0       	ldi	r31, 0x01	; 1
    371c:	f9 ab       	std	Y+49, r31	; 0x31
    371e:	e8 ab       	std	Y+48, r30	; 0x30
    3720:	f0 e1       	ldi	r31, 0x10	; 16
    3722:	fa ab       	std	Y+50, r31	; 0x32
    3724:	e8 a9       	ldd	r30, Y+48	; 0x30
    3726:	f9 a9       	ldd	r31, Y+49	; 0x31
    3728:	00 80       	ld	r0, Z
    372a:	88 a9       	ldd	r24, Y+48	; 0x30
    372c:	99 a9       	ldd	r25, Y+49	; 0x31
    372e:	01 96       	adiw	r24, 0x01	; 1
    3730:	99 ab       	std	Y+49, r25	; 0x31
    3732:	88 ab       	std	Y+48, r24	; 0x30
    3734:	ee a5       	ldd	r30, Y+46	; 0x2e
    3736:	ff a5       	ldd	r31, Y+47	; 0x2f
    3738:	00 82       	st	Z, r0
    373a:	8e a5       	ldd	r24, Y+46	; 0x2e
    373c:	9f a5       	ldd	r25, Y+47	; 0x2f
    373e:	01 96       	adiw	r24, 0x01	; 1
    3740:	9f a7       	std	Y+47, r25	; 0x2f
    3742:	8e a7       	std	Y+46, r24	; 0x2e
    3744:	9a a9       	ldd	r25, Y+50	; 0x32
    3746:	91 50       	subi	r25, 0x01	; 1
    3748:	9a ab       	std	Y+50, r25	; 0x32
    374a:	ea a9       	ldd	r30, Y+50	; 0x32
    374c:	ee 23       	and	r30, r30
    374e:	51 f7       	brne	.-44     	; 0x3724 <H_KEYPAD_u8_getPressedKey+0x1b0>
						#elif (KP_MODE == phone_mode)
							u8 localU8KeyValues[NO_OF_ROWS][NO_ON_COLS] = phone_keys;
						#else
							#error "wrong KP_mode"
						#endif
						copy_u8Keyvalue = localU8KeyValues[r][c];
    3750:	89 89       	ldd	r24, Y+17	; 0x11
    3752:	9a 89       	ldd	r25, Y+18	; 0x12
    3754:	4f 85       	ldd	r20, Y+15	; 0x0f
    3756:	58 89       	ldd	r21, Y+16	; 0x10
    3758:	9c 01       	movw	r18, r24
    375a:	22 0f       	add	r18, r18
    375c:	33 1f       	adc	r19, r19
    375e:	22 0f       	add	r18, r18
    3760:	33 1f       	adc	r19, r19
    3762:	ce 01       	movw	r24, r28
    3764:	01 96       	adiw	r24, 0x01	; 1
    3766:	82 0f       	add	r24, r18
    3768:	93 1f       	adc	r25, r19
    376a:	84 0f       	add	r24, r20
    376c:	95 1f       	adc	r25, r21
    376e:	fc 01       	movw	r30, r24
    3770:	7d 96       	adiw	r30, 0x1d	; 29
    3772:	80 81       	ld	r24, Z
    3774:	8d 8b       	std	Y+21, r24	; 0x15
						flag = 1;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	8b 8b       	std	Y+19, r24	; 0x13
			signal =M_DIO_enu_getPinValue(cols[c]);
			if(!signal){
				_delay_ms(10);
				signal = M_DIO_enu_getPinValue(cols[c]);
				if(!signal){
					while(!signal){
    377a:	8c 89       	ldd	r24, Y+20	; 0x14
    377c:	88 23       	and	r24, r24
    377e:	09 f4       	brne	.+2      	; 0x3782 <H_KEYPAD_u8_getPressedKey+0x20e>
    3780:	bc cf       	rjmp	.-136    	; 0x36fa <H_KEYPAD_u8_getPressedKey+0x186>
	int c=0;
	DIO_ChannelType rows[] = {KP_ROW1 , KP_ROW2 , KP_ROW3 , KP_ROW4};
	DIO_ChannelType cols[] = {KP_COL1 , KP_COL2 ,KP_COL3 , KP_COL4};
	for(r=0;r<NO_OF_ROWS;r++){
		M_DIO_void_setPinValue(rows[r],DIO_LOW);
		for(c=0;c<NO_ON_COLS;c++){
    3782:	8f 85       	ldd	r24, Y+15	; 0x0f
    3784:	98 89       	ldd	r25, Y+16	; 0x10
    3786:	01 96       	adiw	r24, 0x01	; 1
    3788:	98 8b       	std	Y+16, r25	; 0x10
    378a:	8f 87       	std	Y+15, r24	; 0x0f
    378c:	8f 85       	ldd	r24, Y+15	; 0x0f
    378e:	98 89       	ldd	r25, Y+16	; 0x10
    3790:	84 30       	cpi	r24, 0x04	; 4
    3792:	91 05       	cpc	r25, r1
    3794:	0c f4       	brge	.+2      	; 0x3798 <H_KEYPAD_u8_getPressedKey+0x224>
    3796:	20 cf       	rjmp	.-448    	; 0x35d8 <H_KEYPAD_u8_getPressedKey+0x64>
						flag = 1;
					}
				}
			}
		}
		M_DIO_void_setPinValue(rows[r],DIO_HIGH);
    3798:	29 89       	ldd	r18, Y+17	; 0x11
    379a:	3a 89       	ldd	r19, Y+18	; 0x12
    379c:	ce 01       	movw	r24, r28
    379e:	46 96       	adiw	r24, 0x16	; 22
    37a0:	fc 01       	movw	r30, r24
    37a2:	e2 0f       	add	r30, r18
    37a4:	f3 1f       	adc	r31, r19
    37a6:	80 81       	ld	r24, Z
    37a8:	61 e0       	ldi	r22, 0x01	; 1
    37aa:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	u8 flag=0;
	int r=0;
	int c=0;
	DIO_ChannelType rows[] = {KP_ROW1 , KP_ROW2 , KP_ROW3 , KP_ROW4};
	DIO_ChannelType cols[] = {KP_COL1 , KP_COL2 ,KP_COL3 , KP_COL4};
	for(r=0;r<NO_OF_ROWS;r++){
    37ae:	89 89       	ldd	r24, Y+17	; 0x11
    37b0:	9a 89       	ldd	r25, Y+18	; 0x12
    37b2:	01 96       	adiw	r24, 0x01	; 1
    37b4:	9a 8b       	std	Y+18, r25	; 0x12
    37b6:	89 8b       	std	Y+17, r24	; 0x11
    37b8:	89 89       	ldd	r24, Y+17	; 0x11
    37ba:	9a 89       	ldd	r25, Y+18	; 0x12
    37bc:	84 30       	cpi	r24, 0x04	; 4
    37be:	91 05       	cpc	r25, r1
    37c0:	0c f4       	brge	.+2      	; 0x37c4 <H_KEYPAD_u8_getPressedKey+0x250>
    37c2:	fc ce       	rjmp	.-520    	; 0x35bc <H_KEYPAD_u8_getPressedKey+0x48>
				}
			}
		}
		M_DIO_void_setPinValue(rows[r],DIO_HIGH);
	}
if(!flag){
    37c4:	8b 89       	ldd	r24, Y+19	; 0x13
    37c6:	88 23       	and	r24, r24
    37c8:	11 f4       	brne	.+4      	; 0x37ce <H_KEYPAD_u8_getPressedKey+0x25a>
	copy_u8Keyvalue = 0xff;
    37ca:	8f ef       	ldi	r24, 0xFF	; 255
    37cc:	8d 8b       	std	Y+21, r24	; 0x15
}
return copy_u8Keyvalue;
    37ce:	8d 89       	ldd	r24, Y+21	; 0x15
}
    37d0:	e2 96       	adiw	r28, 0x32	; 50
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	de bf       	out	0x3e, r29	; 62
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	cf 91       	pop	r28
    37de:	df 91       	pop	r29
    37e0:	08 95       	ret

000037e2 <H_US_enu_init>:

extern Timer0_cfg_type timer0_cfg1;
u16 TIMER1_ICR_reading;
u8 edgeCount=0;

ES_t H_US_enu_init(){
    37e2:	df 93       	push	r29
    37e4:	cf 93       	push	r28
    37e6:	0f 92       	push	r0
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState= ES_OK;
    37ec:	81 e0       	ldi	r24, 0x01	; 1
    37ee:	89 83       	std	Y+1, r24	; 0x01
	M_TIMER1_ICU_setCallBack(TIMER1_IC_int, H_US_enu__edgeProcessing,NULL);
    37f0:	29 ed       	ldi	r18, 0xD9	; 217
    37f2:	3d e1       	ldi	r19, 0x1D	; 29
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	b9 01       	movw	r22, r18
    37f8:	40 e0       	ldi	r20, 0x00	; 0
    37fa:	50 e0       	ldi	r21, 0x00	; 0
    37fc:	0e 94 0e 0a 	call	0x141c	; 0x141c <M_TIMER1_ICU_setCallBack>
	return Local_enuErrorState;
    3800:	89 81       	ldd	r24, Y+1	; 0x01
}
    3802:	0f 90       	pop	r0
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <H_US_enu_send_trig>:
 void H_US_enu_send_trig(){
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	68 97       	sbiw	r28, 0x18	; 24
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
	M_DIO_void_setPinValue(DIO_PD1,DIO_HIGH);
    381e:	89 e2       	ldi	r24, 0x29	; 41
    3820:	61 e0       	ldi	r22, 0x01	; 1
    3822:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	aa e7       	ldi	r26, 0x7A	; 122
    382c:	b4 e4       	ldi	r27, 0x44	; 68
    382e:	8d 8b       	std	Y+21, r24	; 0x15
    3830:	9e 8b       	std	Y+22, r25	; 0x16
    3832:	af 8b       	std	Y+23, r26	; 0x17
    3834:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3836:	6d 89       	ldd	r22, Y+21	; 0x15
    3838:	7e 89       	ldd	r23, Y+22	; 0x16
    383a:	8f 89       	ldd	r24, Y+23	; 0x17
    383c:	98 8d       	ldd	r25, Y+24	; 0x18
    383e:	2b ea       	ldi	r18, 0xAB	; 171
    3840:	3a ea       	ldi	r19, 0xAA	; 170
    3842:	4a ea       	ldi	r20, 0xAA	; 170
    3844:	50 e4       	ldi	r21, 0x40	; 64
    3846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	89 8b       	std	Y+17, r24	; 0x11
    3850:	9a 8b       	std	Y+18, r25	; 0x12
    3852:	ab 8b       	std	Y+19, r26	; 0x13
    3854:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3856:	69 89       	ldd	r22, Y+17	; 0x11
    3858:	7a 89       	ldd	r23, Y+18	; 0x12
    385a:	8b 89       	ldd	r24, Y+19	; 0x13
    385c:	9c 89       	ldd	r25, Y+20	; 0x14
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	40 e8       	ldi	r20, 0x80	; 128
    3864:	5f e3       	ldi	r21, 0x3F	; 63
    3866:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    386a:	88 23       	and	r24, r24
    386c:	1c f4       	brge	.+6      	; 0x3874 <H_US_enu_send_trig+0x6a>
		__ticks = 1;
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	88 8b       	std	Y+16, r24	; 0x10
    3872:	91 c0       	rjmp	.+290    	; 0x3996 <H_US_enu_send_trig+0x18c>
	else if (__tmp > 255)
    3874:	69 89       	ldd	r22, Y+17	; 0x11
    3876:	7a 89       	ldd	r23, Y+18	; 0x12
    3878:	8b 89       	ldd	r24, Y+19	; 0x13
    387a:	9c 89       	ldd	r25, Y+20	; 0x14
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	4f e7       	ldi	r20, 0x7F	; 127
    3882:	53 e4       	ldi	r21, 0x43	; 67
    3884:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3888:	18 16       	cp	r1, r24
    388a:	0c f0       	brlt	.+2      	; 0x388e <H_US_enu_send_trig+0x84>
    388c:	7b c0       	rjmp	.+246    	; 0x3984 <H_US_enu_send_trig+0x17a>
	{
		_delay_ms(__us / 1000.0);
    388e:	6d 89       	ldd	r22, Y+21	; 0x15
    3890:	7e 89       	ldd	r23, Y+22	; 0x16
    3892:	8f 89       	ldd	r24, Y+23	; 0x17
    3894:	98 8d       	ldd	r25, Y+24	; 0x18
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	4a e7       	ldi	r20, 0x7A	; 122
    389c:	54 e4       	ldi	r21, 0x44	; 68
    389e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	8c 87       	std	Y+12, r24	; 0x0c
    38a8:	9d 87       	std	Y+13, r25	; 0x0d
    38aa:	ae 87       	std	Y+14, r26	; 0x0e
    38ac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    38b0:	7d 85       	ldd	r23, Y+13	; 0x0d
    38b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    38b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	4a e7       	ldi	r20, 0x7A	; 122
    38bc:	55 e4       	ldi	r21, 0x45	; 69
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	88 87       	std	Y+8, r24	; 0x08
    38c8:	99 87       	std	Y+9, r25	; 0x09
    38ca:	aa 87       	std	Y+10, r26	; 0x0a
    38cc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    38ce:	68 85       	ldd	r22, Y+8	; 0x08
    38d0:	79 85       	ldd	r23, Y+9	; 0x09
    38d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    38d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	40 e8       	ldi	r20, 0x80	; 128
    38dc:	5f e3       	ldi	r21, 0x3F	; 63
    38de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38e2:	88 23       	and	r24, r24
    38e4:	2c f4       	brge	.+10     	; 0x38f0 <H_US_enu_send_trig+0xe6>
		__ticks = 1;
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	9f 83       	std	Y+7, r25	; 0x07
    38ec:	8e 83       	std	Y+6, r24	; 0x06
    38ee:	3f c0       	rjmp	.+126    	; 0x396e <H_US_enu_send_trig+0x164>
	else if (__tmp > 65535)
    38f0:	68 85       	ldd	r22, Y+8	; 0x08
    38f2:	79 85       	ldd	r23, Y+9	; 0x09
    38f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    38f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	3f ef       	ldi	r19, 0xFF	; 255
    38fc:	4f e7       	ldi	r20, 0x7F	; 127
    38fe:	57 e4       	ldi	r21, 0x47	; 71
    3900:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3904:	18 16       	cp	r1, r24
    3906:	4c f5       	brge	.+82     	; 0x395a <H_US_enu_send_trig+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3908:	6c 85       	ldd	r22, Y+12	; 0x0c
    390a:	7d 85       	ldd	r23, Y+13	; 0x0d
    390c:	8e 85       	ldd	r24, Y+14	; 0x0e
    390e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	40 e2       	ldi	r20, 0x20	; 32
    3916:	51 e4       	ldi	r21, 0x41	; 65
    3918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	bc 01       	movw	r22, r24
    3922:	cd 01       	movw	r24, r26
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	9f 83       	std	Y+7, r25	; 0x07
    392e:	8e 83       	std	Y+6, r24	; 0x06
    3930:	0f c0       	rjmp	.+30     	; 0x3950 <H_US_enu_send_trig+0x146>
    3932:	80 e9       	ldi	r24, 0x90	; 144
    3934:	91 e0       	ldi	r25, 0x01	; 1
    3936:	9d 83       	std	Y+5, r25	; 0x05
    3938:	8c 83       	std	Y+4, r24	; 0x04
    393a:	8c 81       	ldd	r24, Y+4	; 0x04
    393c:	9d 81       	ldd	r25, Y+5	; 0x05
    393e:	01 97       	sbiw	r24, 0x01	; 1
    3940:	f1 f7       	brne	.-4      	; 0x393e <H_US_enu_send_trig+0x134>
    3942:	9d 83       	std	Y+5, r25	; 0x05
    3944:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3946:	8e 81       	ldd	r24, Y+6	; 0x06
    3948:	9f 81       	ldd	r25, Y+7	; 0x07
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	9f 83       	std	Y+7, r25	; 0x07
    394e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3950:	8e 81       	ldd	r24, Y+6	; 0x06
    3952:	9f 81       	ldd	r25, Y+7	; 0x07
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	69 f7       	brne	.-38     	; 0x3932 <H_US_enu_send_trig+0x128>
    3958:	24 c0       	rjmp	.+72     	; 0x39a2 <H_US_enu_send_trig+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395a:	68 85       	ldd	r22, Y+8	; 0x08
    395c:	79 85       	ldd	r23, Y+9	; 0x09
    395e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3960:	9b 85       	ldd	r25, Y+11	; 0x0b
    3962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	9f 83       	std	Y+7, r25	; 0x07
    396c:	8e 83       	std	Y+6, r24	; 0x06
    396e:	8e 81       	ldd	r24, Y+6	; 0x06
    3970:	9f 81       	ldd	r25, Y+7	; 0x07
    3972:	9b 83       	std	Y+3, r25	; 0x03
    3974:	8a 83       	std	Y+2, r24	; 0x02
    3976:	8a 81       	ldd	r24, Y+2	; 0x02
    3978:	9b 81       	ldd	r25, Y+3	; 0x03
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	f1 f7       	brne	.-4      	; 0x397a <H_US_enu_send_trig+0x170>
    397e:	9b 83       	std	Y+3, r25	; 0x03
    3980:	8a 83       	std	Y+2, r24	; 0x02
    3982:	0f c0       	rjmp	.+30     	; 0x39a2 <H_US_enu_send_trig+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3984:	69 89       	ldd	r22, Y+17	; 0x11
    3986:	7a 89       	ldd	r23, Y+18	; 0x12
    3988:	8b 89       	ldd	r24, Y+19	; 0x13
    398a:	9c 89       	ldd	r25, Y+20	; 0x14
    398c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	88 8b       	std	Y+16, r24	; 0x10
    3996:	88 89       	ldd	r24, Y+16	; 0x10
    3998:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	8a 95       	dec	r24
    399e:	f1 f7       	brne	.-4      	; 0x399c <H_US_enu_send_trig+0x192>
    39a0:	89 83       	std	Y+1, r24	; 0x01
	//M_TIMER_enum_Timer0_setDelayTimeMilliSec(timer0_cfg1, 1);
	_delay_us(1000);
	M_DIO_void_setPinValue(DIO_PD1, DIO_LOW);
    39a2:	89 e2       	ldi	r24, 0x29	; 41
    39a4:	60 e0       	ldi	r22, 0x00	; 0
    39a6:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
}
    39aa:	68 96       	adiw	r28, 0x18	; 24
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <H_US_enu_calculate_distance>:
ES_t H_US_enu_calculate_distance(f32 * copy_distance_ptr){
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	6b 97       	sbiw	r28, 0x1b	; 27
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	9b 8f       	std	Y+27, r25	; 0x1b
    39d2:	8a 8f       	std	Y+26, r24	; 0x1a
	ES_t Local_enuErrorState = ES_OK;
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	89 8f       	std	Y+25, r24	; 0x19
	H_US_enu_send_trig();
    39d8:	0e 94 05 1c 	call	0x380a	; 0x380a <H_US_enu_send_trig>
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	a0 ea       	ldi	r26, 0xA0	; 160
    39e2:	b0 e4       	ldi	r27, 0x40	; 64
    39e4:	8d 8b       	std	Y+21, r24	; 0x15
    39e6:	9e 8b       	std	Y+22, r25	; 0x16
    39e8:	af 8b       	std	Y+23, r26	; 0x17
    39ea:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39ec:	6d 89       	ldd	r22, Y+21	; 0x15
    39ee:	7e 89       	ldd	r23, Y+22	; 0x16
    39f0:	8f 89       	ldd	r24, Y+23	; 0x17
    39f2:	98 8d       	ldd	r25, Y+24	; 0x18
    39f4:	2b ea       	ldi	r18, 0xAB	; 171
    39f6:	3a ea       	ldi	r19, 0xAA	; 170
    39f8:	4a ea       	ldi	r20, 0xAA	; 170
    39fa:	50 e4       	ldi	r21, 0x40	; 64
    39fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	89 8b       	std	Y+17, r24	; 0x11
    3a06:	9a 8b       	std	Y+18, r25	; 0x12
    3a08:	ab 8b       	std	Y+19, r26	; 0x13
    3a0a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3a0c:	69 89       	ldd	r22, Y+17	; 0x11
    3a0e:	7a 89       	ldd	r23, Y+18	; 0x12
    3a10:	8b 89       	ldd	r24, Y+19	; 0x13
    3a12:	9c 89       	ldd	r25, Y+20	; 0x14
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	40 e8       	ldi	r20, 0x80	; 128
    3a1a:	5f e3       	ldi	r21, 0x3F	; 63
    3a1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a20:	88 23       	and	r24, r24
    3a22:	1c f4       	brge	.+6      	; 0x3a2a <H_US_enu_calculate_distance+0x6e>
		__ticks = 1;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	88 8b       	std	Y+16, r24	; 0x10
    3a28:	91 c0       	rjmp	.+290    	; 0x3b4c <H_US_enu_calculate_distance+0x190>
	else if (__tmp > 255)
    3a2a:	69 89       	ldd	r22, Y+17	; 0x11
    3a2c:	7a 89       	ldd	r23, Y+18	; 0x12
    3a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a30:	9c 89       	ldd	r25, Y+20	; 0x14
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4f e7       	ldi	r20, 0x7F	; 127
    3a38:	53 e4       	ldi	r21, 0x43	; 67
    3a3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a3e:	18 16       	cp	r1, r24
    3a40:	0c f0       	brlt	.+2      	; 0x3a44 <H_US_enu_calculate_distance+0x88>
    3a42:	7b c0       	rjmp	.+246    	; 0x3b3a <H_US_enu_calculate_distance+0x17e>
	{
		_delay_ms(__us / 1000.0);
    3a44:	6d 89       	ldd	r22, Y+21	; 0x15
    3a46:	7e 89       	ldd	r23, Y+22	; 0x16
    3a48:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	4a e7       	ldi	r20, 0x7A	; 122
    3a52:	54 e4       	ldi	r21, 0x44	; 68
    3a54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	8c 87       	std	Y+12, r24	; 0x0c
    3a5e:	9d 87       	std	Y+13, r25	; 0x0d
    3a60:	ae 87       	std	Y+14, r26	; 0x0e
    3a62:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a64:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a66:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a68:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	4a e7       	ldi	r20, 0x7A	; 122
    3a72:	55 e4       	ldi	r21, 0x45	; 69
    3a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a78:	dc 01       	movw	r26, r24
    3a7a:	cb 01       	movw	r24, r22
    3a7c:	88 87       	std	Y+8, r24	; 0x08
    3a7e:	99 87       	std	Y+9, r25	; 0x09
    3a80:	aa 87       	std	Y+10, r26	; 0x0a
    3a82:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a84:	68 85       	ldd	r22, Y+8	; 0x08
    3a86:	79 85       	ldd	r23, Y+9	; 0x09
    3a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e8       	ldi	r20, 0x80	; 128
    3a92:	5f e3       	ldi	r21, 0x3F	; 63
    3a94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a98:	88 23       	and	r24, r24
    3a9a:	2c f4       	brge	.+10     	; 0x3aa6 <H_US_enu_calculate_distance+0xea>
		__ticks = 1;
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	9f 83       	std	Y+7, r25	; 0x07
    3aa2:	8e 83       	std	Y+6, r24	; 0x06
    3aa4:	3f c0       	rjmp	.+126    	; 0x3b24 <H_US_enu_calculate_distance+0x168>
	else if (__tmp > 65535)
    3aa6:	68 85       	ldd	r22, Y+8	; 0x08
    3aa8:	79 85       	ldd	r23, Y+9	; 0x09
    3aaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    3aac:	9b 85       	ldd	r25, Y+11	; 0x0b
    3aae:	20 e0       	ldi	r18, 0x00	; 0
    3ab0:	3f ef       	ldi	r19, 0xFF	; 255
    3ab2:	4f e7       	ldi	r20, 0x7F	; 127
    3ab4:	57 e4       	ldi	r21, 0x47	; 71
    3ab6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3aba:	18 16       	cp	r1, r24
    3abc:	4c f5       	brge	.+82     	; 0x3b10 <H_US_enu_calculate_distance+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3abe:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ac0:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ac2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ac4:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ac6:	20 e0       	ldi	r18, 0x00	; 0
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	40 e2       	ldi	r20, 0x20	; 32
    3acc:	51 e4       	ldi	r21, 0x41	; 65
    3ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad2:	dc 01       	movw	r26, r24
    3ad4:	cb 01       	movw	r24, r22
    3ad6:	bc 01       	movw	r22, r24
    3ad8:	cd 01       	movw	r24, r26
    3ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	9f 83       	std	Y+7, r25	; 0x07
    3ae4:	8e 83       	std	Y+6, r24	; 0x06
    3ae6:	0f c0       	rjmp	.+30     	; 0x3b06 <H_US_enu_calculate_distance+0x14a>
    3ae8:	80 e9       	ldi	r24, 0x90	; 144
    3aea:	91 e0       	ldi	r25, 0x01	; 1
    3aec:	9d 83       	std	Y+5, r25	; 0x05
    3aee:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3af0:	8c 81       	ldd	r24, Y+4	; 0x04
    3af2:	9d 81       	ldd	r25, Y+5	; 0x05
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	f1 f7       	brne	.-4      	; 0x3af4 <H_US_enu_calculate_distance+0x138>
    3af8:	9d 83       	std	Y+5, r25	; 0x05
    3afa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3afc:	8e 81       	ldd	r24, Y+6	; 0x06
    3afe:	9f 81       	ldd	r25, Y+7	; 0x07
    3b00:	01 97       	sbiw	r24, 0x01	; 1
    3b02:	9f 83       	std	Y+7, r25	; 0x07
    3b04:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b06:	8e 81       	ldd	r24, Y+6	; 0x06
    3b08:	9f 81       	ldd	r25, Y+7	; 0x07
    3b0a:	00 97       	sbiw	r24, 0x00	; 0
    3b0c:	69 f7       	brne	.-38     	; 0x3ae8 <H_US_enu_calculate_distance+0x12c>
    3b0e:	24 c0       	rjmp	.+72     	; 0x3b58 <H_US_enu_calculate_distance+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b10:	68 85       	ldd	r22, Y+8	; 0x08
    3b12:	79 85       	ldd	r23, Y+9	; 0x09
    3b14:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b16:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	9f 83       	std	Y+7, r25	; 0x07
    3b22:	8e 83       	std	Y+6, r24	; 0x06
    3b24:	8e 81       	ldd	r24, Y+6	; 0x06
    3b26:	9f 81       	ldd	r25, Y+7	; 0x07
    3b28:	9b 83       	std	Y+3, r25	; 0x03
    3b2a:	8a 83       	std	Y+2, r24	; 0x02
    3b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b30:	01 97       	sbiw	r24, 0x01	; 1
    3b32:	f1 f7       	brne	.-4      	; 0x3b30 <H_US_enu_calculate_distance+0x174>
    3b34:	9b 83       	std	Y+3, r25	; 0x03
    3b36:	8a 83       	std	Y+2, r24	; 0x02
    3b38:	0f c0       	rjmp	.+30     	; 0x3b58 <H_US_enu_calculate_distance+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b3a:	69 89       	ldd	r22, Y+17	; 0x11
    3b3c:	7a 89       	ldd	r23, Y+18	; 0x12
    3b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b40:	9c 89       	ldd	r25, Y+20	; 0x14
    3b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	88 8b       	std	Y+16, r24	; 0x10
    3b4c:	88 89       	ldd	r24, Y+16	; 0x10
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	8a 95       	dec	r24
    3b54:	f1 f7       	brne	.-4      	; 0x3b52 <H_US_enu_calculate_distance+0x196>
    3b56:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(5);
	*copy_distance_ptr = 0010625 *TIMER1_ICR_reading;
    3b58:	20 91 71 02 	lds	r18, 0x0271
    3b5c:	30 91 72 02 	lds	r19, 0x0272
    3b60:	85 e9       	ldi	r24, 0x95	; 149
    3b62:	91 e1       	ldi	r25, 0x11	; 17
    3b64:	ac 01       	movw	r20, r24
    3b66:	24 9f       	mul	r18, r20
    3b68:	c0 01       	movw	r24, r0
    3b6a:	25 9f       	mul	r18, r21
    3b6c:	90 0d       	add	r25, r0
    3b6e:	34 9f       	mul	r19, r20
    3b70:	90 0d       	add	r25, r0
    3b72:	11 24       	eor	r1, r1
    3b74:	cc 01       	movw	r24, r24
    3b76:	a0 e0       	ldi	r26, 0x00	; 0
    3b78:	b0 e0       	ldi	r27, 0x00	; 0
    3b7a:	bc 01       	movw	r22, r24
    3b7c:	cd 01       	movw	r24, r26
    3b7e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3b88:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3b8a:	80 83       	st	Z, r24
    3b8c:	91 83       	std	Z+1, r25	; 0x01
    3b8e:	a2 83       	std	Z+2, r26	; 0x02
    3b90:	b3 83       	std	Z+3, r27	; 0x03
	H_LCD_void_sendIntNum(TIMER1_ICR_reading);
    3b92:	80 91 71 02 	lds	r24, 0x0271
    3b96:	90 91 72 02 	lds	r25, 0x0272
    3b9a:	0e 94 44 28 	call	0x5088	; 0x5088 <H_LCD_void_sendIntNum>
	return Local_enuErrorState;
    3b9e:	89 8d       	ldd	r24, Y+25	; 0x19
}
    3ba0:	6b 96       	adiw	r28, 0x1b	; 27
    3ba2:	0f b6       	in	r0, 0x3f	; 63
    3ba4:	f8 94       	cli
    3ba6:	de bf       	out	0x3e, r29	; 62
    3ba8:	0f be       	out	0x3f, r0	; 63
    3baa:	cd bf       	out	0x3d, r28	; 61
    3bac:	cf 91       	pop	r28
    3bae:	df 91       	pop	r29
    3bb0:	08 95       	ret

00003bb2 <H_US_enu__edgeProcessing>:

ES_t H_US_enu__edgeProcessing(){
    3bb2:	df 93       	push	r29
    3bb4:	cf 93       	push	r28
    3bb6:	0f 92       	push	r0
    3bb8:	cd b7       	in	r28, 0x3d	; 61
    3bba:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
    3bbc:	81 e0       	ldi	r24, 0x01	; 1
    3bbe:	89 83       	std	Y+1, r24	; 0x01
	edgeCount++;
    3bc0:	80 91 48 02 	lds	r24, 0x0248
    3bc4:	8f 5f       	subi	r24, 0xFF	; 255
    3bc6:	80 93 48 02 	sts	0x0248, r24

	if (edgeCount == 1)
    3bca:	80 91 48 02 	lds	r24, 0x0248
    3bce:	81 30       	cpi	r24, 0x01	; 1
    3bd0:	31 f4       	brne	.+12     	; 0x3bde <H_US_enu__edgeProcessing+0x2c>
	{
		/* Clear the timer counter register to start measurements from the first detected rising edge */
		M_TIMER1_ICU_clearTimer();
    3bd2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <M_TIMER1_ICU_clearTimer>

		/* Detect falling edge at the Echo pin */
		M_TIMER1_enu_ICU_void_setTrigg(falling_edge);
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	0e 94 ad 09 	call	0x135a	; 0x135a <M_TIMER1_enu_ICU_void_setTrigg>
    3bdc:	12 c0       	rjmp	.+36     	; 0x3c02 <H_US_enu__edgeProcessing+0x50>
	}
	else if(edgeCount == 2)
    3bde:	80 91 48 02 	lds	r24, 0x0248
    3be2:	82 30       	cpi	r24, 0x02	; 2
    3be4:	61 f4       	brne	.+24     	; 0x3bfe <H_US_enu__edgeProcessing+0x4c>
	{
		/* Store the high time (pulse time) generated by the ultrasonic sensor */
		M_TIMER1_enu_ICU_takeReading(&TIMER1_ICR_reading);
    3be6:	81 e7       	ldi	r24, 0x71	; 113
    3be8:	92 e0       	ldi	r25, 0x02	; 2
    3bea:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_TIMER1_enu_ICU_takeReading>

		/* Detect rising edge at the Echo pin */
		M_TIMER1_enu_ICU_void_setTrigg(rising_edge);
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	0e 94 ad 09 	call	0x135a	; 0x135a <M_TIMER1_enu_ICU_void_setTrigg>

		/* Clear the timer counter register to start measurements again */
		M_TIMER1_ICU_clearTimer();
    3bf4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <M_TIMER1_ICU_clearTimer>

		edgeCount = 0;
    3bf8:	10 92 48 02 	sts	0x0248, r1
    3bfc:	02 c0       	rjmp	.+4      	; 0x3c02 <H_US_enu__edgeProcessing+0x50>
	}
	else{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    3bfe:	82 e0       	ldi	r24, 0x02	; 2
    3c00:	89 83       	std	Y+1, r24	; 0x01
	}
return Local_enuErrorState;
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c04:	0f 90       	pop	r0
    3c06:	cf 91       	pop	r28
    3c08:	df 91       	pop	r29
    3c0a:	08 95       	ret

00003c0c <H_SSD_VOID_displayNumber>:
#include "SSD_priv.h"
#include "SSD_types.h"
#include "SSD_int.h"
#include "SSD_cfg.h"

void H_SSD_VOID_displayNumber(u16 copy_Number){
    3c0c:	0f 93       	push	r16
    3c0e:	1f 93       	push	r17
    3c10:	df 93       	push	r29
    3c12:	cf 93       	push	r28
    3c14:	cd b7       	in	r28, 0x3d	; 61
    3c16:	de b7       	in	r29, 0x3e	; 62
    3c18:	c1 54       	subi	r28, 0x41	; 65
    3c1a:	d0 40       	sbci	r29, 0x00	; 0
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	de bf       	out	0x3e, r29	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	fe 01       	movw	r30, r28
    3c28:	e0 5c       	subi	r30, 0xC0	; 192
    3c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2c:	91 83       	std	Z+1, r25	; 0x01
    3c2e:	80 83       	st	Z, r24
	u8 arr[4]={0};
    3c30:	1c ae       	std	Y+60, r1	; 0x3c
    3c32:	1d ae       	std	Y+61, r1	; 0x3d
    3c34:	1e ae       	std	Y+62, r1	; 0x3e
    3c36:	1f ae       	std	Y+63, r1	; 0x3f
	u8 i =0;
    3c38:	1b ae       	std	Y+59, r1	; 0x3b
    3c3a:	28 c0       	rjmp	.+80     	; 0x3c8c <H_SSD_VOID_displayNumber+0x80>
	/*separate digits*/
	while(copy_Number>0 && i<4){
		arr[i]= copy_Number%10;
    3c3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c3e:	08 2f       	mov	r16, r24
    3c40:	10 e0       	ldi	r17, 0x00	; 0
    3c42:	fe 01       	movw	r30, r28
    3c44:	e0 5c       	subi	r30, 0xC0	; 192
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	2a e0       	ldi	r18, 0x0A	; 10
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	b9 01       	movw	r22, r18
    3c52:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__udivmodhi4>
    3c56:	28 2f       	mov	r18, r24
    3c58:	ce 01       	movw	r24, r28
    3c5a:	cc 96       	adiw	r24, 0x3c	; 60
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	e0 0f       	add	r30, r16
    3c60:	f1 1f       	adc	r31, r17
    3c62:	20 83       	st	Z, r18
		copy_Number/=10;
    3c64:	8e 01       	movw	r16, r28
    3c66:	00 5c       	subi	r16, 0xC0	; 192
    3c68:	1f 4f       	sbci	r17, 0xFF	; 255
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	e0 5c       	subi	r30, 0xC0	; 192
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 81       	ld	r24, Z
    3c72:	91 81       	ldd	r25, Z+1	; 0x01
    3c74:	2a e0       	ldi	r18, 0x0A	; 10
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	b9 01       	movw	r22, r18
    3c7a:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__udivmodhi4>
    3c7e:	cb 01       	movw	r24, r22
    3c80:	f8 01       	movw	r30, r16
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
		i++;
    3c86:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c88:	8f 5f       	subi	r24, 0xFF	; 255
    3c8a:	8b af       	std	Y+59, r24	; 0x3b

void H_SSD_VOID_displayNumber(u16 copy_Number){
	u8 arr[4]={0};
	u8 i =0;
	/*separate digits*/
	while(copy_Number>0 && i<4){
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e0 5c       	subi	r30, 0xC0	; 192
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	80 81       	ld	r24, Z
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <H_SSD_VOID_displayNumber+0x90>
    3c9a:	00 c3       	rjmp	.+1536   	; 0x429c <H_SSD_VOID_displayNumber+0x690>
    3c9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c9e:	84 30       	cpi	r24, 0x04	; 4
    3ca0:	68 f2       	brcs	.-102    	; 0x3c3c <H_SSD_VOID_displayNumber+0x30>
    3ca2:	fc c2       	rjmp	.+1528   	; 0x429c <H_SSD_VOID_displayNumber+0x690>
		i++;
	}


	for(int j;j<SSD_DISPLAY_TIME;j++){
	i=0;
    3ca4:	1b ae       	std	Y+59, r1	; 0x3b
	//prepare units to be sent to BCD (4 bits)
	M_DIO_void_setPinValue(SSD_A_PIN, (arr[i]>>0)&	1 );
    3ca6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ca8:	28 2f       	mov	r18, r24
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	ce 01       	movw	r24, r28
    3cae:	cc 96       	adiw	r24, 0x3c	; 60
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	e2 0f       	add	r30, r18
    3cb4:	f3 1f       	adc	r31, r19
    3cb6:	80 81       	ld	r24, Z
    3cb8:	98 2f       	mov	r25, r24
    3cba:	91 70       	andi	r25, 0x01	; 1
    3cbc:	84 e1       	ldi	r24, 0x14	; 20
    3cbe:	69 2f       	mov	r22, r25
    3cc0:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_B_PIN, (arr[i]>>1)&	1 );
    3cc4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3cc6:	28 2f       	mov	r18, r24
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	ce 01       	movw	r24, r28
    3ccc:	cc 96       	adiw	r24, 0x3c	; 60
    3cce:	fc 01       	movw	r30, r24
    3cd0:	e2 0f       	add	r30, r18
    3cd2:	f3 1f       	adc	r31, r19
    3cd4:	80 81       	ld	r24, Z
    3cd6:	86 95       	lsr	r24
    3cd8:	98 2f       	mov	r25, r24
    3cda:	91 70       	andi	r25, 0x01	; 1
    3cdc:	85 e1       	ldi	r24, 0x15	; 21
    3cde:	69 2f       	mov	r22, r25
    3ce0:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_C_PIN, (arr[i]>>2)&	1 );
    3ce4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ce6:	28 2f       	mov	r18, r24
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	ce 01       	movw	r24, r28
    3cec:	cc 96       	adiw	r24, 0x3c	; 60
    3cee:	fc 01       	movw	r30, r24
    3cf0:	e2 0f       	add	r30, r18
    3cf2:	f3 1f       	adc	r31, r19
    3cf4:	80 81       	ld	r24, Z
    3cf6:	86 95       	lsr	r24
    3cf8:	86 95       	lsr	r24
    3cfa:	98 2f       	mov	r25, r24
    3cfc:	91 70       	andi	r25, 0x01	; 1
    3cfe:	86 e1       	ldi	r24, 0x16	; 22
    3d00:	69 2f       	mov	r22, r25
    3d02:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_D_PIN, (arr[i]>>3)&	1 );
    3d06:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d08:	28 2f       	mov	r18, r24
    3d0a:	30 e0       	ldi	r19, 0x00	; 0
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	cc 96       	adiw	r24, 0x3c	; 60
    3d10:	fc 01       	movw	r30, r24
    3d12:	e2 0f       	add	r30, r18
    3d14:	f3 1f       	adc	r31, r19
    3d16:	80 81       	ld	r24, Z
    3d18:	86 95       	lsr	r24
    3d1a:	86 95       	lsr	r24
    3d1c:	86 95       	lsr	r24
    3d1e:	98 2f       	mov	r25, r24
    3d20:	91 70       	andi	r25, 0x01	; 1
    3d22:	88 e1       	ldi	r24, 0x18	; 24
    3d24:	69 2f       	mov	r22, r25
    3d26:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>

	//Enable digit 1 (remember it is pnp and active low)
	M_DIO_void_setPinValue(SSD_DIG1_EN_PIN, DIO_LOW);
    3d2a:	8d e0       	ldi	r24, 0x0D	; 13
    3d2c:	60 e0       	ldi	r22, 0x00	; 0
    3d2e:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	a0 e8       	ldi	r26, 0x80	; 128
    3d38:	bf e3       	ldi	r27, 0x3F	; 63
    3d3a:	8d ab       	std	Y+53, r24	; 0x35
    3d3c:	9e ab       	std	Y+54, r25	; 0x36
    3d3e:	af ab       	std	Y+55, r26	; 0x37
    3d40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d42:	6d a9       	ldd	r22, Y+53	; 0x35
    3d44:	7e a9       	ldd	r23, Y+54	; 0x36
    3d46:	8f a9       	ldd	r24, Y+55	; 0x37
    3d48:	98 ad       	ldd	r25, Y+56	; 0x38
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	4a e7       	ldi	r20, 0x7A	; 122
    3d50:	55 e4       	ldi	r21, 0x45	; 69
    3d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	89 ab       	std	Y+49, r24	; 0x31
    3d5c:	9a ab       	std	Y+50, r25	; 0x32
    3d5e:	ab ab       	std	Y+51, r26	; 0x33
    3d60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d62:	69 a9       	ldd	r22, Y+49	; 0x31
    3d64:	7a a9       	ldd	r23, Y+50	; 0x32
    3d66:	8b a9       	ldd	r24, Y+51	; 0x33
    3d68:	9c a9       	ldd	r25, Y+52	; 0x34
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	40 e8       	ldi	r20, 0x80	; 128
    3d70:	5f e3       	ldi	r21, 0x3F	; 63
    3d72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d76:	88 23       	and	r24, r24
    3d78:	2c f4       	brge	.+10     	; 0x3d84 <H_SSD_VOID_displayNumber+0x178>
		__ticks = 1;
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	98 ab       	std	Y+48, r25	; 0x30
    3d80:	8f a7       	std	Y+47, r24	; 0x2f
    3d82:	3f c0       	rjmp	.+126    	; 0x3e02 <H_SSD_VOID_displayNumber+0x1f6>
	else if (__tmp > 65535)
    3d84:	69 a9       	ldd	r22, Y+49	; 0x31
    3d86:	7a a9       	ldd	r23, Y+50	; 0x32
    3d88:	8b a9       	ldd	r24, Y+51	; 0x33
    3d8a:	9c a9       	ldd	r25, Y+52	; 0x34
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	3f ef       	ldi	r19, 0xFF	; 255
    3d90:	4f e7       	ldi	r20, 0x7F	; 127
    3d92:	57 e4       	ldi	r21, 0x47	; 71
    3d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d98:	18 16       	cp	r1, r24
    3d9a:	4c f5       	brge	.+82     	; 0x3dee <H_SSD_VOID_displayNumber+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9c:	6d a9       	ldd	r22, Y+53	; 0x35
    3d9e:	7e a9       	ldd	r23, Y+54	; 0x36
    3da0:	8f a9       	ldd	r24, Y+55	; 0x37
    3da2:	98 ad       	ldd	r25, Y+56	; 0x38
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	40 e2       	ldi	r20, 0x20	; 32
    3daa:	51 e4       	ldi	r21, 0x41	; 65
    3dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	bc 01       	movw	r22, r24
    3db6:	cd 01       	movw	r24, r26
    3db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	98 ab       	std	Y+48, r25	; 0x30
    3dc2:	8f a7       	std	Y+47, r24	; 0x2f
    3dc4:	0f c0       	rjmp	.+30     	; 0x3de4 <H_SSD_VOID_displayNumber+0x1d8>
    3dc6:	80 e9       	ldi	r24, 0x90	; 144
    3dc8:	91 e0       	ldi	r25, 0x01	; 1
    3dca:	9e a7       	std	Y+46, r25	; 0x2e
    3dcc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dce:	8d a5       	ldd	r24, Y+45	; 0x2d
    3dd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	f1 f7       	brne	.-4      	; 0x3dd2 <H_SSD_VOID_displayNumber+0x1c6>
    3dd6:	9e a7       	std	Y+46, r25	; 0x2e
    3dd8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dda:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ddc:	98 a9       	ldd	r25, Y+48	; 0x30
    3dde:	01 97       	sbiw	r24, 0x01	; 1
    3de0:	98 ab       	std	Y+48, r25	; 0x30
    3de2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3de6:	98 a9       	ldd	r25, Y+48	; 0x30
    3de8:	00 97       	sbiw	r24, 0x00	; 0
    3dea:	69 f7       	brne	.-38     	; 0x3dc6 <H_SSD_VOID_displayNumber+0x1ba>
    3dec:	14 c0       	rjmp	.+40     	; 0x3e16 <H_SSD_VOID_displayNumber+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dee:	69 a9       	ldd	r22, Y+49	; 0x31
    3df0:	7a a9       	ldd	r23, Y+50	; 0x32
    3df2:	8b a9       	ldd	r24, Y+51	; 0x33
    3df4:	9c a9       	ldd	r25, Y+52	; 0x34
    3df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	cb 01       	movw	r24, r22
    3dfe:	98 ab       	std	Y+48, r25	; 0x30
    3e00:	8f a7       	std	Y+47, r24	; 0x2f
    3e02:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e04:	98 a9       	ldd	r25, Y+48	; 0x30
    3e06:	9c a7       	std	Y+44, r25	; 0x2c
    3e08:	8b a7       	std	Y+43, r24	; 0x2b
    3e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e0e:	01 97       	sbiw	r24, 0x01	; 1
    3e10:	f1 f7       	brne	.-4      	; 0x3e0e <H_SSD_VOID_displayNumber+0x202>
    3e12:	9c a7       	std	Y+44, r25	; 0x2c
    3e14:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_void_setPinValue(SSD_DIG1_EN_PIN, DIO_HIGH);
    3e16:	8d e0       	ldi	r24, 0x0D	; 13
    3e18:	61 e0       	ldi	r22, 0x01	; 1
    3e1a:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>

	//tens
	i=1;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	8b af       	std	Y+59, r24	; 0x3b
	M_DIO_void_setPinValue(SSD_A_PIN, (arr[i]>>0)&	1 );
    3e22:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e24:	28 2f       	mov	r18, r24
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	ce 01       	movw	r24, r28
    3e2a:	cc 96       	adiw	r24, 0x3c	; 60
    3e2c:	fc 01       	movw	r30, r24
    3e2e:	e2 0f       	add	r30, r18
    3e30:	f3 1f       	adc	r31, r19
    3e32:	80 81       	ld	r24, Z
    3e34:	98 2f       	mov	r25, r24
    3e36:	91 70       	andi	r25, 0x01	; 1
    3e38:	84 e1       	ldi	r24, 0x14	; 20
    3e3a:	69 2f       	mov	r22, r25
    3e3c:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_B_PIN, (arr[i]>>1)&	1 );
    3e40:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e42:	28 2f       	mov	r18, r24
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	ce 01       	movw	r24, r28
    3e48:	cc 96       	adiw	r24, 0x3c	; 60
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	e2 0f       	add	r30, r18
    3e4e:	f3 1f       	adc	r31, r19
    3e50:	80 81       	ld	r24, Z
    3e52:	86 95       	lsr	r24
    3e54:	98 2f       	mov	r25, r24
    3e56:	91 70       	andi	r25, 0x01	; 1
    3e58:	85 e1       	ldi	r24, 0x15	; 21
    3e5a:	69 2f       	mov	r22, r25
    3e5c:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_C_PIN, (arr[i]>>2)&	1 );
    3e60:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e62:	28 2f       	mov	r18, r24
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	ce 01       	movw	r24, r28
    3e68:	cc 96       	adiw	r24, 0x3c	; 60
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	e2 0f       	add	r30, r18
    3e6e:	f3 1f       	adc	r31, r19
    3e70:	80 81       	ld	r24, Z
    3e72:	86 95       	lsr	r24
    3e74:	86 95       	lsr	r24
    3e76:	98 2f       	mov	r25, r24
    3e78:	91 70       	andi	r25, 0x01	; 1
    3e7a:	86 e1       	ldi	r24, 0x16	; 22
    3e7c:	69 2f       	mov	r22, r25
    3e7e:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_D_PIN, (arr[i]>>3)&	1 );
    3e82:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e84:	28 2f       	mov	r18, r24
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	ce 01       	movw	r24, r28
    3e8a:	cc 96       	adiw	r24, 0x3c	; 60
    3e8c:	fc 01       	movw	r30, r24
    3e8e:	e2 0f       	add	r30, r18
    3e90:	f3 1f       	adc	r31, r19
    3e92:	80 81       	ld	r24, Z
    3e94:	86 95       	lsr	r24
    3e96:	86 95       	lsr	r24
    3e98:	86 95       	lsr	r24
    3e9a:	98 2f       	mov	r25, r24
    3e9c:	91 70       	andi	r25, 0x01	; 1
    3e9e:	88 e1       	ldi	r24, 0x18	; 24
    3ea0:	69 2f       	mov	r22, r25
    3ea2:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	//Enable digit 1 (remember it is pnp and active low)
	M_DIO_void_setPinValue(SSD_DIG2_EN_PIN, DIO_LOW);
    3ea6:	8c e0       	ldi	r24, 0x0C	; 12
    3ea8:	60 e0       	ldi	r22, 0x00	; 0
    3eaa:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	a0 e8       	ldi	r26, 0x80	; 128
    3eb4:	bf e3       	ldi	r27, 0x3F	; 63
    3eb6:	8f a3       	std	Y+39, r24	; 0x27
    3eb8:	98 a7       	std	Y+40, r25	; 0x28
    3eba:	a9 a7       	std	Y+41, r26	; 0x29
    3ebc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ebe:	6f a1       	ldd	r22, Y+39	; 0x27
    3ec0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ec2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ec4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	4a e7       	ldi	r20, 0x7A	; 122
    3ecc:	55 e4       	ldi	r21, 0x45	; 69
    3ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed2:	dc 01       	movw	r26, r24
    3ed4:	cb 01       	movw	r24, r22
    3ed6:	8b a3       	std	Y+35, r24	; 0x23
    3ed8:	9c a3       	std	Y+36, r25	; 0x24
    3eda:	ad a3       	std	Y+37, r26	; 0x25
    3edc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ede:	6b a1       	ldd	r22, Y+35	; 0x23
    3ee0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ee2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ee4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	30 e0       	ldi	r19, 0x00	; 0
    3eea:	40 e8       	ldi	r20, 0x80	; 128
    3eec:	5f e3       	ldi	r21, 0x3F	; 63
    3eee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ef2:	88 23       	and	r24, r24
    3ef4:	2c f4       	brge	.+10     	; 0x3f00 <H_SSD_VOID_displayNumber+0x2f4>
		__ticks = 1;
    3ef6:	81 e0       	ldi	r24, 0x01	; 1
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	9a a3       	std	Y+34, r25	; 0x22
    3efc:	89 a3       	std	Y+33, r24	; 0x21
    3efe:	3f c0       	rjmp	.+126    	; 0x3f7e <H_SSD_VOID_displayNumber+0x372>
	else if (__tmp > 65535)
    3f00:	6b a1       	ldd	r22, Y+35	; 0x23
    3f02:	7c a1       	ldd	r23, Y+36	; 0x24
    3f04:	8d a1       	ldd	r24, Y+37	; 0x25
    3f06:	9e a1       	ldd	r25, Y+38	; 0x26
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	3f ef       	ldi	r19, 0xFF	; 255
    3f0c:	4f e7       	ldi	r20, 0x7F	; 127
    3f0e:	57 e4       	ldi	r21, 0x47	; 71
    3f10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f14:	18 16       	cp	r1, r24
    3f16:	4c f5       	brge	.+82     	; 0x3f6a <H_SSD_VOID_displayNumber+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f18:	6f a1       	ldd	r22, Y+39	; 0x27
    3f1a:	78 a5       	ldd	r23, Y+40	; 0x28
    3f1c:	89 a5       	ldd	r24, Y+41	; 0x29
    3f1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	40 e2       	ldi	r20, 0x20	; 32
    3f26:	51 e4       	ldi	r21, 0x41	; 65
    3f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	bc 01       	movw	r22, r24
    3f32:	cd 01       	movw	r24, r26
    3f34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	9a a3       	std	Y+34, r25	; 0x22
    3f3e:	89 a3       	std	Y+33, r24	; 0x21
    3f40:	0f c0       	rjmp	.+30     	; 0x3f60 <H_SSD_VOID_displayNumber+0x354>
    3f42:	80 e9       	ldi	r24, 0x90	; 144
    3f44:	91 e0       	ldi	r25, 0x01	; 1
    3f46:	98 a3       	std	Y+32, r25	; 0x20
    3f48:	8f 8f       	std	Y+31, r24	; 0x1f
    3f4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f4c:	98 a1       	ldd	r25, Y+32	; 0x20
    3f4e:	01 97       	sbiw	r24, 0x01	; 1
    3f50:	f1 f7       	brne	.-4      	; 0x3f4e <H_SSD_VOID_displayNumber+0x342>
    3f52:	98 a3       	std	Y+32, r25	; 0x20
    3f54:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f56:	89 a1       	ldd	r24, Y+33	; 0x21
    3f58:	9a a1       	ldd	r25, Y+34	; 0x22
    3f5a:	01 97       	sbiw	r24, 0x01	; 1
    3f5c:	9a a3       	std	Y+34, r25	; 0x22
    3f5e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f60:	89 a1       	ldd	r24, Y+33	; 0x21
    3f62:	9a a1       	ldd	r25, Y+34	; 0x22
    3f64:	00 97       	sbiw	r24, 0x00	; 0
    3f66:	69 f7       	brne	.-38     	; 0x3f42 <H_SSD_VOID_displayNumber+0x336>
    3f68:	14 c0       	rjmp	.+40     	; 0x3f92 <H_SSD_VOID_displayNumber+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f6a:	6b a1       	ldd	r22, Y+35	; 0x23
    3f6c:	7c a1       	ldd	r23, Y+36	; 0x24
    3f6e:	8d a1       	ldd	r24, Y+37	; 0x25
    3f70:	9e a1       	ldd	r25, Y+38	; 0x26
    3f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f76:	dc 01       	movw	r26, r24
    3f78:	cb 01       	movw	r24, r22
    3f7a:	9a a3       	std	Y+34, r25	; 0x22
    3f7c:	89 a3       	std	Y+33, r24	; 0x21
    3f7e:	89 a1       	ldd	r24, Y+33	; 0x21
    3f80:	9a a1       	ldd	r25, Y+34	; 0x22
    3f82:	9e 8f       	std	Y+30, r25	; 0x1e
    3f84:	8d 8f       	std	Y+29, r24	; 0x1d
    3f86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f88:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f8a:	01 97       	sbiw	r24, 0x01	; 1
    3f8c:	f1 f7       	brne	.-4      	; 0x3f8a <H_SSD_VOID_displayNumber+0x37e>
    3f8e:	9e 8f       	std	Y+30, r25	; 0x1e
    3f90:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_DIO_void_setPinValue(SSD_DIG2_EN_PIN, DIO_HIGH);
    3f92:	8c e0       	ldi	r24, 0x0C	; 12
    3f94:	61 e0       	ldi	r22, 0x01	; 1
    3f96:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>

	//hundreds
	i=2;
    3f9a:	82 e0       	ldi	r24, 0x02	; 2
    3f9c:	8b af       	std	Y+59, r24	; 0x3b
	M_DIO_void_setPinValue(SSD_A_PIN, (arr[i]>>0)&	1 );
    3f9e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fa0:	28 2f       	mov	r18, r24
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	cc 96       	adiw	r24, 0x3c	; 60
    3fa8:	fc 01       	movw	r30, r24
    3faa:	e2 0f       	add	r30, r18
    3fac:	f3 1f       	adc	r31, r19
    3fae:	80 81       	ld	r24, Z
    3fb0:	98 2f       	mov	r25, r24
    3fb2:	91 70       	andi	r25, 0x01	; 1
    3fb4:	84 e1       	ldi	r24, 0x14	; 20
    3fb6:	69 2f       	mov	r22, r25
    3fb8:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_B_PIN, (arr[i]>>1)&	1 );
    3fbc:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fbe:	28 2f       	mov	r18, r24
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	ce 01       	movw	r24, r28
    3fc4:	cc 96       	adiw	r24, 0x3c	; 60
    3fc6:	fc 01       	movw	r30, r24
    3fc8:	e2 0f       	add	r30, r18
    3fca:	f3 1f       	adc	r31, r19
    3fcc:	80 81       	ld	r24, Z
    3fce:	86 95       	lsr	r24
    3fd0:	98 2f       	mov	r25, r24
    3fd2:	91 70       	andi	r25, 0x01	; 1
    3fd4:	85 e1       	ldi	r24, 0x15	; 21
    3fd6:	69 2f       	mov	r22, r25
    3fd8:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_C_PIN, (arr[i]>>2)&	1 );
    3fdc:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fde:	28 2f       	mov	r18, r24
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	ce 01       	movw	r24, r28
    3fe4:	cc 96       	adiw	r24, 0x3c	; 60
    3fe6:	fc 01       	movw	r30, r24
    3fe8:	e2 0f       	add	r30, r18
    3fea:	f3 1f       	adc	r31, r19
    3fec:	80 81       	ld	r24, Z
    3fee:	86 95       	lsr	r24
    3ff0:	86 95       	lsr	r24
    3ff2:	98 2f       	mov	r25, r24
    3ff4:	91 70       	andi	r25, 0x01	; 1
    3ff6:	86 e1       	ldi	r24, 0x16	; 22
    3ff8:	69 2f       	mov	r22, r25
    3ffa:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_D_PIN, (arr[i]>>3)&	1 );
    3ffe:	8b ad       	ldd	r24, Y+59	; 0x3b
    4000:	28 2f       	mov	r18, r24
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	ce 01       	movw	r24, r28
    4006:	cc 96       	adiw	r24, 0x3c	; 60
    4008:	fc 01       	movw	r30, r24
    400a:	e2 0f       	add	r30, r18
    400c:	f3 1f       	adc	r31, r19
    400e:	80 81       	ld	r24, Z
    4010:	86 95       	lsr	r24
    4012:	86 95       	lsr	r24
    4014:	86 95       	lsr	r24
    4016:	98 2f       	mov	r25, r24
    4018:	91 70       	andi	r25, 0x01	; 1
    401a:	88 e1       	ldi	r24, 0x18	; 24
    401c:	69 2f       	mov	r22, r25
    401e:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	//Enable digit 1 (remember it is pnp and active low)
	M_DIO_void_setPinValue(SSD_DIG3_EN_PIN, DIO_LOW);
    4022:	89 e1       	ldi	r24, 0x19	; 25
    4024:	60 e0       	ldi	r22, 0x00	; 0
    4026:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	a0 e8       	ldi	r26, 0x80	; 128
    4030:	bf e3       	ldi	r27, 0x3F	; 63
    4032:	89 8f       	std	Y+25, r24	; 0x19
    4034:	9a 8f       	std	Y+26, r25	; 0x1a
    4036:	ab 8f       	std	Y+27, r26	; 0x1b
    4038:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403a:	69 8d       	ldd	r22, Y+25	; 0x19
    403c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    403e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	4a e7       	ldi	r20, 0x7A	; 122
    4048:	55 e4       	ldi	r21, 0x45	; 69
    404a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	8d 8b       	std	Y+21, r24	; 0x15
    4054:	9e 8b       	std	Y+22, r25	; 0x16
    4056:	af 8b       	std	Y+23, r26	; 0x17
    4058:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    405a:	6d 89       	ldd	r22, Y+21	; 0x15
    405c:	7e 89       	ldd	r23, Y+22	; 0x16
    405e:	8f 89       	ldd	r24, Y+23	; 0x17
    4060:	98 8d       	ldd	r25, Y+24	; 0x18
    4062:	20 e0       	ldi	r18, 0x00	; 0
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	40 e8       	ldi	r20, 0x80	; 128
    4068:	5f e3       	ldi	r21, 0x3F	; 63
    406a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    406e:	88 23       	and	r24, r24
    4070:	2c f4       	brge	.+10     	; 0x407c <H_SSD_VOID_displayNumber+0x470>
		__ticks = 1;
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	9c 8b       	std	Y+20, r25	; 0x14
    4078:	8b 8b       	std	Y+19, r24	; 0x13
    407a:	3f c0       	rjmp	.+126    	; 0x40fa <H_SSD_VOID_displayNumber+0x4ee>
	else if (__tmp > 65535)
    407c:	6d 89       	ldd	r22, Y+21	; 0x15
    407e:	7e 89       	ldd	r23, Y+22	; 0x16
    4080:	8f 89       	ldd	r24, Y+23	; 0x17
    4082:	98 8d       	ldd	r25, Y+24	; 0x18
    4084:	20 e0       	ldi	r18, 0x00	; 0
    4086:	3f ef       	ldi	r19, 0xFF	; 255
    4088:	4f e7       	ldi	r20, 0x7F	; 127
    408a:	57 e4       	ldi	r21, 0x47	; 71
    408c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4090:	18 16       	cp	r1, r24
    4092:	4c f5       	brge	.+82     	; 0x40e6 <H_SSD_VOID_displayNumber+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4094:	69 8d       	ldd	r22, Y+25	; 0x19
    4096:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4098:	8b 8d       	ldd	r24, Y+27	; 0x1b
    409a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e2       	ldi	r20, 0x20	; 32
    40a2:	51 e4       	ldi	r21, 0x41	; 65
    40a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	bc 01       	movw	r22, r24
    40ae:	cd 01       	movw	r24, r26
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	9c 8b       	std	Y+20, r25	; 0x14
    40ba:	8b 8b       	std	Y+19, r24	; 0x13
    40bc:	0f c0       	rjmp	.+30     	; 0x40dc <H_SSD_VOID_displayNumber+0x4d0>
    40be:	80 e9       	ldi	r24, 0x90	; 144
    40c0:	91 e0       	ldi	r25, 0x01	; 1
    40c2:	9a 8b       	std	Y+18, r25	; 0x12
    40c4:	89 8b       	std	Y+17, r24	; 0x11
    40c6:	89 89       	ldd	r24, Y+17	; 0x11
    40c8:	9a 89       	ldd	r25, Y+18	; 0x12
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	f1 f7       	brne	.-4      	; 0x40ca <H_SSD_VOID_displayNumber+0x4be>
    40ce:	9a 8b       	std	Y+18, r25	; 0x12
    40d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d2:	8b 89       	ldd	r24, Y+19	; 0x13
    40d4:	9c 89       	ldd	r25, Y+20	; 0x14
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	9c 8b       	std	Y+20, r25	; 0x14
    40da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40dc:	8b 89       	ldd	r24, Y+19	; 0x13
    40de:	9c 89       	ldd	r25, Y+20	; 0x14
    40e0:	00 97       	sbiw	r24, 0x00	; 0
    40e2:	69 f7       	brne	.-38     	; 0x40be <H_SSD_VOID_displayNumber+0x4b2>
    40e4:	14 c0       	rjmp	.+40     	; 0x410e <H_SSD_VOID_displayNumber+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e6:	6d 89       	ldd	r22, Y+21	; 0x15
    40e8:	7e 89       	ldd	r23, Y+22	; 0x16
    40ea:	8f 89       	ldd	r24, Y+23	; 0x17
    40ec:	98 8d       	ldd	r25, Y+24	; 0x18
    40ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	9c 8b       	std	Y+20, r25	; 0x14
    40f8:	8b 8b       	std	Y+19, r24	; 0x13
    40fa:	8b 89       	ldd	r24, Y+19	; 0x13
    40fc:	9c 89       	ldd	r25, Y+20	; 0x14
    40fe:	98 8b       	std	Y+16, r25	; 0x10
    4100:	8f 87       	std	Y+15, r24	; 0x0f
    4102:	8f 85       	ldd	r24, Y+15	; 0x0f
    4104:	98 89       	ldd	r25, Y+16	; 0x10
    4106:	01 97       	sbiw	r24, 0x01	; 1
    4108:	f1 f7       	brne	.-4      	; 0x4106 <H_SSD_VOID_displayNumber+0x4fa>
    410a:	98 8b       	std	Y+16, r25	; 0x10
    410c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_void_setPinValue(SSD_DIG3_EN_PIN, DIO_HIGH);
    410e:	89 e1       	ldi	r24, 0x19	; 25
    4110:	61 e0       	ldi	r22, 0x01	; 1
    4112:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>

	//thousands
	i=3;
    4116:	83 e0       	ldi	r24, 0x03	; 3
    4118:	8b af       	std	Y+59, r24	; 0x3b
	M_DIO_void_setPinValue(SSD_A_PIN, (arr[i]>>0)&	1 );
    411a:	8b ad       	ldd	r24, Y+59	; 0x3b
    411c:	28 2f       	mov	r18, r24
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	ce 01       	movw	r24, r28
    4122:	cc 96       	adiw	r24, 0x3c	; 60
    4124:	fc 01       	movw	r30, r24
    4126:	e2 0f       	add	r30, r18
    4128:	f3 1f       	adc	r31, r19
    412a:	80 81       	ld	r24, Z
    412c:	98 2f       	mov	r25, r24
    412e:	91 70       	andi	r25, 0x01	; 1
    4130:	84 e1       	ldi	r24, 0x14	; 20
    4132:	69 2f       	mov	r22, r25
    4134:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_B_PIN, (arr[i]>>1)&	1 );
    4138:	8b ad       	ldd	r24, Y+59	; 0x3b
    413a:	28 2f       	mov	r18, r24
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	ce 01       	movw	r24, r28
    4140:	cc 96       	adiw	r24, 0x3c	; 60
    4142:	fc 01       	movw	r30, r24
    4144:	e2 0f       	add	r30, r18
    4146:	f3 1f       	adc	r31, r19
    4148:	80 81       	ld	r24, Z
    414a:	86 95       	lsr	r24
    414c:	98 2f       	mov	r25, r24
    414e:	91 70       	andi	r25, 0x01	; 1
    4150:	85 e1       	ldi	r24, 0x15	; 21
    4152:	69 2f       	mov	r22, r25
    4154:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_C_PIN, (arr[i]>>2)&	1 );
    4158:	8b ad       	ldd	r24, Y+59	; 0x3b
    415a:	28 2f       	mov	r18, r24
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	ce 01       	movw	r24, r28
    4160:	cc 96       	adiw	r24, 0x3c	; 60
    4162:	fc 01       	movw	r30, r24
    4164:	e2 0f       	add	r30, r18
    4166:	f3 1f       	adc	r31, r19
    4168:	80 81       	ld	r24, Z
    416a:	86 95       	lsr	r24
    416c:	86 95       	lsr	r24
    416e:	98 2f       	mov	r25, r24
    4170:	91 70       	andi	r25, 0x01	; 1
    4172:	86 e1       	ldi	r24, 0x16	; 22
    4174:	69 2f       	mov	r22, r25
    4176:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(SSD_D_PIN, (arr[i]>>3)&	1 );
    417a:	8b ad       	ldd	r24, Y+59	; 0x3b
    417c:	28 2f       	mov	r18, r24
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	ce 01       	movw	r24, r28
    4182:	cc 96       	adiw	r24, 0x3c	; 60
    4184:	fc 01       	movw	r30, r24
    4186:	e2 0f       	add	r30, r18
    4188:	f3 1f       	adc	r31, r19
    418a:	80 81       	ld	r24, Z
    418c:	86 95       	lsr	r24
    418e:	86 95       	lsr	r24
    4190:	86 95       	lsr	r24
    4192:	98 2f       	mov	r25, r24
    4194:	91 70       	andi	r25, 0x01	; 1
    4196:	88 e1       	ldi	r24, 0x18	; 24
    4198:	69 2f       	mov	r22, r25
    419a:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	//Enable digit 1 (remember it is pnp and active low)
	M_DIO_void_setPinValue(SSD_DIG4_EN_PIN, DIO_LOW);
    419e:	8a e1       	ldi	r24, 0x1A	; 26
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	a0 e8       	ldi	r26, 0x80	; 128
    41ac:	bf e3       	ldi	r27, 0x3F	; 63
    41ae:	8b 87       	std	Y+11, r24	; 0x0b
    41b0:	9c 87       	std	Y+12, r25	; 0x0c
    41b2:	ad 87       	std	Y+13, r26	; 0x0d
    41b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    41bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	4a e7       	ldi	r20, 0x7A	; 122
    41c4:	55 e4       	ldi	r21, 0x45	; 69
    41c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	8f 83       	std	Y+7, r24	; 0x07
    41d0:	98 87       	std	Y+8, r25	; 0x08
    41d2:	a9 87       	std	Y+9, r26	; 0x09
    41d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41d6:	6f 81       	ldd	r22, Y+7	; 0x07
    41d8:	78 85       	ldd	r23, Y+8	; 0x08
    41da:	89 85       	ldd	r24, Y+9	; 0x09
    41dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41de:	20 e0       	ldi	r18, 0x00	; 0
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	40 e8       	ldi	r20, 0x80	; 128
    41e4:	5f e3       	ldi	r21, 0x3F	; 63
    41e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41ea:	88 23       	and	r24, r24
    41ec:	2c f4       	brge	.+10     	; 0x41f8 <H_SSD_VOID_displayNumber+0x5ec>
		__ticks = 1;
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	9e 83       	std	Y+6, r25	; 0x06
    41f4:	8d 83       	std	Y+5, r24	; 0x05
    41f6:	3f c0       	rjmp	.+126    	; 0x4276 <H_SSD_VOID_displayNumber+0x66a>
	else if (__tmp > 65535)
    41f8:	6f 81       	ldd	r22, Y+7	; 0x07
    41fa:	78 85       	ldd	r23, Y+8	; 0x08
    41fc:	89 85       	ldd	r24, Y+9	; 0x09
    41fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	3f ef       	ldi	r19, 0xFF	; 255
    4204:	4f e7       	ldi	r20, 0x7F	; 127
    4206:	57 e4       	ldi	r21, 0x47	; 71
    4208:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    420c:	18 16       	cp	r1, r24
    420e:	4c f5       	brge	.+82     	; 0x4262 <H_SSD_VOID_displayNumber+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4210:	6b 85       	ldd	r22, Y+11	; 0x0b
    4212:	7c 85       	ldd	r23, Y+12	; 0x0c
    4214:	8d 85       	ldd	r24, Y+13	; 0x0d
    4216:	9e 85       	ldd	r25, Y+14	; 0x0e
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	40 e2       	ldi	r20, 0x20	; 32
    421e:	51 e4       	ldi	r21, 0x41	; 65
    4220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	bc 01       	movw	r22, r24
    422a:	cd 01       	movw	r24, r26
    422c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	9e 83       	std	Y+6, r25	; 0x06
    4236:	8d 83       	std	Y+5, r24	; 0x05
    4238:	0f c0       	rjmp	.+30     	; 0x4258 <H_SSD_VOID_displayNumber+0x64c>
    423a:	80 e9       	ldi	r24, 0x90	; 144
    423c:	91 e0       	ldi	r25, 0x01	; 1
    423e:	9c 83       	std	Y+4, r25	; 0x04
    4240:	8b 83       	std	Y+3, r24	; 0x03
    4242:	8b 81       	ldd	r24, Y+3	; 0x03
    4244:	9c 81       	ldd	r25, Y+4	; 0x04
    4246:	01 97       	sbiw	r24, 0x01	; 1
    4248:	f1 f7       	brne	.-4      	; 0x4246 <H_SSD_VOID_displayNumber+0x63a>
    424a:	9c 83       	std	Y+4, r25	; 0x04
    424c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    424e:	8d 81       	ldd	r24, Y+5	; 0x05
    4250:	9e 81       	ldd	r25, Y+6	; 0x06
    4252:	01 97       	sbiw	r24, 0x01	; 1
    4254:	9e 83       	std	Y+6, r25	; 0x06
    4256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4258:	8d 81       	ldd	r24, Y+5	; 0x05
    425a:	9e 81       	ldd	r25, Y+6	; 0x06
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	69 f7       	brne	.-38     	; 0x423a <H_SSD_VOID_displayNumber+0x62e>
    4260:	14 c0       	rjmp	.+40     	; 0x428a <H_SSD_VOID_displayNumber+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4262:	6f 81       	ldd	r22, Y+7	; 0x07
    4264:	78 85       	ldd	r23, Y+8	; 0x08
    4266:	89 85       	ldd	r24, Y+9	; 0x09
    4268:	9a 85       	ldd	r25, Y+10	; 0x0a
    426a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	9e 83       	std	Y+6, r25	; 0x06
    4274:	8d 83       	std	Y+5, r24	; 0x05
    4276:	8d 81       	ldd	r24, Y+5	; 0x05
    4278:	9e 81       	ldd	r25, Y+6	; 0x06
    427a:	9a 83       	std	Y+2, r25	; 0x02
    427c:	89 83       	std	Y+1, r24	; 0x01
    427e:	89 81       	ldd	r24, Y+1	; 0x01
    4280:	9a 81       	ldd	r25, Y+2	; 0x02
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	f1 f7       	brne	.-4      	; 0x4282 <H_SSD_VOID_displayNumber+0x676>
    4286:	9a 83       	std	Y+2, r25	; 0x02
    4288:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	M_DIO_void_setPinValue(SSD_DIG4_EN_PIN, DIO_HIGH);
    428a:	8a e1       	ldi	r24, 0x1A	; 26
    428c:	61 e0       	ldi	r22, 0x01	; 1
    428e:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
		copy_Number/=10;
		i++;
	}


	for(int j;j<SSD_DISPLAY_TIME;j++){
    4292:	89 ad       	ldd	r24, Y+57	; 0x39
    4294:	9a ad       	ldd	r25, Y+58	; 0x3a
    4296:	01 96       	adiw	r24, 0x01	; 1
    4298:	9a af       	std	Y+58, r25	; 0x3a
    429a:	89 af       	std	Y+57, r24	; 0x39
    429c:	89 ad       	ldd	r24, Y+57	; 0x39
    429e:	9a ad       	ldd	r25, Y+58	; 0x3a
    42a0:	f3 e0       	ldi	r31, 0x03	; 3
    42a2:	88 3e       	cpi	r24, 0xE8	; 232
    42a4:	9f 07       	cpc	r25, r31
    42a6:	0c f4       	brge	.+2      	; 0x42aa <H_SSD_VOID_displayNumber+0x69e>
    42a8:	fd cc       	rjmp	.-1542   	; 0x3ca4 <H_SSD_VOID_displayNumber+0x98>
	_delay_ms(1);
	M_DIO_void_setPinValue(SSD_DIG4_EN_PIN, DIO_HIGH);
	}


}
    42aa:	cf 5b       	subi	r28, 0xBF	; 191
    42ac:	df 4f       	sbci	r29, 0xFF	; 255
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	f8 94       	cli
    42b2:	de bf       	out	0x3e, r29	; 62
    42b4:	0f be       	out	0x3f, r0	; 63
    42b6:	cd bf       	out	0x3d, r28	; 61
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	08 95       	ret

000042c2 <H_PB_PB_state_readPb>:
  Reentrance       : Reentrant
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
PB_state_type H_PB_PB_state_readPb(PB_type copy_Button , PB_activeMode_type copy_activeMode){
    42c2:	df 93       	push	r29
    42c4:	cf 93       	push	r28
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
    42ca:	ef 97       	sbiw	r28, 0x3f	; 63
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	8c af       	std	Y+60, r24	; 0x3c
    42d8:	6d af       	std	Y+61, r22	; 0x3d
u8 last_reading=0;
    42da:	1b ae       	std	Y+59, r1	; 0x3b
u8 current_reading=0;
    42dc:	1a ae       	std	Y+58, r1	; 0x3a
PB_state_type state;
switch(copy_Button){
    42de:	8c ad       	ldd	r24, Y+60	; 0x3c
    42e0:	28 2f       	mov	r18, r24
    42e2:	30 e0       	ldi	r19, 0x00	; 0
    42e4:	3f af       	std	Y+63, r19	; 0x3f
    42e6:	2e af       	std	Y+62, r18	; 0x3e
    42e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    42ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    42ec:	82 30       	cpi	r24, 0x02	; 2
    42ee:	91 05       	cpc	r25, r1
    42f0:	09 f4       	brne	.+2      	; 0x42f4 <H_PB_PB_state_readPb+0x32>
    42f2:	93 c0       	rjmp	.+294    	; 0x441a <H_PB_PB_state_readPb+0x158>
    42f4:	2e ad       	ldd	r18, Y+62	; 0x3e
    42f6:	3f ad       	ldd	r19, Y+63	; 0x3f
    42f8:	23 30       	cpi	r18, 0x03	; 3
    42fa:	31 05       	cpc	r19, r1
    42fc:	34 f4       	brge	.+12     	; 0x430a <H_PB_PB_state_readPb+0x48>
    42fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    4300:	9f ad       	ldd	r25, Y+63	; 0x3f
    4302:	81 30       	cpi	r24, 0x01	; 1
    4304:	91 05       	cpc	r25, r1
    4306:	71 f0       	breq	.+28     	; 0x4324 <H_PB_PB_state_readPb+0x62>
    4308:	f8 c1       	rjmp	.+1008   	; 0x46fa <H_PB_PB_state_readPb+0x438>
    430a:	2e ad       	ldd	r18, Y+62	; 0x3e
    430c:	3f ad       	ldd	r19, Y+63	; 0x3f
    430e:	23 30       	cpi	r18, 0x03	; 3
    4310:	31 05       	cpc	r19, r1
    4312:	09 f4       	brne	.+2      	; 0x4316 <H_PB_PB_state_readPb+0x54>
    4314:	fd c0       	rjmp	.+506    	; 0x4510 <H_PB_PB_state_readPb+0x24e>
    4316:	8e ad       	ldd	r24, Y+62	; 0x3e
    4318:	9f ad       	ldd	r25, Y+63	; 0x3f
    431a:	84 30       	cpi	r24, 0x04	; 4
    431c:	91 05       	cpc	r25, r1
    431e:	09 f4       	brne	.+2      	; 0x4322 <H_PB_PB_state_readPb+0x60>
    4320:	72 c1       	rjmp	.+740    	; 0x4606 <H_PB_PB_state_readPb+0x344>
    4322:	eb c1       	rjmp	.+982    	; 0x46fa <H_PB_PB_state_readPb+0x438>
case Button1:
	last_reading = M_DIO_enu_getPinValue(PB1_pin);
    4324:	8f e2       	ldi	r24, 0x2F	; 47
    4326:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    432a:	8b af       	std	Y+59, r24	; 0x3b
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	a8 ec       	ldi	r26, 0xC8	; 200
    4332:	b1 e4       	ldi	r27, 0x41	; 65
    4334:	8d ab       	std	Y+53, r24	; 0x35
    4336:	9e ab       	std	Y+54, r25	; 0x36
    4338:	af ab       	std	Y+55, r26	; 0x37
    433a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    433c:	6d a9       	ldd	r22, Y+53	; 0x35
    433e:	7e a9       	ldd	r23, Y+54	; 0x36
    4340:	8f a9       	ldd	r24, Y+55	; 0x37
    4342:	98 ad       	ldd	r25, Y+56	; 0x38
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	4a e7       	ldi	r20, 0x7A	; 122
    434a:	55 e4       	ldi	r21, 0x45	; 69
    434c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	89 ab       	std	Y+49, r24	; 0x31
    4356:	9a ab       	std	Y+50, r25	; 0x32
    4358:	ab ab       	std	Y+51, r26	; 0x33
    435a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    435c:	69 a9       	ldd	r22, Y+49	; 0x31
    435e:	7a a9       	ldd	r23, Y+50	; 0x32
    4360:	8b a9       	ldd	r24, Y+51	; 0x33
    4362:	9c a9       	ldd	r25, Y+52	; 0x34
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	40 e8       	ldi	r20, 0x80	; 128
    436a:	5f e3       	ldi	r21, 0x3F	; 63
    436c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4370:	88 23       	and	r24, r24
    4372:	2c f4       	brge	.+10     	; 0x437e <H_PB_PB_state_readPb+0xbc>
		__ticks = 1;
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	98 ab       	std	Y+48, r25	; 0x30
    437a:	8f a7       	std	Y+47, r24	; 0x2f
    437c:	3f c0       	rjmp	.+126    	; 0x43fc <H_PB_PB_state_readPb+0x13a>
	else if (__tmp > 65535)
    437e:	69 a9       	ldd	r22, Y+49	; 0x31
    4380:	7a a9       	ldd	r23, Y+50	; 0x32
    4382:	8b a9       	ldd	r24, Y+51	; 0x33
    4384:	9c a9       	ldd	r25, Y+52	; 0x34
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	3f ef       	ldi	r19, 0xFF	; 255
    438a:	4f e7       	ldi	r20, 0x7F	; 127
    438c:	57 e4       	ldi	r21, 0x47	; 71
    438e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4392:	18 16       	cp	r1, r24
    4394:	4c f5       	brge	.+82     	; 0x43e8 <H_PB_PB_state_readPb+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4396:	6d a9       	ldd	r22, Y+53	; 0x35
    4398:	7e a9       	ldd	r23, Y+54	; 0x36
    439a:	8f a9       	ldd	r24, Y+55	; 0x37
    439c:	98 ad       	ldd	r25, Y+56	; 0x38
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	40 e2       	ldi	r20, 0x20	; 32
    43a4:	51 e4       	ldi	r21, 0x41	; 65
    43a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	bc 01       	movw	r22, r24
    43b0:	cd 01       	movw	r24, r26
    43b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	98 ab       	std	Y+48, r25	; 0x30
    43bc:	8f a7       	std	Y+47, r24	; 0x2f
    43be:	0f c0       	rjmp	.+30     	; 0x43de <H_PB_PB_state_readPb+0x11c>
    43c0:	80 e9       	ldi	r24, 0x90	; 144
    43c2:	91 e0       	ldi	r25, 0x01	; 1
    43c4:	9e a7       	std	Y+46, r25	; 0x2e
    43c6:	8d a7       	std	Y+45, r24	; 0x2d
    43c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    43ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <H_PB_PB_state_readPb+0x10a>
    43d0:	9e a7       	std	Y+46, r25	; 0x2e
    43d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    43d6:	98 a9       	ldd	r25, Y+48	; 0x30
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	98 ab       	std	Y+48, r25	; 0x30
    43dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43de:	8f a5       	ldd	r24, Y+47	; 0x2f
    43e0:	98 a9       	ldd	r25, Y+48	; 0x30
    43e2:	00 97       	sbiw	r24, 0x00	; 0
    43e4:	69 f7       	brne	.-38     	; 0x43c0 <H_PB_PB_state_readPb+0xfe>
    43e6:	14 c0       	rjmp	.+40     	; 0x4410 <H_PB_PB_state_readPb+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e8:	69 a9       	ldd	r22, Y+49	; 0x31
    43ea:	7a a9       	ldd	r23, Y+50	; 0x32
    43ec:	8b a9       	ldd	r24, Y+51	; 0x33
    43ee:	9c a9       	ldd	r25, Y+52	; 0x34
    43f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	98 ab       	std	Y+48, r25	; 0x30
    43fa:	8f a7       	std	Y+47, r24	; 0x2f
    43fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    43fe:	98 a9       	ldd	r25, Y+48	; 0x30
    4400:	9c a7       	std	Y+44, r25	; 0x2c
    4402:	8b a7       	std	Y+43, r24	; 0x2b
    4404:	8b a5       	ldd	r24, Y+43	; 0x2b
    4406:	9c a5       	ldd	r25, Y+44	; 0x2c
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	f1 f7       	brne	.-4      	; 0x4408 <H_PB_PB_state_readPb+0x146>
    440c:	9c a7       	std	Y+44, r25	; 0x2c
    440e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(DEBOUNCE_TIME);
	current_reading = M_DIO_enu_getPinValue(PB1_pin);
    4410:	8f e2       	ldi	r24, 0x2F	; 47
    4412:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    4416:	8a af       	std	Y+58, r24	; 0x3a
    4418:	70 c1       	rjmp	.+736    	; 0x46fa <H_PB_PB_state_readPb+0x438>
	break;
case Button2:
	last_reading = M_DIO_enu_getPinValue(PB2_pin);
    441a:	8e e2       	ldi	r24, 0x2E	; 46
    441c:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    4420:	8b af       	std	Y+59, r24	; 0x3b
    4422:	80 e0       	ldi	r24, 0x00	; 0
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	a8 ec       	ldi	r26, 0xC8	; 200
    4428:	b1 e4       	ldi	r27, 0x41	; 65
    442a:	8f a3       	std	Y+39, r24	; 0x27
    442c:	98 a7       	std	Y+40, r25	; 0x28
    442e:	a9 a7       	std	Y+41, r26	; 0x29
    4430:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4432:	6f a1       	ldd	r22, Y+39	; 0x27
    4434:	78 a5       	ldd	r23, Y+40	; 0x28
    4436:	89 a5       	ldd	r24, Y+41	; 0x29
    4438:	9a a5       	ldd	r25, Y+42	; 0x2a
    443a:	20 e0       	ldi	r18, 0x00	; 0
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	4a e7       	ldi	r20, 0x7A	; 122
    4440:	55 e4       	ldi	r21, 0x45	; 69
    4442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4446:	dc 01       	movw	r26, r24
    4448:	cb 01       	movw	r24, r22
    444a:	8b a3       	std	Y+35, r24	; 0x23
    444c:	9c a3       	std	Y+36, r25	; 0x24
    444e:	ad a3       	std	Y+37, r26	; 0x25
    4450:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4452:	6b a1       	ldd	r22, Y+35	; 0x23
    4454:	7c a1       	ldd	r23, Y+36	; 0x24
    4456:	8d a1       	ldd	r24, Y+37	; 0x25
    4458:	9e a1       	ldd	r25, Y+38	; 0x26
    445a:	20 e0       	ldi	r18, 0x00	; 0
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	40 e8       	ldi	r20, 0x80	; 128
    4460:	5f e3       	ldi	r21, 0x3F	; 63
    4462:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4466:	88 23       	and	r24, r24
    4468:	2c f4       	brge	.+10     	; 0x4474 <H_PB_PB_state_readPb+0x1b2>
		__ticks = 1;
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	9a a3       	std	Y+34, r25	; 0x22
    4470:	89 a3       	std	Y+33, r24	; 0x21
    4472:	3f c0       	rjmp	.+126    	; 0x44f2 <H_PB_PB_state_readPb+0x230>
	else if (__tmp > 65535)
    4474:	6b a1       	ldd	r22, Y+35	; 0x23
    4476:	7c a1       	ldd	r23, Y+36	; 0x24
    4478:	8d a1       	ldd	r24, Y+37	; 0x25
    447a:	9e a1       	ldd	r25, Y+38	; 0x26
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	3f ef       	ldi	r19, 0xFF	; 255
    4480:	4f e7       	ldi	r20, 0x7F	; 127
    4482:	57 e4       	ldi	r21, 0x47	; 71
    4484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4488:	18 16       	cp	r1, r24
    448a:	4c f5       	brge	.+82     	; 0x44de <H_PB_PB_state_readPb+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    448c:	6f a1       	ldd	r22, Y+39	; 0x27
    448e:	78 a5       	ldd	r23, Y+40	; 0x28
    4490:	89 a5       	ldd	r24, Y+41	; 0x29
    4492:	9a a5       	ldd	r25, Y+42	; 0x2a
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	40 e2       	ldi	r20, 0x20	; 32
    449a:	51 e4       	ldi	r21, 0x41	; 65
    449c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	bc 01       	movw	r22, r24
    44a6:	cd 01       	movw	r24, r26
    44a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ac:	dc 01       	movw	r26, r24
    44ae:	cb 01       	movw	r24, r22
    44b0:	9a a3       	std	Y+34, r25	; 0x22
    44b2:	89 a3       	std	Y+33, r24	; 0x21
    44b4:	0f c0       	rjmp	.+30     	; 0x44d4 <H_PB_PB_state_readPb+0x212>
    44b6:	80 e9       	ldi	r24, 0x90	; 144
    44b8:	91 e0       	ldi	r25, 0x01	; 1
    44ba:	98 a3       	std	Y+32, r25	; 0x20
    44bc:	8f 8f       	std	Y+31, r24	; 0x1f
    44be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44c0:	98 a1       	ldd	r25, Y+32	; 0x20
    44c2:	01 97       	sbiw	r24, 0x01	; 1
    44c4:	f1 f7       	brne	.-4      	; 0x44c2 <H_PB_PB_state_readPb+0x200>
    44c6:	98 a3       	std	Y+32, r25	; 0x20
    44c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ca:	89 a1       	ldd	r24, Y+33	; 0x21
    44cc:	9a a1       	ldd	r25, Y+34	; 0x22
    44ce:	01 97       	sbiw	r24, 0x01	; 1
    44d0:	9a a3       	std	Y+34, r25	; 0x22
    44d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d4:	89 a1       	ldd	r24, Y+33	; 0x21
    44d6:	9a a1       	ldd	r25, Y+34	; 0x22
    44d8:	00 97       	sbiw	r24, 0x00	; 0
    44da:	69 f7       	brne	.-38     	; 0x44b6 <H_PB_PB_state_readPb+0x1f4>
    44dc:	14 c0       	rjmp	.+40     	; 0x4506 <H_PB_PB_state_readPb+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44de:	6b a1       	ldd	r22, Y+35	; 0x23
    44e0:	7c a1       	ldd	r23, Y+36	; 0x24
    44e2:	8d a1       	ldd	r24, Y+37	; 0x25
    44e4:	9e a1       	ldd	r25, Y+38	; 0x26
    44e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	9a a3       	std	Y+34, r25	; 0x22
    44f0:	89 a3       	std	Y+33, r24	; 0x21
    44f2:	89 a1       	ldd	r24, Y+33	; 0x21
    44f4:	9a a1       	ldd	r25, Y+34	; 0x22
    44f6:	9e 8f       	std	Y+30, r25	; 0x1e
    44f8:	8d 8f       	std	Y+29, r24	; 0x1d
    44fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	f1 f7       	brne	.-4      	; 0x44fe <H_PB_PB_state_readPb+0x23c>
    4502:	9e 8f       	std	Y+30, r25	; 0x1e
    4504:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(DEBOUNCE_TIME);
	current_reading = M_DIO_enu_getPinValue(PB2_pin);
    4506:	8e e2       	ldi	r24, 0x2E	; 46
    4508:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    450c:	8a af       	std	Y+58, r24	; 0x3a
    450e:	f5 c0       	rjmp	.+490    	; 0x46fa <H_PB_PB_state_readPb+0x438>
		break;
case Button3:
	last_reading = M_DIO_enu_getPinValue(PB3_pin);
    4510:	8d e2       	ldi	r24, 0x2D	; 45
    4512:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    4516:	8b af       	std	Y+59, r24	; 0x3b
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	a8 ec       	ldi	r26, 0xC8	; 200
    451e:	b1 e4       	ldi	r27, 0x41	; 65
    4520:	89 8f       	std	Y+25, r24	; 0x19
    4522:	9a 8f       	std	Y+26, r25	; 0x1a
    4524:	ab 8f       	std	Y+27, r26	; 0x1b
    4526:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4528:	69 8d       	ldd	r22, Y+25	; 0x19
    452a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    452c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    452e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	4a e7       	ldi	r20, 0x7A	; 122
    4536:	55 e4       	ldi	r21, 0x45	; 69
    4538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	8d 8b       	std	Y+21, r24	; 0x15
    4542:	9e 8b       	std	Y+22, r25	; 0x16
    4544:	af 8b       	std	Y+23, r26	; 0x17
    4546:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4548:	6d 89       	ldd	r22, Y+21	; 0x15
    454a:	7e 89       	ldd	r23, Y+22	; 0x16
    454c:	8f 89       	ldd	r24, Y+23	; 0x17
    454e:	98 8d       	ldd	r25, Y+24	; 0x18
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	30 e0       	ldi	r19, 0x00	; 0
    4554:	40 e8       	ldi	r20, 0x80	; 128
    4556:	5f e3       	ldi	r21, 0x3F	; 63
    4558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    455c:	88 23       	and	r24, r24
    455e:	2c f4       	brge	.+10     	; 0x456a <H_PB_PB_state_readPb+0x2a8>
		__ticks = 1;
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	9c 8b       	std	Y+20, r25	; 0x14
    4566:	8b 8b       	std	Y+19, r24	; 0x13
    4568:	3f c0       	rjmp	.+126    	; 0x45e8 <H_PB_PB_state_readPb+0x326>
	else if (__tmp > 65535)
    456a:	6d 89       	ldd	r22, Y+21	; 0x15
    456c:	7e 89       	ldd	r23, Y+22	; 0x16
    456e:	8f 89       	ldd	r24, Y+23	; 0x17
    4570:	98 8d       	ldd	r25, Y+24	; 0x18
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	3f ef       	ldi	r19, 0xFF	; 255
    4576:	4f e7       	ldi	r20, 0x7F	; 127
    4578:	57 e4       	ldi	r21, 0x47	; 71
    457a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    457e:	18 16       	cp	r1, r24
    4580:	4c f5       	brge	.+82     	; 0x45d4 <H_PB_PB_state_readPb+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4582:	69 8d       	ldd	r22, Y+25	; 0x19
    4584:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4586:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4588:	9c 8d       	ldd	r25, Y+28	; 0x1c
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	40 e2       	ldi	r20, 0x20	; 32
    4590:	51 e4       	ldi	r21, 0x41	; 65
    4592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4596:	dc 01       	movw	r26, r24
    4598:	cb 01       	movw	r24, r22
    459a:	bc 01       	movw	r22, r24
    459c:	cd 01       	movw	r24, r26
    459e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45a2:	dc 01       	movw	r26, r24
    45a4:	cb 01       	movw	r24, r22
    45a6:	9c 8b       	std	Y+20, r25	; 0x14
    45a8:	8b 8b       	std	Y+19, r24	; 0x13
    45aa:	0f c0       	rjmp	.+30     	; 0x45ca <H_PB_PB_state_readPb+0x308>
    45ac:	80 e9       	ldi	r24, 0x90	; 144
    45ae:	91 e0       	ldi	r25, 0x01	; 1
    45b0:	9a 8b       	std	Y+18, r25	; 0x12
    45b2:	89 8b       	std	Y+17, r24	; 0x11
    45b4:	89 89       	ldd	r24, Y+17	; 0x11
    45b6:	9a 89       	ldd	r25, Y+18	; 0x12
    45b8:	01 97       	sbiw	r24, 0x01	; 1
    45ba:	f1 f7       	brne	.-4      	; 0x45b8 <H_PB_PB_state_readPb+0x2f6>
    45bc:	9a 8b       	std	Y+18, r25	; 0x12
    45be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45c0:	8b 89       	ldd	r24, Y+19	; 0x13
    45c2:	9c 89       	ldd	r25, Y+20	; 0x14
    45c4:	01 97       	sbiw	r24, 0x01	; 1
    45c6:	9c 8b       	std	Y+20, r25	; 0x14
    45c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ca:	8b 89       	ldd	r24, Y+19	; 0x13
    45cc:	9c 89       	ldd	r25, Y+20	; 0x14
    45ce:	00 97       	sbiw	r24, 0x00	; 0
    45d0:	69 f7       	brne	.-38     	; 0x45ac <H_PB_PB_state_readPb+0x2ea>
    45d2:	14 c0       	rjmp	.+40     	; 0x45fc <H_PB_PB_state_readPb+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d4:	6d 89       	ldd	r22, Y+21	; 0x15
    45d6:	7e 89       	ldd	r23, Y+22	; 0x16
    45d8:	8f 89       	ldd	r24, Y+23	; 0x17
    45da:	98 8d       	ldd	r25, Y+24	; 0x18
    45dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	9c 8b       	std	Y+20, r25	; 0x14
    45e6:	8b 8b       	std	Y+19, r24	; 0x13
    45e8:	8b 89       	ldd	r24, Y+19	; 0x13
    45ea:	9c 89       	ldd	r25, Y+20	; 0x14
    45ec:	98 8b       	std	Y+16, r25	; 0x10
    45ee:	8f 87       	std	Y+15, r24	; 0x0f
    45f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    45f2:	98 89       	ldd	r25, Y+16	; 0x10
    45f4:	01 97       	sbiw	r24, 0x01	; 1
    45f6:	f1 f7       	brne	.-4      	; 0x45f4 <H_PB_PB_state_readPb+0x332>
    45f8:	98 8b       	std	Y+16, r25	; 0x10
    45fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DEBOUNCE_TIME);
	current_reading = M_DIO_enu_getPinValue(PB3_pin);
    45fc:	8d e2       	ldi	r24, 0x2D	; 45
    45fe:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    4602:	8a af       	std	Y+58, r24	; 0x3a
    4604:	7a c0       	rjmp	.+244    	; 0x46fa <H_PB_PB_state_readPb+0x438>
		break;
case Button4:
	last_reading = M_DIO_enu_getPinValue(PB4_pin);
    4606:	8b e2       	ldi	r24, 0x2B	; 43
    4608:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    460c:	8b af       	std	Y+59, r24	; 0x3b
    460e:	80 e0       	ldi	r24, 0x00	; 0
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	a8 ec       	ldi	r26, 0xC8	; 200
    4614:	b1 e4       	ldi	r27, 0x41	; 65
    4616:	8b 87       	std	Y+11, r24	; 0x0b
    4618:	9c 87       	std	Y+12, r25	; 0x0c
    461a:	ad 87       	std	Y+13, r26	; 0x0d
    461c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    461e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4620:	7c 85       	ldd	r23, Y+12	; 0x0c
    4622:	8d 85       	ldd	r24, Y+13	; 0x0d
    4624:	9e 85       	ldd	r25, Y+14	; 0x0e
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	4a e7       	ldi	r20, 0x7A	; 122
    462c:	55 e4       	ldi	r21, 0x45	; 69
    462e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	8f 83       	std	Y+7, r24	; 0x07
    4638:	98 87       	std	Y+8, r25	; 0x08
    463a:	a9 87       	std	Y+9, r26	; 0x09
    463c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    463e:	6f 81       	ldd	r22, Y+7	; 0x07
    4640:	78 85       	ldd	r23, Y+8	; 0x08
    4642:	89 85       	ldd	r24, Y+9	; 0x09
    4644:	9a 85       	ldd	r25, Y+10	; 0x0a
    4646:	20 e0       	ldi	r18, 0x00	; 0
    4648:	30 e0       	ldi	r19, 0x00	; 0
    464a:	40 e8       	ldi	r20, 0x80	; 128
    464c:	5f e3       	ldi	r21, 0x3F	; 63
    464e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4652:	88 23       	and	r24, r24
    4654:	2c f4       	brge	.+10     	; 0x4660 <H_PB_PB_state_readPb+0x39e>
		__ticks = 1;
    4656:	81 e0       	ldi	r24, 0x01	; 1
    4658:	90 e0       	ldi	r25, 0x00	; 0
    465a:	9e 83       	std	Y+6, r25	; 0x06
    465c:	8d 83       	std	Y+5, r24	; 0x05
    465e:	3f c0       	rjmp	.+126    	; 0x46de <H_PB_PB_state_readPb+0x41c>
	else if (__tmp > 65535)
    4660:	6f 81       	ldd	r22, Y+7	; 0x07
    4662:	78 85       	ldd	r23, Y+8	; 0x08
    4664:	89 85       	ldd	r24, Y+9	; 0x09
    4666:	9a 85       	ldd	r25, Y+10	; 0x0a
    4668:	20 e0       	ldi	r18, 0x00	; 0
    466a:	3f ef       	ldi	r19, 0xFF	; 255
    466c:	4f e7       	ldi	r20, 0x7F	; 127
    466e:	57 e4       	ldi	r21, 0x47	; 71
    4670:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4674:	18 16       	cp	r1, r24
    4676:	4c f5       	brge	.+82     	; 0x46ca <H_PB_PB_state_readPb+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4678:	6b 85       	ldd	r22, Y+11	; 0x0b
    467a:	7c 85       	ldd	r23, Y+12	; 0x0c
    467c:	8d 85       	ldd	r24, Y+13	; 0x0d
    467e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	40 e2       	ldi	r20, 0x20	; 32
    4686:	51 e4       	ldi	r21, 0x41	; 65
    4688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	bc 01       	movw	r22, r24
    4692:	cd 01       	movw	r24, r26
    4694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	9e 83       	std	Y+6, r25	; 0x06
    469e:	8d 83       	std	Y+5, r24	; 0x05
    46a0:	0f c0       	rjmp	.+30     	; 0x46c0 <H_PB_PB_state_readPb+0x3fe>
    46a2:	80 e9       	ldi	r24, 0x90	; 144
    46a4:	91 e0       	ldi	r25, 0x01	; 1
    46a6:	9c 83       	std	Y+4, r25	; 0x04
    46a8:	8b 83       	std	Y+3, r24	; 0x03
    46aa:	8b 81       	ldd	r24, Y+3	; 0x03
    46ac:	9c 81       	ldd	r25, Y+4	; 0x04
    46ae:	01 97       	sbiw	r24, 0x01	; 1
    46b0:	f1 f7       	brne	.-4      	; 0x46ae <H_PB_PB_state_readPb+0x3ec>
    46b2:	9c 83       	std	Y+4, r25	; 0x04
    46b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46b6:	8d 81       	ldd	r24, Y+5	; 0x05
    46b8:	9e 81       	ldd	r25, Y+6	; 0x06
    46ba:	01 97       	sbiw	r24, 0x01	; 1
    46bc:	9e 83       	std	Y+6, r25	; 0x06
    46be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c0:	8d 81       	ldd	r24, Y+5	; 0x05
    46c2:	9e 81       	ldd	r25, Y+6	; 0x06
    46c4:	00 97       	sbiw	r24, 0x00	; 0
    46c6:	69 f7       	brne	.-38     	; 0x46a2 <H_PB_PB_state_readPb+0x3e0>
    46c8:	14 c0       	rjmp	.+40     	; 0x46f2 <H_PB_PB_state_readPb+0x430>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ca:	6f 81       	ldd	r22, Y+7	; 0x07
    46cc:	78 85       	ldd	r23, Y+8	; 0x08
    46ce:	89 85       	ldd	r24, Y+9	; 0x09
    46d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	9e 83       	std	Y+6, r25	; 0x06
    46dc:	8d 83       	std	Y+5, r24	; 0x05
    46de:	8d 81       	ldd	r24, Y+5	; 0x05
    46e0:	9e 81       	ldd	r25, Y+6	; 0x06
    46e2:	9a 83       	std	Y+2, r25	; 0x02
    46e4:	89 83       	std	Y+1, r24	; 0x01
    46e6:	89 81       	ldd	r24, Y+1	; 0x01
    46e8:	9a 81       	ldd	r25, Y+2	; 0x02
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	f1 f7       	brne	.-4      	; 0x46ea <H_PB_PB_state_readPb+0x428>
    46ee:	9a 83       	std	Y+2, r25	; 0x02
    46f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DEBOUNCE_TIME);
	current_reading = M_DIO_enu_getPinValue(PB3_pin);
    46f2:	8d e2       	ldi	r24, 0x2D	; 45
    46f4:	0e 94 16 18 	call	0x302c	; 0x302c <M_DIO_enu_getPinValue>
    46f8:	8a af       	std	Y+58, r24	; 0x3a
		break;
}

#if(copy_activeMode==active_High)
	if(last_reading==1 && current_reading==0){
    46fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    46fc:	81 30       	cpi	r24, 0x01	; 1
    46fe:	41 f4       	brne	.+16     	; 0x4710 <H_PB_PB_state_readPb+0x44e>
    4700:	8a ad       	ldd	r24, Y+58	; 0x3a
    4702:	88 23       	and	r24, r24
    4704:	29 f4       	brne	.+10     	; 0x4710 <H_PB_PB_state_readPb+0x44e>
		state = pressed;
    4706:	81 e0       	ldi	r24, 0x01	; 1
    4708:	89 af       	std	Y+57, r24	; 0x39
		last_reading=current_reading;
    470a:	8a ad       	ldd	r24, Y+58	; 0x3a
    470c:	8b af       	std	Y+59, r24	; 0x3b
    470e:	09 c0       	rjmp	.+18     	; 0x4722 <H_PB_PB_state_readPb+0x460>
	}
	else if(last_reading==0 && current_reading==1){
    4710:	8b ad       	ldd	r24, Y+59	; 0x3b
    4712:	88 23       	and	r24, r24
    4714:	31 f4       	brne	.+12     	; 0x4722 <H_PB_PB_state_readPb+0x460>
    4716:	8a ad       	ldd	r24, Y+58	; 0x3a
    4718:	81 30       	cpi	r24, 0x01	; 1
    471a:	19 f4       	brne	.+6      	; 0x4722 <H_PB_PB_state_readPb+0x460>
		state = released;
    471c:	19 ae       	std	Y+57, r1	; 0x39
		last_reading=current_reading;
    471e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4720:	8b af       	std	Y+59, r24	; 0x3b
		else if(last_reading==1 && current_reading==0){
			state = released;
			last_reading=current_reading;
		}
#endif
return state;
    4722:	89 ad       	ldd	r24, Y+57	; 0x39
}
    4724:	ef 96       	adiw	r28, 0x3f	; 63
    4726:	0f b6       	in	r0, 0x3f	; 63
    4728:	f8 94       	cli
    472a:	de bf       	out	0x3e, r29	; 62
    472c:	0f be       	out	0x3f, r0	; 63
    472e:	cd bf       	out	0x3d, r28	; 61
    4730:	cf 91       	pop	r28
    4732:	df 91       	pop	r29
    4734:	08 95       	ret

00004736 <H_LED_void_turnOn>:
  Reentrance       : Reentrant
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
void H_LED_void_turnOn(u8 ledID){
    4736:	df 93       	push	r29
    4738:	cf 93       	push	r28
    473a:	00 d0       	rcall	.+0      	; 0x473c <H_LED_void_turnOn+0x6>
    473c:	0f 92       	push	r0
    473e:	cd b7       	in	r28, 0x3d	; 61
    4740:	de b7       	in	r29, 0x3e	; 62
    4742:	89 83       	std	Y+1, r24	; 0x01
	switch (ledID){
    4744:	89 81       	ldd	r24, Y+1	; 0x01
    4746:	28 2f       	mov	r18, r24
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	3b 83       	std	Y+3, r19	; 0x03
    474c:	2a 83       	std	Y+2, r18	; 0x02
    474e:	8a 81       	ldd	r24, Y+2	; 0x02
    4750:	9b 81       	ldd	r25, Y+3	; 0x03
    4752:	81 30       	cpi	r24, 0x01	; 1
    4754:	91 05       	cpc	r25, r1
    4756:	f9 f0       	breq	.+62     	; 0x4796 <H_LED_void_turnOn+0x60>
    4758:	2a 81       	ldd	r18, Y+2	; 0x02
    475a:	3b 81       	ldd	r19, Y+3	; 0x03
    475c:	22 30       	cpi	r18, 0x02	; 2
    475e:	31 05       	cpc	r19, r1
    4760:	2c f4       	brge	.+10     	; 0x476c <H_LED_void_turnOn+0x36>
    4762:	8a 81       	ldd	r24, Y+2	; 0x02
    4764:	9b 81       	ldd	r25, Y+3	; 0x03
    4766:	00 97       	sbiw	r24, 0x00	; 0
    4768:	61 f0       	breq	.+24     	; 0x4782 <H_LED_void_turnOn+0x4c>
    476a:	1e c0       	rjmp	.+60     	; 0x47a8 <H_LED_void_turnOn+0x72>
    476c:	2a 81       	ldd	r18, Y+2	; 0x02
    476e:	3b 81       	ldd	r19, Y+3	; 0x03
    4770:	22 30       	cpi	r18, 0x02	; 2
    4772:	31 05       	cpc	r19, r1
    4774:	59 f0       	breq	.+22     	; 0x478c <H_LED_void_turnOn+0x56>
    4776:	8a 81       	ldd	r24, Y+2	; 0x02
    4778:	9b 81       	ldd	r25, Y+3	; 0x03
    477a:	83 30       	cpi	r24, 0x03	; 3
    477c:	91 05       	cpc	r25, r1
    477e:	81 f0       	breq	.+32     	; 0x47a0 <H_LED_void_turnOn+0x6a>
    4780:	13 c0       	rjmp	.+38     	; 0x47a8 <H_LED_void_turnOn+0x72>
	case LED_RED :
#if (LED_RED_DIRECTION == LED_FORWARD_DIR)
		M_DIO_void_setPinValue(LED_RED_PIN,DIO_HIGH);
    4782:	8b e1       	ldi	r24, 0x1B	; 27
    4784:	61 e0       	ldi	r22, 0x01	; 1
    4786:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    478a:	0e c0       	rjmp	.+28     	; 0x47a8 <H_LED_void_turnOn+0x72>
#endif
		break;

	case LED_GREEN:
#if	(LED_GREEN_DIRECTION ==	LED_FORWARD_DIR)
		M_DIO_void_setPinValue(LED_GREEN_PIN,DIO_HIGH);
    478c:	8e e0       	ldi	r24, 0x0E	; 14
    478e:	61 e0       	ldi	r22, 0x01	; 1
    4790:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    4794:	09 c0       	rjmp	.+18     	; 0x47a8 <H_LED_void_turnOn+0x72>

#endif
		break;
	case LED_BLUE:
#if	(LED_BLUE_DIRECTION ==LED_FORWARD_DIR)
		M_DIO_void_setPinValue(LED_BLUE_PIN,DIO_HIGH);
    4796:	8f e0       	ldi	r24, 0x0F	; 15
    4798:	61 e0       	ldi	r22, 0x01	; 1
    479a:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    479e:	04 c0       	rjmp	.+8      	; 0x47a8 <H_LED_void_turnOn+0x72>
#endif
		break;

	case LED_YELLOW:
#if	(LED_YELLOW_DIRECTION ==LED_FORWARD_DIR)
		M_DIO_void_setPinValue(LED_YELLOW_PIN,DIO_HIGH);
    47a0:	80 e1       	ldi	r24, 0x10	; 16
    47a2:	61 e0       	ldi	r22, 0x01	; 1
    47a4:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>

#endif
		break;
	}

}
    47a8:	0f 90       	pop	r0
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
    47ae:	cf 91       	pop	r28
    47b0:	df 91       	pop	r29
    47b2:	08 95       	ret

000047b4 <H_LED_void_turnOff>:
  Reentrance       : Reentrant
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
void H_LED_void_turnOff(u8 ledID){
    47b4:	df 93       	push	r29
    47b6:	cf 93       	push	r28
    47b8:	00 d0       	rcall	.+0      	; 0x47ba <H_LED_void_turnOff+0x6>
    47ba:	0f 92       	push	r0
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
    47c0:	89 83       	std	Y+1, r24	; 0x01
	switch (ledID){
    47c2:	89 81       	ldd	r24, Y+1	; 0x01
    47c4:	28 2f       	mov	r18, r24
    47c6:	30 e0       	ldi	r19, 0x00	; 0
    47c8:	3b 83       	std	Y+3, r19	; 0x03
    47ca:	2a 83       	std	Y+2, r18	; 0x02
    47cc:	8a 81       	ldd	r24, Y+2	; 0x02
    47ce:	9b 81       	ldd	r25, Y+3	; 0x03
    47d0:	81 30       	cpi	r24, 0x01	; 1
    47d2:	91 05       	cpc	r25, r1
    47d4:	f9 f0       	breq	.+62     	; 0x4814 <H_LED_void_turnOff+0x60>
    47d6:	2a 81       	ldd	r18, Y+2	; 0x02
    47d8:	3b 81       	ldd	r19, Y+3	; 0x03
    47da:	22 30       	cpi	r18, 0x02	; 2
    47dc:	31 05       	cpc	r19, r1
    47de:	2c f4       	brge	.+10     	; 0x47ea <H_LED_void_turnOff+0x36>
    47e0:	8a 81       	ldd	r24, Y+2	; 0x02
    47e2:	9b 81       	ldd	r25, Y+3	; 0x03
    47e4:	00 97       	sbiw	r24, 0x00	; 0
    47e6:	61 f0       	breq	.+24     	; 0x4800 <H_LED_void_turnOff+0x4c>
    47e8:	1e c0       	rjmp	.+60     	; 0x4826 <H_LED_void_turnOff+0x72>
    47ea:	2a 81       	ldd	r18, Y+2	; 0x02
    47ec:	3b 81       	ldd	r19, Y+3	; 0x03
    47ee:	22 30       	cpi	r18, 0x02	; 2
    47f0:	31 05       	cpc	r19, r1
    47f2:	59 f0       	breq	.+22     	; 0x480a <H_LED_void_turnOff+0x56>
    47f4:	8a 81       	ldd	r24, Y+2	; 0x02
    47f6:	9b 81       	ldd	r25, Y+3	; 0x03
    47f8:	83 30       	cpi	r24, 0x03	; 3
    47fa:	91 05       	cpc	r25, r1
    47fc:	81 f0       	breq	.+32     	; 0x481e <H_LED_void_turnOff+0x6a>
    47fe:	13 c0       	rjmp	.+38     	; 0x4826 <H_LED_void_turnOff+0x72>
	case LED_RED :
#if (LED_RED_DIRECTION == LED_FORWARD_DIR)
		M_DIO_void_setPinValue(LED_RED_PIN,DIO_LOW);
    4800:	8b e1       	ldi	r24, 0x1B	; 27
    4802:	60 e0       	ldi	r22, 0x00	; 0
    4804:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    4808:	0e c0       	rjmp	.+28     	; 0x4826 <H_LED_void_turnOff+0x72>
#endif
		break;

	case LED_GREEN:
#if	(LED_GREEN_DIRECTION ==	LED_FORWARD_DIR)
		M_DIO_void_setPinValue(LED_GREEN_PIN,DIO_LOW);
    480a:	8e e0       	ldi	r24, 0x0E	; 14
    480c:	60 e0       	ldi	r22, 0x00	; 0
    480e:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    4812:	09 c0       	rjmp	.+18     	; 0x4826 <H_LED_void_turnOff+0x72>

#endif
		break;
	case LED_BLUE:
#if	(LED_BLUE_DIRECTION ==LED_FORWARD_DIR)
		M_DIO_void_setPinValue(LED_BLUE_PIN,DIO_LOW);
    4814:	8f e0       	ldi	r24, 0x0F	; 15
    4816:	60 e0       	ldi	r22, 0x00	; 0
    4818:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    481c:	04 c0       	rjmp	.+8      	; 0x4826 <H_LED_void_turnOff+0x72>
#endif
		break;

	case LED_YELLOW:
#if	(LED_YELLOW_DIRECTION ==LED_FORWARD_DIR)
		M_DIO_void_setPinValue(LED_YELLOW_PIN,DIO_LOW);
    481e:	80 e1       	ldi	r24, 0x10	; 16
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>

#endif
		break;
	}

}
    4826:	0f 90       	pop	r0
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	cf 91       	pop	r28
    482e:	df 91       	pop	r29
    4830:	08 95       	ret

00004832 <H_LED_void_toggle>:
  Reentrance       : Reentrant
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
void H_LED_void_toggle(u8 ledID){
    4832:	df 93       	push	r29
    4834:	cf 93       	push	r28
    4836:	00 d0       	rcall	.+0      	; 0x4838 <H_LED_void_toggle+0x6>
    4838:	0f 92       	push	r0
    483a:	cd b7       	in	r28, 0x3d	; 61
    483c:	de b7       	in	r29, 0x3e	; 62
    483e:	89 83       	std	Y+1, r24	; 0x01
	switch(ledID){
    4840:	89 81       	ldd	r24, Y+1	; 0x01
    4842:	28 2f       	mov	r18, r24
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	3b 83       	std	Y+3, r19	; 0x03
    4848:	2a 83       	std	Y+2, r18	; 0x02
    484a:	8a 81       	ldd	r24, Y+2	; 0x02
    484c:	9b 81       	ldd	r25, Y+3	; 0x03
    484e:	81 30       	cpi	r24, 0x01	; 1
    4850:	91 05       	cpc	r25, r1
    4852:	c9 f0       	breq	.+50     	; 0x4886 <H_LED_void_toggle+0x54>
    4854:	2a 81       	ldd	r18, Y+2	; 0x02
    4856:	3b 81       	ldd	r19, Y+3	; 0x03
    4858:	22 30       	cpi	r18, 0x02	; 2
    485a:	31 05       	cpc	r19, r1
    485c:	2c f4       	brge	.+10     	; 0x4868 <H_LED_void_toggle+0x36>
    485e:	8a 81       	ldd	r24, Y+2	; 0x02
    4860:	9b 81       	ldd	r25, Y+3	; 0x03
    4862:	00 97       	sbiw	r24, 0x00	; 0
    4864:	61 f0       	breq	.+24     	; 0x487e <H_LED_void_toggle+0x4c>
    4866:	1a c0       	rjmp	.+52     	; 0x489c <H_LED_void_toggle+0x6a>
    4868:	2a 81       	ldd	r18, Y+2	; 0x02
    486a:	3b 81       	ldd	r19, Y+3	; 0x03
    486c:	22 30       	cpi	r18, 0x02	; 2
    486e:	31 05       	cpc	r19, r1
    4870:	71 f0       	breq	.+28     	; 0x488e <H_LED_void_toggle+0x5c>
    4872:	8a 81       	ldd	r24, Y+2	; 0x02
    4874:	9b 81       	ldd	r25, Y+3	; 0x03
    4876:	83 30       	cpi	r24, 0x03	; 3
    4878:	91 05       	cpc	r25, r1
    487a:	69 f0       	breq	.+26     	; 0x4896 <H_LED_void_toggle+0x64>
    487c:	0f c0       	rjmp	.+30     	; 0x489c <H_LED_void_toggle+0x6a>
	case LED_RED:
		M_DIO_void_togglePinValue(LED_RED_PIN);
    487e:	8b e1       	ldi	r24, 0x1B	; 27
    4880:	0e 94 2e 1a 	call	0x345c	; 0x345c <M_DIO_void_togglePinValue>
    4884:	0b c0       	rjmp	.+22     	; 0x489c <H_LED_void_toggle+0x6a>
		break;
	case LED_BLUE:
			M_DIO_void_togglePinValue(LED_BLUE_PIN);
    4886:	8f e0       	ldi	r24, 0x0F	; 15
    4888:	0e 94 2e 1a 	call	0x345c	; 0x345c <M_DIO_void_togglePinValue>
    488c:	07 c0       	rjmp	.+14     	; 0x489c <H_LED_void_toggle+0x6a>
			break;
	case LED_GREEN:
			M_DIO_void_togglePinValue(LED_GREEN_PIN);
    488e:	8e e0       	ldi	r24, 0x0E	; 14
    4890:	0e 94 2e 1a 	call	0x345c	; 0x345c <M_DIO_void_togglePinValue>
    4894:	03 c0       	rjmp	.+6      	; 0x489c <H_LED_void_toggle+0x6a>
			break;
	case LED_YELLOW:
			M_DIO_void_togglePinValue(LED_YELLOW_PIN);
    4896:	80 e1       	ldi	r24, 0x10	; 16
    4898:	0e 94 2e 1a 	call	0x345c	; 0x345c <M_DIO_void_togglePinValue>
			break;
	}

}
    489c:	0f 90       	pop	r0
    489e:	0f 90       	pop	r0
    48a0:	0f 90       	pop	r0
    48a2:	cf 91       	pop	r28
    48a4:	df 91       	pop	r29
    48a6:	08 95       	ret

000048a8 <H_LCD_void_latchByte>:
#include "LCD_priv.h"
#include "LCD_types.h"
#include "DIO_Int.h"
#include "LCD_cfg.h"

static void H_LCD_void_latchByte(u8 copy_u8Byte){
    48a8:	df 93       	push	r29
    48aa:	cf 93       	push	r28
    48ac:	cd b7       	in	r28, 0x3d	; 61
    48ae:	de b7       	in	r29, 0x3e	; 62
    48b0:	e9 97       	sbiw	r28, 0x39	; 57
    48b2:	0f b6       	in	r0, 0x3f	; 63
    48b4:	f8 94       	cli
    48b6:	de bf       	out	0x3e, r29	; 62
    48b8:	0f be       	out	0x3f, r0	; 63
    48ba:	cd bf       	out	0x3d, r28	; 61
    48bc:	89 af       	std	Y+57, r24	; 0x39

	M_DIO_void_setPinValue(LCD_RW_PIN, DIO_LOW);
    48be:	8e e0       	ldi	r24, 0x0E	; 14
    48c0:	60 e0       	ldi	r22, 0x00	; 0
    48c2:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_EN_PIN, DIO_LOW);
    48c6:	8c e0       	ldi	r24, 0x0C	; 12
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>


#if (LCD_MODE == four_bit_mode)
		M_DIO_void_setPinValue(LCD_D7_PIN,  ((copy_u8Byte>>7)&1)  );
    48ce:	89 ad       	ldd	r24, Y+57	; 0x39
    48d0:	98 2f       	mov	r25, r24
    48d2:	99 1f       	adc	r25, r25
    48d4:	99 27       	eor	r25, r25
    48d6:	99 1f       	adc	r25, r25
    48d8:	88 e1       	ldi	r24, 0x18	; 24
    48da:	69 2f       	mov	r22, r25
    48dc:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D6_PIN,  ((copy_u8Byte>>6)&1)  );
    48e0:	89 ad       	ldd	r24, Y+57	; 0x39
    48e2:	82 95       	swap	r24
    48e4:	86 95       	lsr	r24
    48e6:	86 95       	lsr	r24
    48e8:	83 70       	andi	r24, 0x03	; 3
    48ea:	98 2f       	mov	r25, r24
    48ec:	91 70       	andi	r25, 0x01	; 1
    48ee:	86 e1       	ldi	r24, 0x16	; 22
    48f0:	69 2f       	mov	r22, r25
    48f2:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D5_PIN,  ((copy_u8Byte>>5)&1)  );
    48f6:	89 ad       	ldd	r24, Y+57	; 0x39
    48f8:	82 95       	swap	r24
    48fa:	86 95       	lsr	r24
    48fc:	87 70       	andi	r24, 0x07	; 7
    48fe:	98 2f       	mov	r25, r24
    4900:	91 70       	andi	r25, 0x01	; 1
    4902:	85 e1       	ldi	r24, 0x15	; 21
    4904:	69 2f       	mov	r22, r25
    4906:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D4_PIN,  ((copy_u8Byte>>4)&1)  );
    490a:	89 ad       	ldd	r24, Y+57	; 0x39
    490c:	82 95       	swap	r24
    490e:	8f 70       	andi	r24, 0x0F	; 15
    4910:	98 2f       	mov	r25, r24
    4912:	91 70       	andi	r25, 0x01	; 1
    4914:	84 e1       	ldi	r24, 0x14	; 20
    4916:	69 2f       	mov	r22, r25
    4918:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>

		M_DIO_void_setPinValue(LCD_EN_PIN, DIO_HIGH);
    491c:	8c e0       	ldi	r24, 0x0C	; 12
    491e:	61 e0       	ldi	r22, 0x01	; 1
    4920:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	a0 e2       	ldi	r26, 0x20	; 32
    492a:	b1 e4       	ldi	r27, 0x41	; 65
    492c:	8d ab       	std	Y+53, r24	; 0x35
    492e:	9e ab       	std	Y+54, r25	; 0x36
    4930:	af ab       	std	Y+55, r26	; 0x37
    4932:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4934:	6d a9       	ldd	r22, Y+53	; 0x35
    4936:	7e a9       	ldd	r23, Y+54	; 0x36
    4938:	8f a9       	ldd	r24, Y+55	; 0x37
    493a:	98 ad       	ldd	r25, Y+56	; 0x38
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	4a e7       	ldi	r20, 0x7A	; 122
    4942:	55 e4       	ldi	r21, 0x45	; 69
    4944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	89 ab       	std	Y+49, r24	; 0x31
    494e:	9a ab       	std	Y+50, r25	; 0x32
    4950:	ab ab       	std	Y+51, r26	; 0x33
    4952:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4954:	69 a9       	ldd	r22, Y+49	; 0x31
    4956:	7a a9       	ldd	r23, Y+50	; 0x32
    4958:	8b a9       	ldd	r24, Y+51	; 0x33
    495a:	9c a9       	ldd	r25, Y+52	; 0x34
    495c:	20 e0       	ldi	r18, 0x00	; 0
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	40 e8       	ldi	r20, 0x80	; 128
    4962:	5f e3       	ldi	r21, 0x3F	; 63
    4964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4968:	88 23       	and	r24, r24
    496a:	2c f4       	brge	.+10     	; 0x4976 <H_LCD_void_latchByte+0xce>
		__ticks = 1;
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	98 ab       	std	Y+48, r25	; 0x30
    4972:	8f a7       	std	Y+47, r24	; 0x2f
    4974:	3f c0       	rjmp	.+126    	; 0x49f4 <H_LCD_void_latchByte+0x14c>
	else if (__tmp > 65535)
    4976:	69 a9       	ldd	r22, Y+49	; 0x31
    4978:	7a a9       	ldd	r23, Y+50	; 0x32
    497a:	8b a9       	ldd	r24, Y+51	; 0x33
    497c:	9c a9       	ldd	r25, Y+52	; 0x34
    497e:	20 e0       	ldi	r18, 0x00	; 0
    4980:	3f ef       	ldi	r19, 0xFF	; 255
    4982:	4f e7       	ldi	r20, 0x7F	; 127
    4984:	57 e4       	ldi	r21, 0x47	; 71
    4986:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    498a:	18 16       	cp	r1, r24
    498c:	4c f5       	brge	.+82     	; 0x49e0 <H_LCD_void_latchByte+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    498e:	6d a9       	ldd	r22, Y+53	; 0x35
    4990:	7e a9       	ldd	r23, Y+54	; 0x36
    4992:	8f a9       	ldd	r24, Y+55	; 0x37
    4994:	98 ad       	ldd	r25, Y+56	; 0x38
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	30 e0       	ldi	r19, 0x00	; 0
    499a:	40 e2       	ldi	r20, 0x20	; 32
    499c:	51 e4       	ldi	r21, 0x41	; 65
    499e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	bc 01       	movw	r22, r24
    49a8:	cd 01       	movw	r24, r26
    49aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	98 ab       	std	Y+48, r25	; 0x30
    49b4:	8f a7       	std	Y+47, r24	; 0x2f
    49b6:	0f c0       	rjmp	.+30     	; 0x49d6 <H_LCD_void_latchByte+0x12e>
    49b8:	80 e9       	ldi	r24, 0x90	; 144
    49ba:	91 e0       	ldi	r25, 0x01	; 1
    49bc:	9e a7       	std	Y+46, r25	; 0x2e
    49be:	8d a7       	std	Y+45, r24	; 0x2d
    49c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    49c2:	9e a5       	ldd	r25, Y+46	; 0x2e
    49c4:	01 97       	sbiw	r24, 0x01	; 1
    49c6:	f1 f7       	brne	.-4      	; 0x49c4 <H_LCD_void_latchByte+0x11c>
    49c8:	9e a7       	std	Y+46, r25	; 0x2e
    49ca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    49ce:	98 a9       	ldd	r25, Y+48	; 0x30
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	98 ab       	std	Y+48, r25	; 0x30
    49d4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    49d8:	98 a9       	ldd	r25, Y+48	; 0x30
    49da:	00 97       	sbiw	r24, 0x00	; 0
    49dc:	69 f7       	brne	.-38     	; 0x49b8 <H_LCD_void_latchByte+0x110>
    49de:	14 c0       	rjmp	.+40     	; 0x4a08 <H_LCD_void_latchByte+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e0:	69 a9       	ldd	r22, Y+49	; 0x31
    49e2:	7a a9       	ldd	r23, Y+50	; 0x32
    49e4:	8b a9       	ldd	r24, Y+51	; 0x33
    49e6:	9c a9       	ldd	r25, Y+52	; 0x34
    49e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	98 ab       	std	Y+48, r25	; 0x30
    49f2:	8f a7       	std	Y+47, r24	; 0x2f
    49f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    49f6:	98 a9       	ldd	r25, Y+48	; 0x30
    49f8:	9c a7       	std	Y+44, r25	; 0x2c
    49fa:	8b a7       	std	Y+43, r24	; 0x2b
    49fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    49fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a00:	01 97       	sbiw	r24, 0x01	; 1
    4a02:	f1 f7       	brne	.-4      	; 0x4a00 <H_LCD_void_latchByte+0x158>
    4a04:	9c a7       	std	Y+44, r25	; 0x2c
    4a06:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		M_DIO_void_setPinValue(LCD_EN_PIN, DIO_LOW);
    4a08:	8c e0       	ldi	r24, 0x0C	; 12
    4a0a:	60 e0       	ldi	r22, 0x00	; 0
    4a0c:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    4a10:	80 e0       	ldi	r24, 0x00	; 0
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	a0 e2       	ldi	r26, 0x20	; 32
    4a16:	b1 e4       	ldi	r27, 0x41	; 65
    4a18:	8f a3       	std	Y+39, r24	; 0x27
    4a1a:	98 a7       	std	Y+40, r25	; 0x28
    4a1c:	a9 a7       	std	Y+41, r26	; 0x29
    4a1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a20:	6f a1       	ldd	r22, Y+39	; 0x27
    4a22:	78 a5       	ldd	r23, Y+40	; 0x28
    4a24:	89 a5       	ldd	r24, Y+41	; 0x29
    4a26:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a28:	20 e0       	ldi	r18, 0x00	; 0
    4a2a:	30 e0       	ldi	r19, 0x00	; 0
    4a2c:	4a e7       	ldi	r20, 0x7A	; 122
    4a2e:	55 e4       	ldi	r21, 0x45	; 69
    4a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a34:	dc 01       	movw	r26, r24
    4a36:	cb 01       	movw	r24, r22
    4a38:	8b a3       	std	Y+35, r24	; 0x23
    4a3a:	9c a3       	std	Y+36, r25	; 0x24
    4a3c:	ad a3       	std	Y+37, r26	; 0x25
    4a3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a40:	6b a1       	ldd	r22, Y+35	; 0x23
    4a42:	7c a1       	ldd	r23, Y+36	; 0x24
    4a44:	8d a1       	ldd	r24, Y+37	; 0x25
    4a46:	9e a1       	ldd	r25, Y+38	; 0x26
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	30 e0       	ldi	r19, 0x00	; 0
    4a4c:	40 e8       	ldi	r20, 0x80	; 128
    4a4e:	5f e3       	ldi	r21, 0x3F	; 63
    4a50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a54:	88 23       	and	r24, r24
    4a56:	2c f4       	brge	.+10     	; 0x4a62 <H_LCD_void_latchByte+0x1ba>
		__ticks = 1;
    4a58:	81 e0       	ldi	r24, 0x01	; 1
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	9a a3       	std	Y+34, r25	; 0x22
    4a5e:	89 a3       	std	Y+33, r24	; 0x21
    4a60:	3f c0       	rjmp	.+126    	; 0x4ae0 <H_LCD_void_latchByte+0x238>
	else if (__tmp > 65535)
    4a62:	6b a1       	ldd	r22, Y+35	; 0x23
    4a64:	7c a1       	ldd	r23, Y+36	; 0x24
    4a66:	8d a1       	ldd	r24, Y+37	; 0x25
    4a68:	9e a1       	ldd	r25, Y+38	; 0x26
    4a6a:	20 e0       	ldi	r18, 0x00	; 0
    4a6c:	3f ef       	ldi	r19, 0xFF	; 255
    4a6e:	4f e7       	ldi	r20, 0x7F	; 127
    4a70:	57 e4       	ldi	r21, 0x47	; 71
    4a72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a76:	18 16       	cp	r1, r24
    4a78:	4c f5       	brge	.+82     	; 0x4acc <H_LCD_void_latchByte+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    4a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    4a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    4a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a82:	20 e0       	ldi	r18, 0x00	; 0
    4a84:	30 e0       	ldi	r19, 0x00	; 0
    4a86:	40 e2       	ldi	r20, 0x20	; 32
    4a88:	51 e4       	ldi	r21, 0x41	; 65
    4a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a8e:	dc 01       	movw	r26, r24
    4a90:	cb 01       	movw	r24, r22
    4a92:	bc 01       	movw	r22, r24
    4a94:	cd 01       	movw	r24, r26
    4a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	cb 01       	movw	r24, r22
    4a9e:	9a a3       	std	Y+34, r25	; 0x22
    4aa0:	89 a3       	std	Y+33, r24	; 0x21
    4aa2:	0f c0       	rjmp	.+30     	; 0x4ac2 <H_LCD_void_latchByte+0x21a>
    4aa4:	80 e9       	ldi	r24, 0x90	; 144
    4aa6:	91 e0       	ldi	r25, 0x01	; 1
    4aa8:	98 a3       	std	Y+32, r25	; 0x20
    4aaa:	8f 8f       	std	Y+31, r24	; 0x1f
    4aac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4aae:	98 a1       	ldd	r25, Y+32	; 0x20
    4ab0:	01 97       	sbiw	r24, 0x01	; 1
    4ab2:	f1 f7       	brne	.-4      	; 0x4ab0 <H_LCD_void_latchByte+0x208>
    4ab4:	98 a3       	std	Y+32, r25	; 0x20
    4ab6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    4aba:	9a a1       	ldd	r25, Y+34	; 0x22
    4abc:	01 97       	sbiw	r24, 0x01	; 1
    4abe:	9a a3       	std	Y+34, r25	; 0x22
    4ac0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    4ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    4ac6:	00 97       	sbiw	r24, 0x00	; 0
    4ac8:	69 f7       	brne	.-38     	; 0x4aa4 <H_LCD_void_latchByte+0x1fc>
    4aca:	14 c0       	rjmp	.+40     	; 0x4af4 <H_LCD_void_latchByte+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4acc:	6b a1       	ldd	r22, Y+35	; 0x23
    4ace:	7c a1       	ldd	r23, Y+36	; 0x24
    4ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    4ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    4ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	9a a3       	std	Y+34, r25	; 0x22
    4ade:	89 a3       	std	Y+33, r24	; 0x21
    4ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    4ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    4ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    4ae6:	8d 8f       	std	Y+29, r24	; 0x1d
    4ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4aea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4aec:	01 97       	sbiw	r24, 0x01	; 1
    4aee:	f1 f7       	brne	.-4      	; 0x4aec <H_LCD_void_latchByte+0x244>
    4af0:	9e 8f       	std	Y+30, r25	; 0x1e
    4af2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);

		M_DIO_void_setPinValue(LCD_D7_PIN,  ((copy_u8Byte>>3)&1)  );
    4af4:	89 ad       	ldd	r24, Y+57	; 0x39
    4af6:	86 95       	lsr	r24
    4af8:	86 95       	lsr	r24
    4afa:	86 95       	lsr	r24
    4afc:	98 2f       	mov	r25, r24
    4afe:	91 70       	andi	r25, 0x01	; 1
    4b00:	88 e1       	ldi	r24, 0x18	; 24
    4b02:	69 2f       	mov	r22, r25
    4b04:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D6_PIN,  ((copy_u8Byte>>2)&1)  );
    4b08:	89 ad       	ldd	r24, Y+57	; 0x39
    4b0a:	86 95       	lsr	r24
    4b0c:	86 95       	lsr	r24
    4b0e:	98 2f       	mov	r25, r24
    4b10:	91 70       	andi	r25, 0x01	; 1
    4b12:	86 e1       	ldi	r24, 0x16	; 22
    4b14:	69 2f       	mov	r22, r25
    4b16:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D5_PIN,  ((copy_u8Byte>>1)&1)  );
    4b1a:	89 ad       	ldd	r24, Y+57	; 0x39
    4b1c:	86 95       	lsr	r24
    4b1e:	98 2f       	mov	r25, r24
    4b20:	91 70       	andi	r25, 0x01	; 1
    4b22:	85 e1       	ldi	r24, 0x15	; 21
    4b24:	69 2f       	mov	r22, r25
    4b26:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
		M_DIO_void_setPinValue(LCD_D4_PIN,  ((copy_u8Byte>>0)&1)  );
    4b2a:	89 ad       	ldd	r24, Y+57	; 0x39
    4b2c:	98 2f       	mov	r25, r24
    4b2e:	91 70       	andi	r25, 0x01	; 1
    4b30:	84 e1       	ldi	r24, 0x14	; 20
    4b32:	69 2f       	mov	r22, r25
    4b34:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>

		M_DIO_void_setPinValue(LCD_EN_PIN, DIO_HIGH);
    4b38:	8c e0       	ldi	r24, 0x0C	; 12
    4b3a:	61 e0       	ldi	r22, 0x01	; 1
    4b3c:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	a0 e2       	ldi	r26, 0x20	; 32
    4b46:	b1 e4       	ldi	r27, 0x41	; 65
    4b48:	89 8f       	std	Y+25, r24	; 0x19
    4b4a:	9a 8f       	std	Y+26, r25	; 0x1a
    4b4c:	ab 8f       	std	Y+27, r26	; 0x1b
    4b4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b50:	69 8d       	ldd	r22, Y+25	; 0x19
    4b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	4a e7       	ldi	r20, 0x7A	; 122
    4b5e:	55 e4       	ldi	r21, 0x45	; 69
    4b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b64:	dc 01       	movw	r26, r24
    4b66:	cb 01       	movw	r24, r22
    4b68:	8d 8b       	std	Y+21, r24	; 0x15
    4b6a:	9e 8b       	std	Y+22, r25	; 0x16
    4b6c:	af 8b       	std	Y+23, r26	; 0x17
    4b6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b70:	6d 89       	ldd	r22, Y+21	; 0x15
    4b72:	7e 89       	ldd	r23, Y+22	; 0x16
    4b74:	8f 89       	ldd	r24, Y+23	; 0x17
    4b76:	98 8d       	ldd	r25, Y+24	; 0x18
    4b78:	20 e0       	ldi	r18, 0x00	; 0
    4b7a:	30 e0       	ldi	r19, 0x00	; 0
    4b7c:	40 e8       	ldi	r20, 0x80	; 128
    4b7e:	5f e3       	ldi	r21, 0x3F	; 63
    4b80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b84:	88 23       	and	r24, r24
    4b86:	2c f4       	brge	.+10     	; 0x4b92 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    4b88:	81 e0       	ldi	r24, 0x01	; 1
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	9c 8b       	std	Y+20, r25	; 0x14
    4b8e:	8b 8b       	std	Y+19, r24	; 0x13
    4b90:	3f c0       	rjmp	.+126    	; 0x4c10 <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    4b92:	6d 89       	ldd	r22, Y+21	; 0x15
    4b94:	7e 89       	ldd	r23, Y+22	; 0x16
    4b96:	8f 89       	ldd	r24, Y+23	; 0x17
    4b98:	98 8d       	ldd	r25, Y+24	; 0x18
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	3f ef       	ldi	r19, 0xFF	; 255
    4b9e:	4f e7       	ldi	r20, 0x7F	; 127
    4ba0:	57 e4       	ldi	r21, 0x47	; 71
    4ba2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ba6:	18 16       	cp	r1, r24
    4ba8:	4c f5       	brge	.+82     	; 0x4bfc <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4baa:	69 8d       	ldd	r22, Y+25	; 0x19
    4bac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bb2:	20 e0       	ldi	r18, 0x00	; 0
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	40 e2       	ldi	r20, 0x20	; 32
    4bb8:	51 e4       	ldi	r21, 0x41	; 65
    4bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bbe:	dc 01       	movw	r26, r24
    4bc0:	cb 01       	movw	r24, r22
    4bc2:	bc 01       	movw	r22, r24
    4bc4:	cd 01       	movw	r24, r26
    4bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bca:	dc 01       	movw	r26, r24
    4bcc:	cb 01       	movw	r24, r22
    4bce:	9c 8b       	std	Y+20, r25	; 0x14
    4bd0:	8b 8b       	std	Y+19, r24	; 0x13
    4bd2:	0f c0       	rjmp	.+30     	; 0x4bf2 <H_LCD_void_latchByte+0x34a>
    4bd4:	80 e9       	ldi	r24, 0x90	; 144
    4bd6:	91 e0       	ldi	r25, 0x01	; 1
    4bd8:	9a 8b       	std	Y+18, r25	; 0x12
    4bda:	89 8b       	std	Y+17, r24	; 0x11
    4bdc:	89 89       	ldd	r24, Y+17	; 0x11
    4bde:	9a 89       	ldd	r25, Y+18	; 0x12
    4be0:	01 97       	sbiw	r24, 0x01	; 1
    4be2:	f1 f7       	brne	.-4      	; 0x4be0 <H_LCD_void_latchByte+0x338>
    4be4:	9a 8b       	std	Y+18, r25	; 0x12
    4be6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4be8:	8b 89       	ldd	r24, Y+19	; 0x13
    4bea:	9c 89       	ldd	r25, Y+20	; 0x14
    4bec:	01 97       	sbiw	r24, 0x01	; 1
    4bee:	9c 8b       	std	Y+20, r25	; 0x14
    4bf0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    4bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    4bf6:	00 97       	sbiw	r24, 0x00	; 0
    4bf8:	69 f7       	brne	.-38     	; 0x4bd4 <H_LCD_void_latchByte+0x32c>
    4bfa:	14 c0       	rjmp	.+40     	; 0x4c24 <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    4bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    4c00:	8f 89       	ldd	r24, Y+23	; 0x17
    4c02:	98 8d       	ldd	r25, Y+24	; 0x18
    4c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c08:	dc 01       	movw	r26, r24
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	9c 8b       	std	Y+20, r25	; 0x14
    4c0e:	8b 8b       	std	Y+19, r24	; 0x13
    4c10:	8b 89       	ldd	r24, Y+19	; 0x13
    4c12:	9c 89       	ldd	r25, Y+20	; 0x14
    4c14:	98 8b       	std	Y+16, r25	; 0x10
    4c16:	8f 87       	std	Y+15, r24	; 0x0f
    4c18:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c1a:	98 89       	ldd	r25, Y+16	; 0x10
    4c1c:	01 97       	sbiw	r24, 0x01	; 1
    4c1e:	f1 f7       	brne	.-4      	; 0x4c1c <H_LCD_void_latchByte+0x374>
    4c20:	98 8b       	std	Y+16, r25	; 0x10
    4c22:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		M_DIO_void_setPinValue(LCD_EN_PIN, DIO_LOW);
    4c24:	8c e0       	ldi	r24, 0x0C	; 12
    4c26:	60 e0       	ldi	r22, 0x00	; 0
    4c28:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	a0 e2       	ldi	r26, 0x20	; 32
    4c32:	b1 e4       	ldi	r27, 0x41	; 65
    4c34:	8b 87       	std	Y+11, r24	; 0x0b
    4c36:	9c 87       	std	Y+12, r25	; 0x0c
    4c38:	ad 87       	std	Y+13, r26	; 0x0d
    4c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	4a e7       	ldi	r20, 0x7A	; 122
    4c4a:	55 e4       	ldi	r21, 0x45	; 69
    4c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	8f 83       	std	Y+7, r24	; 0x07
    4c56:	98 87       	std	Y+8, r25	; 0x08
    4c58:	a9 87       	std	Y+9, r26	; 0x09
    4c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c5e:	78 85       	ldd	r23, Y+8	; 0x08
    4c60:	89 85       	ldd	r24, Y+9	; 0x09
    4c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c64:	20 e0       	ldi	r18, 0x00	; 0
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	40 e8       	ldi	r20, 0x80	; 128
    4c6a:	5f e3       	ldi	r21, 0x3F	; 63
    4c6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c70:	88 23       	and	r24, r24
    4c72:	2c f4       	brge	.+10     	; 0x4c7e <H_LCD_void_latchByte+0x3d6>
		__ticks = 1;
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	9e 83       	std	Y+6, r25	; 0x06
    4c7a:	8d 83       	std	Y+5, r24	; 0x05
    4c7c:	3f c0       	rjmp	.+126    	; 0x4cfc <H_LCD_void_latchByte+0x454>
	else if (__tmp > 65535)
    4c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c80:	78 85       	ldd	r23, Y+8	; 0x08
    4c82:	89 85       	ldd	r24, Y+9	; 0x09
    4c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	3f ef       	ldi	r19, 0xFF	; 255
    4c8a:	4f e7       	ldi	r20, 0x7F	; 127
    4c8c:	57 e4       	ldi	r21, 0x47	; 71
    4c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c92:	18 16       	cp	r1, r24
    4c94:	4c f5       	brge	.+82     	; 0x4ce8 <H_LCD_void_latchByte+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
    4ca2:	40 e2       	ldi	r20, 0x20	; 32
    4ca4:	51 e4       	ldi	r21, 0x41	; 65
    4ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	bc 01       	movw	r22, r24
    4cb0:	cd 01       	movw	r24, r26
    4cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb6:	dc 01       	movw	r26, r24
    4cb8:	cb 01       	movw	r24, r22
    4cba:	9e 83       	std	Y+6, r25	; 0x06
    4cbc:	8d 83       	std	Y+5, r24	; 0x05
    4cbe:	0f c0       	rjmp	.+30     	; 0x4cde <H_LCD_void_latchByte+0x436>
    4cc0:	80 e9       	ldi	r24, 0x90	; 144
    4cc2:	91 e0       	ldi	r25, 0x01	; 1
    4cc4:	9c 83       	std	Y+4, r25	; 0x04
    4cc6:	8b 83       	std	Y+3, r24	; 0x03
    4cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cca:	9c 81       	ldd	r25, Y+4	; 0x04
    4ccc:	01 97       	sbiw	r24, 0x01	; 1
    4cce:	f1 f7       	brne	.-4      	; 0x4ccc <H_LCD_void_latchByte+0x424>
    4cd0:	9c 83       	std	Y+4, r25	; 0x04
    4cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd8:	01 97       	sbiw	r24, 0x01	; 1
    4cda:	9e 83       	std	Y+6, r25	; 0x06
    4cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cde:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce2:	00 97       	sbiw	r24, 0x00	; 0
    4ce4:	69 f7       	brne	.-38     	; 0x4cc0 <H_LCD_void_latchByte+0x418>
    4ce6:	14 c0       	rjmp	.+40     	; 0x4d10 <H_LCD_void_latchByte+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    4cea:	78 85       	ldd	r23, Y+8	; 0x08
    4cec:	89 85       	ldd	r24, Y+9	; 0x09
    4cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	9e 83       	std	Y+6, r25	; 0x06
    4cfa:	8d 83       	std	Y+5, r24	; 0x05
    4cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    4d00:	9a 83       	std	Y+2, r25	; 0x02
    4d02:	89 83       	std	Y+1, r24	; 0x01
    4d04:	89 81       	ldd	r24, Y+1	; 0x01
    4d06:	9a 81       	ldd	r25, Y+2	; 0x02
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	f1 f7       	brne	.-4      	; 0x4d08 <H_LCD_void_latchByte+0x460>
    4d0c:	9a 83       	std	Y+2, r25	; 0x02
    4d0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

#else
	#error "LCD Mode Configuration is wrong\n it must be EIGHT_BIT or FOUR_BIT"
#endif
}
    4d10:	e9 96       	adiw	r28, 0x39	; 57
    4d12:	0f b6       	in	r0, 0x3f	; 63
    4d14:	f8 94       	cli
    4d16:	de bf       	out	0x3e, r29	; 62
    4d18:	0f be       	out	0x3f, r0	; 63
    4d1a:	cd bf       	out	0x3d, r28	; 61
    4d1c:	cf 91       	pop	r28
    4d1e:	df 91       	pop	r29
    4d20:	08 95       	ret

00004d22 <H_LCD_void_sendCommand>:

void H_LCD_void_sendCommand(u8 copy_u8command){
    4d22:	df 93       	push	r29
    4d24:	cf 93       	push	r28
    4d26:	0f 92       	push	r0
    4d28:	cd b7       	in	r28, 0x3d	; 61
    4d2a:	de b7       	in	r29, 0x3e	; 62
    4d2c:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_void_setPinValue(LCD_RS_PIN,DIO_LOW);
    4d2e:	8d e0       	ldi	r24, 0x0D	; 13
    4d30:	60 e0       	ldi	r22, 0x00	; 0
    4d32:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	H_LCD_void_latchByte(copy_u8command);
    4d36:	89 81       	ldd	r24, Y+1	; 0x01
    4d38:	0e 94 54 24 	call	0x48a8	; 0x48a8 <H_LCD_void_latchByte>
}
    4d3c:	0f 90       	pop	r0
    4d3e:	cf 91       	pop	r28
    4d40:	df 91       	pop	r29
    4d42:	08 95       	ret

00004d44 <H_LCD_void_sendData>:

void H_LCD_void_sendData(u8 copy_u8data ){
    4d44:	df 93       	push	r29
    4d46:	cf 93       	push	r28
    4d48:	0f 92       	push	r0
    4d4a:	cd b7       	in	r28, 0x3d	; 61
    4d4c:	de b7       	in	r29, 0x3e	; 62
    4d4e:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_void_setPinValue(LCD_RS_PIN,DIO_HIGH);
    4d50:	8d e0       	ldi	r24, 0x0D	; 13
    4d52:	61 e0       	ldi	r22, 0x01	; 1
    4d54:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	H_LCD_void_latchByte(copy_u8data);
    4d58:	89 81       	ldd	r24, Y+1	; 0x01
    4d5a:	0e 94 54 24 	call	0x48a8	; 0x48a8 <H_LCD_void_latchByte>
}
    4d5e:	0f 90       	pop	r0
    4d60:	cf 91       	pop	r28
    4d62:	df 91       	pop	r29
    4d64:	08 95       	ret

00004d66 <H_LCD_void_Init>:

void H_LCD_void_Init(void){
    4d66:	df 93       	push	r29
    4d68:	cf 93       	push	r28
    4d6a:	cd b7       	in	r28, 0x3d	; 61
    4d6c:	de b7       	in	r29, 0x3e	; 62
    4d6e:	aa 97       	sbiw	r28, 0x2a	; 42
    4d70:	0f b6       	in	r0, 0x3f	; 63
    4d72:	f8 94       	cli
    4d74:	de bf       	out	0x3e, r29	; 62
    4d76:	0f be       	out	0x3f, r0	; 63
    4d78:	cd bf       	out	0x3d, r28	; 61
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	ac e0       	ldi	r26, 0x0C	; 12
    4d80:	b2 e4       	ldi	r27, 0x42	; 66
    4d82:	8f a3       	std	Y+39, r24	; 0x27
    4d84:	98 a7       	std	Y+40, r25	; 0x28
    4d86:	a9 a7       	std	Y+41, r26	; 0x29
    4d88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d8a:	6f a1       	ldd	r22, Y+39	; 0x27
    4d8c:	78 a5       	ldd	r23, Y+40	; 0x28
    4d8e:	89 a5       	ldd	r24, Y+41	; 0x29
    4d90:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	4a e7       	ldi	r20, 0x7A	; 122
    4d98:	55 e4       	ldi	r21, 0x45	; 69
    4d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	8b a3       	std	Y+35, r24	; 0x23
    4da4:	9c a3       	std	Y+36, r25	; 0x24
    4da6:	ad a3       	std	Y+37, r26	; 0x25
    4da8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4daa:	6b a1       	ldd	r22, Y+35	; 0x23
    4dac:	7c a1       	ldd	r23, Y+36	; 0x24
    4dae:	8d a1       	ldd	r24, Y+37	; 0x25
    4db0:	9e a1       	ldd	r25, Y+38	; 0x26
    4db2:	20 e0       	ldi	r18, 0x00	; 0
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	40 e8       	ldi	r20, 0x80	; 128
    4db8:	5f e3       	ldi	r21, 0x3F	; 63
    4dba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dbe:	88 23       	and	r24, r24
    4dc0:	2c f4       	brge	.+10     	; 0x4dcc <H_LCD_void_Init+0x66>
		__ticks = 1;
    4dc2:	81 e0       	ldi	r24, 0x01	; 1
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	9a a3       	std	Y+34, r25	; 0x22
    4dc8:	89 a3       	std	Y+33, r24	; 0x21
    4dca:	3f c0       	rjmp	.+126    	; 0x4e4a <H_LCD_void_Init+0xe4>
	else if (__tmp > 65535)
    4dcc:	6b a1       	ldd	r22, Y+35	; 0x23
    4dce:	7c a1       	ldd	r23, Y+36	; 0x24
    4dd0:	8d a1       	ldd	r24, Y+37	; 0x25
    4dd2:	9e a1       	ldd	r25, Y+38	; 0x26
    4dd4:	20 e0       	ldi	r18, 0x00	; 0
    4dd6:	3f ef       	ldi	r19, 0xFF	; 255
    4dd8:	4f e7       	ldi	r20, 0x7F	; 127
    4dda:	57 e4       	ldi	r21, 0x47	; 71
    4ddc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4de0:	18 16       	cp	r1, r24
    4de2:	4c f5       	brge	.+82     	; 0x4e36 <H_LCD_void_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4de4:	6f a1       	ldd	r22, Y+39	; 0x27
    4de6:	78 a5       	ldd	r23, Y+40	; 0x28
    4de8:	89 a5       	ldd	r24, Y+41	; 0x29
    4dea:	9a a5       	ldd	r25, Y+42	; 0x2a
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	40 e2       	ldi	r20, 0x20	; 32
    4df2:	51 e4       	ldi	r21, 0x41	; 65
    4df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df8:	dc 01       	movw	r26, r24
    4dfa:	cb 01       	movw	r24, r22
    4dfc:	bc 01       	movw	r22, r24
    4dfe:	cd 01       	movw	r24, r26
    4e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e04:	dc 01       	movw	r26, r24
    4e06:	cb 01       	movw	r24, r22
    4e08:	9a a3       	std	Y+34, r25	; 0x22
    4e0a:	89 a3       	std	Y+33, r24	; 0x21
    4e0c:	0f c0       	rjmp	.+30     	; 0x4e2c <H_LCD_void_Init+0xc6>
    4e0e:	80 e9       	ldi	r24, 0x90	; 144
    4e10:	91 e0       	ldi	r25, 0x01	; 1
    4e12:	98 a3       	std	Y+32, r25	; 0x20
    4e14:	8f 8f       	std	Y+31, r24	; 0x1f
    4e16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e18:	98 a1       	ldd	r25, Y+32	; 0x20
    4e1a:	01 97       	sbiw	r24, 0x01	; 1
    4e1c:	f1 f7       	brne	.-4      	; 0x4e1a <H_LCD_void_Init+0xb4>
    4e1e:	98 a3       	std	Y+32, r25	; 0x20
    4e20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e22:	89 a1       	ldd	r24, Y+33	; 0x21
    4e24:	9a a1       	ldd	r25, Y+34	; 0x22
    4e26:	01 97       	sbiw	r24, 0x01	; 1
    4e28:	9a a3       	std	Y+34, r25	; 0x22
    4e2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    4e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    4e30:	00 97       	sbiw	r24, 0x00	; 0
    4e32:	69 f7       	brne	.-38     	; 0x4e0e <H_LCD_void_Init+0xa8>
    4e34:	14 c0       	rjmp	.+40     	; 0x4e5e <H_LCD_void_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e36:	6b a1       	ldd	r22, Y+35	; 0x23
    4e38:	7c a1       	ldd	r23, Y+36	; 0x24
    4e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    4e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    4e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	9a a3       	std	Y+34, r25	; 0x22
    4e48:	89 a3       	std	Y+33, r24	; 0x21
    4e4a:	89 a1       	ldd	r24, Y+33	; 0x21
    4e4c:	9a a1       	ldd	r25, Y+34	; 0x22
    4e4e:	9e 8f       	std	Y+30, r25	; 0x1e
    4e50:	8d 8f       	std	Y+29, r24	; 0x1d
    4e52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e56:	01 97       	sbiw	r24, 0x01	; 1
    4e58:	f1 f7       	brne	.-4      	; 0x4e56 <H_LCD_void_Init+0xf0>
    4e5a:	9e 8f       	std	Y+30, r25	; 0x1e
    4e5c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(35);
	M_DIO_void_setPinValue(LCD_RS_PIN,DIO_LOW);
    4e5e:	8d e0       	ldi	r24, 0x0D	; 13
    4e60:	60 e0       	ldi	r22, 0x00	; 0
    4e62:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D7_PIN,DIO_LOW);
    4e66:	88 e1       	ldi	r24, 0x18	; 24
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D6_PIN,DIO_LOW);
    4e6e:	86 e1       	ldi	r24, 0x16	; 22
    4e70:	60 e0       	ldi	r22, 0x00	; 0
    4e72:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D5_PIN,DIO_HIGH);
    4e76:	85 e1       	ldi	r24, 0x15	; 21
    4e78:	61 e0       	ldi	r22, 0x01	; 1
    4e7a:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
	M_DIO_void_setPinValue(LCD_D4_PIN,DIO_LOW);
    4e7e:	84 e1       	ldi	r24, 0x14	; 20
    4e80:	60 e0       	ldi	r22, 0x00	; 0
    4e82:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>

	M_DIO_void_setPinValue(LCD_EN_PIN, DIO_HIGH);
    4e86:	8c e0       	ldi	r24, 0x0C	; 12
    4e88:	61 e0       	ldi	r22, 0x01	; 1
    4e8a:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    4e8e:	80 e0       	ldi	r24, 0x00	; 0
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	a0 e2       	ldi	r26, 0x20	; 32
    4e94:	b1 e4       	ldi	r27, 0x41	; 65
    4e96:	89 8f       	std	Y+25, r24	; 0x19
    4e98:	9a 8f       	std	Y+26, r25	; 0x1a
    4e9a:	ab 8f       	std	Y+27, r26	; 0x1b
    4e9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e9e:	69 8d       	ldd	r22, Y+25	; 0x19
    4ea0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ea2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ea4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	30 e0       	ldi	r19, 0x00	; 0
    4eaa:	4a e7       	ldi	r20, 0x7A	; 122
    4eac:	55 e4       	ldi	r21, 0x45	; 69
    4eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	8d 8b       	std	Y+21, r24	; 0x15
    4eb8:	9e 8b       	std	Y+22, r25	; 0x16
    4eba:	af 8b       	std	Y+23, r26	; 0x17
    4ebc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    4ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ec6:	20 e0       	ldi	r18, 0x00	; 0
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	40 e8       	ldi	r20, 0x80	; 128
    4ecc:	5f e3       	ldi	r21, 0x3F	; 63
    4ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ed2:	88 23       	and	r24, r24
    4ed4:	2c f4       	brge	.+10     	; 0x4ee0 <H_LCD_void_Init+0x17a>
		__ticks = 1;
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	9c 8b       	std	Y+20, r25	; 0x14
    4edc:	8b 8b       	std	Y+19, r24	; 0x13
    4ede:	3f c0       	rjmp	.+126    	; 0x4f5e <H_LCD_void_Init+0x1f8>
	else if (__tmp > 65535)
    4ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    4ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    4ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    4ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    4ee8:	20 e0       	ldi	r18, 0x00	; 0
    4eea:	3f ef       	ldi	r19, 0xFF	; 255
    4eec:	4f e7       	ldi	r20, 0x7F	; 127
    4eee:	57 e4       	ldi	r21, 0x47	; 71
    4ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ef4:	18 16       	cp	r1, r24
    4ef6:	4c f5       	brge	.+82     	; 0x4f4a <H_LCD_void_Init+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ef8:	69 8d       	ldd	r22, Y+25	; 0x19
    4efa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4efc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4efe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	40 e2       	ldi	r20, 0x20	; 32
    4f06:	51 e4       	ldi	r21, 0x41	; 65
    4f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	bc 01       	movw	r22, r24
    4f12:	cd 01       	movw	r24, r26
    4f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f18:	dc 01       	movw	r26, r24
    4f1a:	cb 01       	movw	r24, r22
    4f1c:	9c 8b       	std	Y+20, r25	; 0x14
    4f1e:	8b 8b       	std	Y+19, r24	; 0x13
    4f20:	0f c0       	rjmp	.+30     	; 0x4f40 <H_LCD_void_Init+0x1da>
    4f22:	80 e9       	ldi	r24, 0x90	; 144
    4f24:	91 e0       	ldi	r25, 0x01	; 1
    4f26:	9a 8b       	std	Y+18, r25	; 0x12
    4f28:	89 8b       	std	Y+17, r24	; 0x11
    4f2a:	89 89       	ldd	r24, Y+17	; 0x11
    4f2c:	9a 89       	ldd	r25, Y+18	; 0x12
    4f2e:	01 97       	sbiw	r24, 0x01	; 1
    4f30:	f1 f7       	brne	.-4      	; 0x4f2e <H_LCD_void_Init+0x1c8>
    4f32:	9a 8b       	std	Y+18, r25	; 0x12
    4f34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f36:	8b 89       	ldd	r24, Y+19	; 0x13
    4f38:	9c 89       	ldd	r25, Y+20	; 0x14
    4f3a:	01 97       	sbiw	r24, 0x01	; 1
    4f3c:	9c 8b       	std	Y+20, r25	; 0x14
    4f3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f40:	8b 89       	ldd	r24, Y+19	; 0x13
    4f42:	9c 89       	ldd	r25, Y+20	; 0x14
    4f44:	00 97       	sbiw	r24, 0x00	; 0
    4f46:	69 f7       	brne	.-38     	; 0x4f22 <H_LCD_void_Init+0x1bc>
    4f48:	14 c0       	rjmp	.+40     	; 0x4f72 <H_LCD_void_Init+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f4a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f4c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f4e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f50:	98 8d       	ldd	r25, Y+24	; 0x18
    4f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	9c 8b       	std	Y+20, r25	; 0x14
    4f5c:	8b 8b       	std	Y+19, r24	; 0x13
    4f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    4f60:	9c 89       	ldd	r25, Y+20	; 0x14
    4f62:	98 8b       	std	Y+16, r25	; 0x10
    4f64:	8f 87       	std	Y+15, r24	; 0x0f
    4f66:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f68:	98 89       	ldd	r25, Y+16	; 0x10
    4f6a:	01 97       	sbiw	r24, 0x01	; 1
    4f6c:	f1 f7       	brne	.-4      	; 0x4f6a <H_LCD_void_Init+0x204>
    4f6e:	98 8b       	std	Y+16, r25	; 0x10
    4f70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	M_DIO_void_setPinValue(LCD_EN_PIN, DIO_LOW);
    4f72:	8c e0       	ldi	r24, 0x0C	; 12
    4f74:	60 e0       	ldi	r22, 0x00	; 0
    4f76:	0e 94 9c 18 	call	0x3138	; 0x3138 <M_DIO_void_setPinValue>
    4f7a:	80 e0       	ldi	r24, 0x00	; 0
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	a0 e2       	ldi	r26, 0x20	; 32
    4f80:	b1 e4       	ldi	r27, 0x41	; 65
    4f82:	8b 87       	std	Y+11, r24	; 0x0b
    4f84:	9c 87       	std	Y+12, r25	; 0x0c
    4f86:	ad 87       	std	Y+13, r26	; 0x0d
    4f88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f92:	20 e0       	ldi	r18, 0x00	; 0
    4f94:	30 e0       	ldi	r19, 0x00	; 0
    4f96:	4a e7       	ldi	r20, 0x7A	; 122
    4f98:	55 e4       	ldi	r21, 0x45	; 69
    4f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f9e:	dc 01       	movw	r26, r24
    4fa0:	cb 01       	movw	r24, r22
    4fa2:	8f 83       	std	Y+7, r24	; 0x07
    4fa4:	98 87       	std	Y+8, r25	; 0x08
    4fa6:	a9 87       	std	Y+9, r26	; 0x09
    4fa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4faa:	6f 81       	ldd	r22, Y+7	; 0x07
    4fac:	78 85       	ldd	r23, Y+8	; 0x08
    4fae:	89 85       	ldd	r24, Y+9	; 0x09
    4fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fb2:	20 e0       	ldi	r18, 0x00	; 0
    4fb4:	30 e0       	ldi	r19, 0x00	; 0
    4fb6:	40 e8       	ldi	r20, 0x80	; 128
    4fb8:	5f e3       	ldi	r21, 0x3F	; 63
    4fba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fbe:	88 23       	and	r24, r24
    4fc0:	2c f4       	brge	.+10     	; 0x4fcc <H_LCD_void_Init+0x266>
		__ticks = 1;
    4fc2:	81 e0       	ldi	r24, 0x01	; 1
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	9e 83       	std	Y+6, r25	; 0x06
    4fc8:	8d 83       	std	Y+5, r24	; 0x05
    4fca:	3f c0       	rjmp	.+126    	; 0x504a <H_LCD_void_Init+0x2e4>
	else if (__tmp > 65535)
    4fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    4fce:	78 85       	ldd	r23, Y+8	; 0x08
    4fd0:	89 85       	ldd	r24, Y+9	; 0x09
    4fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	3f ef       	ldi	r19, 0xFF	; 255
    4fd8:	4f e7       	ldi	r20, 0x7F	; 127
    4fda:	57 e4       	ldi	r21, 0x47	; 71
    4fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fe0:	18 16       	cp	r1, r24
    4fe2:	4c f5       	brge	.+82     	; 0x5036 <H_LCD_void_Init+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fec:	20 e0       	ldi	r18, 0x00	; 0
    4fee:	30 e0       	ldi	r19, 0x00	; 0
    4ff0:	40 e2       	ldi	r20, 0x20	; 32
    4ff2:	51 e4       	ldi	r21, 0x41	; 65
    4ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ff8:	dc 01       	movw	r26, r24
    4ffa:	cb 01       	movw	r24, r22
    4ffc:	bc 01       	movw	r22, r24
    4ffe:	cd 01       	movw	r24, r26
    5000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5004:	dc 01       	movw	r26, r24
    5006:	cb 01       	movw	r24, r22
    5008:	9e 83       	std	Y+6, r25	; 0x06
    500a:	8d 83       	std	Y+5, r24	; 0x05
    500c:	0f c0       	rjmp	.+30     	; 0x502c <H_LCD_void_Init+0x2c6>
    500e:	80 e9       	ldi	r24, 0x90	; 144
    5010:	91 e0       	ldi	r25, 0x01	; 1
    5012:	9c 83       	std	Y+4, r25	; 0x04
    5014:	8b 83       	std	Y+3, r24	; 0x03
    5016:	8b 81       	ldd	r24, Y+3	; 0x03
    5018:	9c 81       	ldd	r25, Y+4	; 0x04
    501a:	01 97       	sbiw	r24, 0x01	; 1
    501c:	f1 f7       	brne	.-4      	; 0x501a <H_LCD_void_Init+0x2b4>
    501e:	9c 83       	std	Y+4, r25	; 0x04
    5020:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5022:	8d 81       	ldd	r24, Y+5	; 0x05
    5024:	9e 81       	ldd	r25, Y+6	; 0x06
    5026:	01 97       	sbiw	r24, 0x01	; 1
    5028:	9e 83       	std	Y+6, r25	; 0x06
    502a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    502c:	8d 81       	ldd	r24, Y+5	; 0x05
    502e:	9e 81       	ldd	r25, Y+6	; 0x06
    5030:	00 97       	sbiw	r24, 0x00	; 0
    5032:	69 f7       	brne	.-38     	; 0x500e <H_LCD_void_Init+0x2a8>
    5034:	14 c0       	rjmp	.+40     	; 0x505e <H_LCD_void_Init+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5036:	6f 81       	ldd	r22, Y+7	; 0x07
    5038:	78 85       	ldd	r23, Y+8	; 0x08
    503a:	89 85       	ldd	r24, Y+9	; 0x09
    503c:	9a 85       	ldd	r25, Y+10	; 0x0a
    503e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5042:	dc 01       	movw	r26, r24
    5044:	cb 01       	movw	r24, r22
    5046:	9e 83       	std	Y+6, r25	; 0x06
    5048:	8d 83       	std	Y+5, r24	; 0x05
    504a:	8d 81       	ldd	r24, Y+5	; 0x05
    504c:	9e 81       	ldd	r25, Y+6	; 0x06
    504e:	9a 83       	std	Y+2, r25	; 0x02
    5050:	89 83       	std	Y+1, r24	; 0x01
    5052:	89 81       	ldd	r24, Y+1	; 0x01
    5054:	9a 81       	ldd	r25, Y+2	; 0x02
    5056:	01 97       	sbiw	r24, 0x01	; 1
    5058:	f1 f7       	brne	.-4      	; 0x5056 <H_LCD_void_Init+0x2f0>
    505a:	9a 83       	std	Y+2, r25	; 0x02
    505c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	H_LCD_void_sendCommand(LCD_Fun_set);
    505e:	80 e2       	ldi	r24, 0x20	; 32
    5060:	0e 94 91 26 	call	0x4d22	; 0x4d22 <H_LCD_void_sendCommand>

	H_LCD_void_sendCommand(0x0f);
    5064:	8f e0       	ldi	r24, 0x0F	; 15
    5066:	0e 94 91 26 	call	0x4d22	; 0x4d22 <H_LCD_void_sendCommand>

	H_LCD_void_sendCommand(0x01);
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	0e 94 91 26 	call	0x4d22	; 0x4d22 <H_LCD_void_sendCommand>

	H_LCD_void_sendCommand(0x06);
    5070:	86 e0       	ldi	r24, 0x06	; 6
    5072:	0e 94 91 26 	call	0x4d22	; 0x4d22 <H_LCD_void_sendCommand>
}
    5076:	aa 96       	adiw	r28, 0x2a	; 42
    5078:	0f b6       	in	r0, 0x3f	; 63
    507a:	f8 94       	cli
    507c:	de bf       	out	0x3e, r29	; 62
    507e:	0f be       	out	0x3f, r0	; 63
    5080:	cd bf       	out	0x3d, r28	; 61
    5082:	cf 91       	pop	r28
    5084:	df 91       	pop	r29
    5086:	08 95       	ret

00005088 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_s32Num){
    5088:	0f 93       	push	r16
    508a:	1f 93       	push	r17
    508c:	df 93       	push	r29
    508e:	cf 93       	push	r28
    5090:	cd b7       	in	r28, 0x3d	; 61
    5092:	de b7       	in	r29, 0x3e	; 62
    5094:	2c 97       	sbiw	r28, 0x0c	; 12
    5096:	0f b6       	in	r0, 0x3f	; 63
    5098:	f8 94       	cli
    509a:	de bf       	out	0x3e, r29	; 62
    509c:	0f be       	out	0x3f, r0	; 63
    509e:	cd bf       	out	0x3d, r28	; 61
    50a0:	69 87       	std	Y+9, r22	; 0x09
    50a2:	7a 87       	std	Y+10, r23	; 0x0a
    50a4:	8b 87       	std	Y+11, r24	; 0x0b
    50a6:	9c 87       	std	Y+12, r25	; 0x0c
	int i = -1;
    50a8:	8f ef       	ldi	r24, 0xFF	; 255
    50aa:	9f ef       	ldi	r25, 0xFF	; 255
    50ac:	9c 83       	std	Y+4, r25	; 0x04
    50ae:	8b 83       	std	Y+3, r24	; 0x03
	u8 digits[4];

	if(copy_s32Num == 0){
    50b0:	89 85       	ldd	r24, Y+9	; 0x09
    50b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b4:	ab 85       	ldd	r26, Y+11	; 0x0b
    50b6:	bc 85       	ldd	r27, Y+12	; 0x0c
    50b8:	00 97       	sbiw	r24, 0x00	; 0
    50ba:	a1 05       	cpc	r26, r1
    50bc:	b1 05       	cpc	r27, r1
    50be:	19 f4       	brne	.+6      	; 0x50c6 <H_LCD_void_sendIntNum+0x3e>
		H_LCD_void_sendData('0');
    50c0:	80 e3       	ldi	r24, 0x30	; 48
    50c2:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <H_LCD_void_sendData>
	}

	if(copy_s32Num <0){
    50c6:	89 85       	ldd	r24, Y+9	; 0x09
    50c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ca:	ab 85       	ldd	r26, Y+11	; 0x0b
    50cc:	bc 85       	ldd	r27, Y+12	; 0x0c
    50ce:	bb 23       	and	r27, r27
    50d0:	0c f0       	brlt	.+2      	; 0x50d4 <H_LCD_void_sendIntNum+0x4c>
    50d2:	42 c0       	rjmp	.+132    	; 0x5158 <H_LCD_void_sendIntNum+0xd0>
		H_LCD_void_sendData('-');
    50d4:	8d e2       	ldi	r24, 0x2D	; 45
    50d6:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <H_LCD_void_sendData>
		copy_s32Num *= -1;
    50da:	89 85       	ldd	r24, Y+9	; 0x09
    50dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    50de:	ab 85       	ldd	r26, Y+11	; 0x0b
    50e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    50e2:	b0 95       	com	r27
    50e4:	a0 95       	com	r26
    50e6:	90 95       	com	r25
    50e8:	81 95       	neg	r24
    50ea:	9f 4f       	sbci	r25, 0xFF	; 255
    50ec:	af 4f       	sbci	r26, 0xFF	; 255
    50ee:	bf 4f       	sbci	r27, 0xFF	; 255
    50f0:	89 87       	std	Y+9, r24	; 0x09
    50f2:	9a 87       	std	Y+10, r25	; 0x0a
    50f4:	ab 87       	std	Y+11, r26	; 0x0b
    50f6:	bc 87       	std	Y+12, r27	; 0x0c
    50f8:	2f c0       	rjmp	.+94     	; 0x5158 <H_LCD_void_sendIntNum+0xd0>
	}

	while(copy_s32Num){
	i++;
    50fa:	8b 81       	ldd	r24, Y+3	; 0x03
    50fc:	9c 81       	ldd	r25, Y+4	; 0x04
    50fe:	01 96       	adiw	r24, 0x01	; 1
    5100:	9c 83       	std	Y+4, r25	; 0x04
    5102:	8b 83       	std	Y+3, r24	; 0x03
	digits[i] = (copy_s32Num % 10)+'0';
    5104:	0b 81       	ldd	r16, Y+3	; 0x03
    5106:	1c 81       	ldd	r17, Y+4	; 0x04
    5108:	89 85       	ldd	r24, Y+9	; 0x09
    510a:	9a 85       	ldd	r25, Y+10	; 0x0a
    510c:	ab 85       	ldd	r26, Y+11	; 0x0b
    510e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5110:	2a e0       	ldi	r18, 0x0A	; 10
    5112:	30 e0       	ldi	r19, 0x00	; 0
    5114:	40 e0       	ldi	r20, 0x00	; 0
    5116:	50 e0       	ldi	r21, 0x00	; 0
    5118:	bc 01       	movw	r22, r24
    511a:	cd 01       	movw	r24, r26
    511c:	0e 94 26 2a 	call	0x544c	; 0x544c <__divmodsi4>
    5120:	dc 01       	movw	r26, r24
    5122:	cb 01       	movw	r24, r22
    5124:	28 2f       	mov	r18, r24
    5126:	20 5d       	subi	r18, 0xD0	; 208
    5128:	ce 01       	movw	r24, r28
    512a:	05 96       	adiw	r24, 0x05	; 5
    512c:	fc 01       	movw	r30, r24
    512e:	e0 0f       	add	r30, r16
    5130:	f1 1f       	adc	r31, r17
    5132:	20 83       	st	Z, r18
	copy_s32Num /= 10;
    5134:	89 85       	ldd	r24, Y+9	; 0x09
    5136:	9a 85       	ldd	r25, Y+10	; 0x0a
    5138:	ab 85       	ldd	r26, Y+11	; 0x0b
    513a:	bc 85       	ldd	r27, Y+12	; 0x0c
    513c:	2a e0       	ldi	r18, 0x0A	; 10
    513e:	30 e0       	ldi	r19, 0x00	; 0
    5140:	40 e0       	ldi	r20, 0x00	; 0
    5142:	50 e0       	ldi	r21, 0x00	; 0
    5144:	bc 01       	movw	r22, r24
    5146:	cd 01       	movw	r24, r26
    5148:	0e 94 26 2a 	call	0x544c	; 0x544c <__divmodsi4>
    514c:	da 01       	movw	r26, r20
    514e:	c9 01       	movw	r24, r18
    5150:	89 87       	std	Y+9, r24	; 0x09
    5152:	9a 87       	std	Y+10, r25	; 0x0a
    5154:	ab 87       	std	Y+11, r26	; 0x0b
    5156:	bc 87       	std	Y+12, r27	; 0x0c
	if(copy_s32Num <0){
		H_LCD_void_sendData('-');
		copy_s32Num *= -1;
	}

	while(copy_s32Num){
    5158:	89 85       	ldd	r24, Y+9	; 0x09
    515a:	9a 85       	ldd	r25, Y+10	; 0x0a
    515c:	ab 85       	ldd	r26, Y+11	; 0x0b
    515e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5160:	00 97       	sbiw	r24, 0x00	; 0
    5162:	a1 05       	cpc	r26, r1
    5164:	b1 05       	cpc	r27, r1
    5166:	49 f6       	brne	.-110    	; 0x50fa <H_LCD_void_sendIntNum+0x72>
	i++;
	digits[i] = (copy_s32Num % 10)+'0';
	copy_s32Num /= 10;
	}
	for(int j=i;j>=0;j--){
    5168:	8b 81       	ldd	r24, Y+3	; 0x03
    516a:	9c 81       	ldd	r25, Y+4	; 0x04
    516c:	9a 83       	std	Y+2, r25	; 0x02
    516e:	89 83       	std	Y+1, r24	; 0x01
    5170:	0f c0       	rjmp	.+30     	; 0x5190 <H_LCD_void_sendIntNum+0x108>
		H_LCD_void_sendData(digits[j]);
    5172:	29 81       	ldd	r18, Y+1	; 0x01
    5174:	3a 81       	ldd	r19, Y+2	; 0x02
    5176:	ce 01       	movw	r24, r28
    5178:	05 96       	adiw	r24, 0x05	; 5
    517a:	fc 01       	movw	r30, r24
    517c:	e2 0f       	add	r30, r18
    517e:	f3 1f       	adc	r31, r19
    5180:	80 81       	ld	r24, Z
    5182:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <H_LCD_void_sendData>
	while(copy_s32Num){
	i++;
	digits[i] = (copy_s32Num % 10)+'0';
	copy_s32Num /= 10;
	}
	for(int j=i;j>=0;j--){
    5186:	89 81       	ldd	r24, Y+1	; 0x01
    5188:	9a 81       	ldd	r25, Y+2	; 0x02
    518a:	01 97       	sbiw	r24, 0x01	; 1
    518c:	9a 83       	std	Y+2, r25	; 0x02
    518e:	89 83       	std	Y+1, r24	; 0x01
    5190:	89 81       	ldd	r24, Y+1	; 0x01
    5192:	9a 81       	ldd	r25, Y+2	; 0x02
    5194:	99 23       	and	r25, r25
    5196:	6c f7       	brge	.-38     	; 0x5172 <H_LCD_void_sendIntNum+0xea>
		H_LCD_void_sendData(digits[j]);
	}
}
    5198:	2c 96       	adiw	r28, 0x0c	; 12
    519a:	0f b6       	in	r0, 0x3f	; 63
    519c:	f8 94       	cli
    519e:	de bf       	out	0x3e, r29	; 62
    51a0:	0f be       	out	0x3f, r0	; 63
    51a2:	cd bf       	out	0x3d, r28	; 61
    51a4:	cf 91       	pop	r28
    51a6:	df 91       	pop	r29
    51a8:	1f 91       	pop	r17
    51aa:	0f 91       	pop	r16
    51ac:	08 95       	ret

000051ae <H_LCD_void_sendString>:

void H_LCD_void_sendString(const s8 * pstr){
    51ae:	df 93       	push	r29
    51b0:	cf 93       	push	r28
    51b2:	00 d0       	rcall	.+0      	; 0x51b4 <H_LCD_void_sendString+0x6>
    51b4:	cd b7       	in	r28, 0x3d	; 61
    51b6:	de b7       	in	r29, 0x3e	; 62
    51b8:	9a 83       	std	Y+2, r25	; 0x02
    51ba:	89 83       	std	Y+1, r24	; 0x01
	if(pstr!=NULL){
    51bc:	89 81       	ldd	r24, Y+1	; 0x01
    51be:	9a 81       	ldd	r25, Y+2	; 0x02
    51c0:	00 97       	sbiw	r24, 0x00	; 0
    51c2:	91 f0       	breq	.+36     	; 0x51e8 <H_LCD_void_sendString+0x3a>
    51c4:	0c c0       	rjmp	.+24     	; 0x51de <H_LCD_void_sendString+0x30>
		while(*pstr){
			H_LCD_void_sendData(*pstr++);
    51c6:	e9 81       	ldd	r30, Y+1	; 0x01
    51c8:	fa 81       	ldd	r31, Y+2	; 0x02
    51ca:	80 81       	ld	r24, Z
    51cc:	28 2f       	mov	r18, r24
    51ce:	89 81       	ldd	r24, Y+1	; 0x01
    51d0:	9a 81       	ldd	r25, Y+2	; 0x02
    51d2:	01 96       	adiw	r24, 0x01	; 1
    51d4:	9a 83       	std	Y+2, r25	; 0x02
    51d6:	89 83       	std	Y+1, r24	; 0x01
    51d8:	82 2f       	mov	r24, r18
    51da:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <H_LCD_void_sendData>
	}
}

void H_LCD_void_sendString(const s8 * pstr){
	if(pstr!=NULL){
		while(*pstr){
    51de:	e9 81       	ldd	r30, Y+1	; 0x01
    51e0:	fa 81       	ldd	r31, Y+2	; 0x02
    51e2:	80 81       	ld	r24, Z
    51e4:	88 23       	and	r24, r24
    51e6:	79 f7       	brne	.-34     	; 0x51c6 <H_LCD_void_sendString+0x18>
		}
	}
	else{

	}
}
    51e8:	0f 90       	pop	r0
    51ea:	0f 90       	pop	r0
    51ec:	cf 91       	pop	r28
    51ee:	df 91       	pop	r29
    51f0:	08 95       	ret

000051f2 <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col){
    51f2:	df 93       	push	r29
    51f4:	cf 93       	push	r28
    51f6:	00 d0       	rcall	.+0      	; 0x51f8 <H_LCD_void_gotoXY+0x6>
    51f8:	cd b7       	in	r28, 0x3d	; 61
    51fa:	de b7       	in	r29, 0x3e	; 62
    51fc:	89 83       	std	Y+1, r24	; 0x01
    51fe:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8Row<=2 &&copy_u8Row>0 &&copy_u8Col<=20 && copy_u8Col>0){
    5200:	89 81       	ldd	r24, Y+1	; 0x01
    5202:	83 30       	cpi	r24, 0x03	; 3
    5204:	f0 f4       	brcc	.+60     	; 0x5242 <H_LCD_void_gotoXY+0x50>
    5206:	89 81       	ldd	r24, Y+1	; 0x01
    5208:	88 23       	and	r24, r24
    520a:	d9 f0       	breq	.+54     	; 0x5242 <H_LCD_void_gotoXY+0x50>
    520c:	8a 81       	ldd	r24, Y+2	; 0x02
    520e:	85 31       	cpi	r24, 0x15	; 21
    5210:	c0 f4       	brcc	.+48     	; 0x5242 <H_LCD_void_gotoXY+0x50>
    5212:	8a 81       	ldd	r24, Y+2	; 0x02
    5214:	88 23       	and	r24, r24
    5216:	a9 f0       	breq	.+42     	; 0x5242 <H_LCD_void_gotoXY+0x50>
		H_LCD_void_sendCommand(0x80 + (copy_u8Row-1) + (copy_u8Col-1)*0x14);
    5218:	8a 81       	ldd	r24, Y+2	; 0x02
    521a:	88 2f       	mov	r24, r24
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	9c 01       	movw	r18, r24
    5220:	22 0f       	add	r18, r18
    5222:	33 1f       	adc	r19, r19
    5224:	22 0f       	add	r18, r18
    5226:	33 1f       	adc	r19, r19
    5228:	c9 01       	movw	r24, r18
    522a:	88 0f       	add	r24, r24
    522c:	99 1f       	adc	r25, r25
    522e:	88 0f       	add	r24, r24
    5230:	99 1f       	adc	r25, r25
    5232:	82 0f       	add	r24, r18
    5234:	93 1f       	adc	r25, r19
    5236:	98 2f       	mov	r25, r24
    5238:	89 81       	ldd	r24, Y+1	; 0x01
    523a:	89 0f       	add	r24, r25
    523c:	85 59       	subi	r24, 0x95	; 149
    523e:	0e 94 91 26 	call	0x4d22	; 0x4d22 <H_LCD_void_sendCommand>
	}
}
    5242:	0f 90       	pop	r0
    5244:	0f 90       	pop	r0
    5246:	cf 91       	pop	r28
    5248:	df 91       	pop	r29
    524a:	08 95       	ret

0000524c <H_LCD_void_creatCustomChar>:

void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode){
    524c:	df 93       	push	r29
    524e:	cf 93       	push	r28
    5250:	00 d0       	rcall	.+0      	; 0x5252 <H_LCD_void_creatCustomChar+0x6>
    5252:	00 d0       	rcall	.+0      	; 0x5254 <H_LCD_void_creatCustomChar+0x8>
    5254:	0f 92       	push	r0
    5256:	cd b7       	in	r28, 0x3d	; 61
    5258:	de b7       	in	r29, 0x3e	; 62
    525a:	9c 83       	std	Y+4, r25	; 0x04
    525c:	8b 83       	std	Y+3, r24	; 0x03
    525e:	6d 83       	std	Y+5, r22	; 0x05
	H_LCD_void_sendCommand(LCD_CGRAM_addr + (copy_u8charCode<<3));
    5260:	8d 81       	ldd	r24, Y+5	; 0x05
    5262:	88 0f       	add	r24, r24
    5264:	88 0f       	add	r24, r24
    5266:	88 0f       	add	r24, r24
    5268:	80 5c       	subi	r24, 0xC0	; 192
    526a:	0e 94 91 26 	call	0x4d22	; 0x4d22 <H_LCD_void_sendCommand>
	for(int i=0;i<8;i++){
    526e:	1a 82       	std	Y+2, r1	; 0x02
    5270:	19 82       	std	Y+1, r1	; 0x01
    5272:	0f c0       	rjmp	.+30     	; 0x5292 <H_LCD_void_creatCustomChar+0x46>
		H_LCD_void_sendData(ArrPattern[i]);
    5274:	29 81       	ldd	r18, Y+1	; 0x01
    5276:	3a 81       	ldd	r19, Y+2	; 0x02
    5278:	8b 81       	ldd	r24, Y+3	; 0x03
    527a:	9c 81       	ldd	r25, Y+4	; 0x04
    527c:	fc 01       	movw	r30, r24
    527e:	e2 0f       	add	r30, r18
    5280:	f3 1f       	adc	r31, r19
    5282:	80 81       	ld	r24, Z
    5284:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <H_LCD_void_sendData>
	}
}

void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode){
	H_LCD_void_sendCommand(LCD_CGRAM_addr + (copy_u8charCode<<3));
	for(int i=0;i<8;i++){
    5288:	89 81       	ldd	r24, Y+1	; 0x01
    528a:	9a 81       	ldd	r25, Y+2	; 0x02
    528c:	01 96       	adiw	r24, 0x01	; 1
    528e:	9a 83       	std	Y+2, r25	; 0x02
    5290:	89 83       	std	Y+1, r24	; 0x01
    5292:	89 81       	ldd	r24, Y+1	; 0x01
    5294:	9a 81       	ldd	r25, Y+2	; 0x02
    5296:	88 30       	cpi	r24, 0x08	; 8
    5298:	91 05       	cpc	r25, r1
    529a:	64 f3       	brlt	.-40     	; 0x5274 <H_LCD_void_creatCustomChar+0x28>
		H_LCD_void_sendData(ArrPattern[i]);
	}
	H_LCD_void_sendCommand(LCD_DDRAM_addr+ + copy_u8charCode);
    529c:	8d 81       	ldd	r24, Y+5	; 0x05
    529e:	80 58       	subi	r24, 0x80	; 128
    52a0:	0e 94 91 26 	call	0x4d22	; 0x4d22 <H_LCD_void_sendCommand>

}
    52a4:	0f 90       	pop	r0
    52a6:	0f 90       	pop	r0
    52a8:	0f 90       	pop	r0
    52aa:	0f 90       	pop	r0
    52ac:	0f 90       	pop	r0
    52ae:	cf 91       	pop	r28
    52b0:	df 91       	pop	r29
    52b2:	08 95       	ret

000052b4 <H_LCD_void_displayCustomChar>:

void H_LCD_void_displayCustomChar(u8 copy_u8charCode){
    52b4:	df 93       	push	r29
    52b6:	cf 93       	push	r28
    52b8:	0f 92       	push	r0
    52ba:	cd b7       	in	r28, 0x3d	; 61
    52bc:	de b7       	in	r29, 0x3e	; 62
    52be:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_sendData(copy_u8charCode);
    52c0:	89 81       	ldd	r24, Y+1	; 0x01
    52c2:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <H_LCD_void_sendData>
}
    52c6:	0f 90       	pop	r0
    52c8:	cf 91       	pop	r28
    52ca:	df 91       	pop	r29
    52cc:	08 95       	ret

000052ce <main>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
int main()
{
    52ce:	0f 93       	push	r16
    52d0:	df 93       	push	r29
    52d2:	cf 93       	push	r28
    52d4:	cd b7       	in	r28, 0x3d	; 61
    52d6:	de b7       	in	r29, 0x3e	; 62
	PORT_Init(PORT_Config_Arr);
    52d8:	89 e8       	ldi	r24, 0x89	; 137
    52da:	91 e0       	ldi	r25, 0x01	; 1
    52dc:	0e 94 c9 11 	call	0x2392	; 0x2392 <PORT_Init>
	TMU_vidInit();
    52e0:	0e 94 17 07 	call	0xe2e	; 0xe2e <TMU_vidInit>

	TMU_vidCreateTask(task1 , NULL , 100  , 0 , 0);
    52e4:	88 e9       	ldi	r24, 0x98	; 152
    52e6:	99 e2       	ldi	r25, 0x29	; 41
    52e8:	60 e0       	ldi	r22, 0x00	; 0
    52ea:	70 e0       	ldi	r23, 0x00	; 0
    52ec:	44 e6       	ldi	r20, 0x64	; 100
    52ee:	50 e0       	ldi	r21, 0x00	; 0
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	00 e0       	ldi	r16, 0x00	; 0
    52f4:	0e 94 34 07 	call	0xe68	; 0xe68 <TMU_vidCreateTask>
	TMU_vidCreateTask(task2 , NULL , 50  , 1 , 0);
    52f8:	87 ea       	ldi	r24, 0xA7	; 167
    52fa:	99 e2       	ldi	r25, 0x29	; 41
    52fc:	60 e0       	ldi	r22, 0x00	; 0
    52fe:	70 e0       	ldi	r23, 0x00	; 0
    5300:	42 e3       	ldi	r20, 0x32	; 50
    5302:	50 e0       	ldi	r21, 0x00	; 0
    5304:	21 e0       	ldi	r18, 0x01	; 1
    5306:	00 e0       	ldi	r16, 0x00	; 0
    5308:	0e 94 34 07 	call	0xe68	; 0xe68 <TMU_vidCreateTask>
	TMU_vidCreateTask(task3 , NULL , 300  , 2 , 0);
    530c:	86 eb       	ldi	r24, 0xB6	; 182
    530e:	99 e2       	ldi	r25, 0x29	; 41
    5310:	60 e0       	ldi	r22, 0x00	; 0
    5312:	70 e0       	ldi	r23, 0x00	; 0
    5314:	4c e2       	ldi	r20, 0x2C	; 44
    5316:	51 e0       	ldi	r21, 0x01	; 1
    5318:	22 e0       	ldi	r18, 0x02	; 2
    531a:	00 e0       	ldi	r16, 0x00	; 0
    531c:	0e 94 34 07 	call	0xe68	; 0xe68 <TMU_vidCreateTask>

	TMU_vidStartScheduler();
    5320:	0e 94 ad 07 	call	0xf5a	; 0xf5a <TMU_vidStartScheduler>
    5324:	80 e0       	ldi	r24, 0x00	; 0
    5326:	90 e0       	ldi	r25, 0x00	; 0
}
    5328:	cf 91       	pop	r28
    532a:	df 91       	pop	r29
    532c:	0f 91       	pop	r16
    532e:	08 95       	ret

00005330 <task1>:

void task1(void*p)
{
    5330:	df 93       	push	r29
    5332:	cf 93       	push	r28
    5334:	00 d0       	rcall	.+0      	; 0x5336 <task1+0x6>
    5336:	cd b7       	in	r28, 0x3d	; 61
    5338:	de b7       	in	r29, 0x3e	; 62
    533a:	9a 83       	std	Y+2, r25	; 0x02
    533c:	89 83       	std	Y+1, r24	; 0x01
	H_LED_void_toggle(LED_RED);
    533e:	80 e0       	ldi	r24, 0x00	; 0
    5340:	0e 94 19 24 	call	0x4832	; 0x4832 <H_LED_void_toggle>

}
    5344:	0f 90       	pop	r0
    5346:	0f 90       	pop	r0
    5348:	cf 91       	pop	r28
    534a:	df 91       	pop	r29
    534c:	08 95       	ret

0000534e <task2>:
void task2(void*p)
{
    534e:	df 93       	push	r29
    5350:	cf 93       	push	r28
    5352:	00 d0       	rcall	.+0      	; 0x5354 <task2+0x6>
    5354:	cd b7       	in	r28, 0x3d	; 61
    5356:	de b7       	in	r29, 0x3e	; 62
    5358:	9a 83       	std	Y+2, r25	; 0x02
    535a:	89 83       	std	Y+1, r24	; 0x01
	/*while(H_PB_PB_state_readPb(Button1,active_Low)==pressed){

	}*/
	H_LED_void_toggle(LED_BLUE);
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	0e 94 19 24 	call	0x4832	; 0x4832 <H_LED_void_toggle>
}
    5362:	0f 90       	pop	r0
    5364:	0f 90       	pop	r0
    5366:	cf 91       	pop	r28
    5368:	df 91       	pop	r29
    536a:	08 95       	ret

0000536c <task3>:
void task3(void*p)
{
    536c:	df 93       	push	r29
    536e:	cf 93       	push	r28
    5370:	00 d0       	rcall	.+0      	; 0x5372 <task3+0x6>
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
    5376:	9a 83       	std	Y+2, r25	; 0x02
    5378:	89 83       	std	Y+1, r24	; 0x01
	H_LED_void_toggle(LED_GREEN);
    537a:	82 e0       	ldi	r24, 0x02	; 2
    537c:	0e 94 19 24 	call	0x4832	; 0x4832 <H_LED_void_toggle>
}
    5380:	0f 90       	pop	r0
    5382:	0f 90       	pop	r0
    5384:	cf 91       	pop	r28
    5386:	df 91       	pop	r29
    5388:	08 95       	ret

0000538a <__mulsi3>:
    538a:	62 9f       	mul	r22, r18
    538c:	d0 01       	movw	r26, r0
    538e:	73 9f       	mul	r23, r19
    5390:	f0 01       	movw	r30, r0
    5392:	82 9f       	mul	r24, r18
    5394:	e0 0d       	add	r30, r0
    5396:	f1 1d       	adc	r31, r1
    5398:	64 9f       	mul	r22, r20
    539a:	e0 0d       	add	r30, r0
    539c:	f1 1d       	adc	r31, r1
    539e:	92 9f       	mul	r25, r18
    53a0:	f0 0d       	add	r31, r0
    53a2:	83 9f       	mul	r24, r19
    53a4:	f0 0d       	add	r31, r0
    53a6:	74 9f       	mul	r23, r20
    53a8:	f0 0d       	add	r31, r0
    53aa:	65 9f       	mul	r22, r21
    53ac:	f0 0d       	add	r31, r0
    53ae:	99 27       	eor	r25, r25
    53b0:	72 9f       	mul	r23, r18
    53b2:	b0 0d       	add	r27, r0
    53b4:	e1 1d       	adc	r30, r1
    53b6:	f9 1f       	adc	r31, r25
    53b8:	63 9f       	mul	r22, r19
    53ba:	b0 0d       	add	r27, r0
    53bc:	e1 1d       	adc	r30, r1
    53be:	f9 1f       	adc	r31, r25
    53c0:	bd 01       	movw	r22, r26
    53c2:	cf 01       	movw	r24, r30
    53c4:	11 24       	eor	r1, r1
    53c6:	08 95       	ret

000053c8 <__udivmodqi4>:
    53c8:	99 1b       	sub	r25, r25
    53ca:	79 e0       	ldi	r23, 0x09	; 9
    53cc:	04 c0       	rjmp	.+8      	; 0x53d6 <__udivmodqi4_ep>

000053ce <__udivmodqi4_loop>:
    53ce:	99 1f       	adc	r25, r25
    53d0:	96 17       	cp	r25, r22
    53d2:	08 f0       	brcs	.+2      	; 0x53d6 <__udivmodqi4_ep>
    53d4:	96 1b       	sub	r25, r22

000053d6 <__udivmodqi4_ep>:
    53d6:	88 1f       	adc	r24, r24
    53d8:	7a 95       	dec	r23
    53da:	c9 f7       	brne	.-14     	; 0x53ce <__udivmodqi4_loop>
    53dc:	80 95       	com	r24
    53de:	08 95       	ret

000053e0 <__udivmodhi4>:
    53e0:	aa 1b       	sub	r26, r26
    53e2:	bb 1b       	sub	r27, r27
    53e4:	51 e1       	ldi	r21, 0x11	; 17
    53e6:	07 c0       	rjmp	.+14     	; 0x53f6 <__udivmodhi4_ep>

000053e8 <__udivmodhi4_loop>:
    53e8:	aa 1f       	adc	r26, r26
    53ea:	bb 1f       	adc	r27, r27
    53ec:	a6 17       	cp	r26, r22
    53ee:	b7 07       	cpc	r27, r23
    53f0:	10 f0       	brcs	.+4      	; 0x53f6 <__udivmodhi4_ep>
    53f2:	a6 1b       	sub	r26, r22
    53f4:	b7 0b       	sbc	r27, r23

000053f6 <__udivmodhi4_ep>:
    53f6:	88 1f       	adc	r24, r24
    53f8:	99 1f       	adc	r25, r25
    53fa:	5a 95       	dec	r21
    53fc:	a9 f7       	brne	.-22     	; 0x53e8 <__udivmodhi4_loop>
    53fe:	80 95       	com	r24
    5400:	90 95       	com	r25
    5402:	bc 01       	movw	r22, r24
    5404:	cd 01       	movw	r24, r26
    5406:	08 95       	ret

00005408 <__udivmodsi4>:
    5408:	a1 e2       	ldi	r26, 0x21	; 33
    540a:	1a 2e       	mov	r1, r26
    540c:	aa 1b       	sub	r26, r26
    540e:	bb 1b       	sub	r27, r27
    5410:	fd 01       	movw	r30, r26
    5412:	0d c0       	rjmp	.+26     	; 0x542e <__udivmodsi4_ep>

00005414 <__udivmodsi4_loop>:
    5414:	aa 1f       	adc	r26, r26
    5416:	bb 1f       	adc	r27, r27
    5418:	ee 1f       	adc	r30, r30
    541a:	ff 1f       	adc	r31, r31
    541c:	a2 17       	cp	r26, r18
    541e:	b3 07       	cpc	r27, r19
    5420:	e4 07       	cpc	r30, r20
    5422:	f5 07       	cpc	r31, r21
    5424:	20 f0       	brcs	.+8      	; 0x542e <__udivmodsi4_ep>
    5426:	a2 1b       	sub	r26, r18
    5428:	b3 0b       	sbc	r27, r19
    542a:	e4 0b       	sbc	r30, r20
    542c:	f5 0b       	sbc	r31, r21

0000542e <__udivmodsi4_ep>:
    542e:	66 1f       	adc	r22, r22
    5430:	77 1f       	adc	r23, r23
    5432:	88 1f       	adc	r24, r24
    5434:	99 1f       	adc	r25, r25
    5436:	1a 94       	dec	r1
    5438:	69 f7       	brne	.-38     	; 0x5414 <__udivmodsi4_loop>
    543a:	60 95       	com	r22
    543c:	70 95       	com	r23
    543e:	80 95       	com	r24
    5440:	90 95       	com	r25
    5442:	9b 01       	movw	r18, r22
    5444:	ac 01       	movw	r20, r24
    5446:	bd 01       	movw	r22, r26
    5448:	cf 01       	movw	r24, r30
    544a:	08 95       	ret

0000544c <__divmodsi4>:
    544c:	97 fb       	bst	r25, 7
    544e:	09 2e       	mov	r0, r25
    5450:	05 26       	eor	r0, r21
    5452:	0e d0       	rcall	.+28     	; 0x5470 <__divmodsi4_neg1>
    5454:	57 fd       	sbrc	r21, 7
    5456:	04 d0       	rcall	.+8      	; 0x5460 <__divmodsi4_neg2>
    5458:	d7 df       	rcall	.-82     	; 0x5408 <__udivmodsi4>
    545a:	0a d0       	rcall	.+20     	; 0x5470 <__divmodsi4_neg1>
    545c:	00 1c       	adc	r0, r0
    545e:	38 f4       	brcc	.+14     	; 0x546e <__divmodsi4_exit>

00005460 <__divmodsi4_neg2>:
    5460:	50 95       	com	r21
    5462:	40 95       	com	r20
    5464:	30 95       	com	r19
    5466:	21 95       	neg	r18
    5468:	3f 4f       	sbci	r19, 0xFF	; 255
    546a:	4f 4f       	sbci	r20, 0xFF	; 255
    546c:	5f 4f       	sbci	r21, 0xFF	; 255

0000546e <__divmodsi4_exit>:
    546e:	08 95       	ret

00005470 <__divmodsi4_neg1>:
    5470:	f6 f7       	brtc	.-4      	; 0x546e <__divmodsi4_exit>
    5472:	90 95       	com	r25
    5474:	80 95       	com	r24
    5476:	70 95       	com	r23
    5478:	61 95       	neg	r22
    547a:	7f 4f       	sbci	r23, 0xFF	; 255
    547c:	8f 4f       	sbci	r24, 0xFF	; 255
    547e:	9f 4f       	sbci	r25, 0xFF	; 255
    5480:	08 95       	ret

00005482 <__prologue_saves__>:
    5482:	2f 92       	push	r2
    5484:	3f 92       	push	r3
    5486:	4f 92       	push	r4
    5488:	5f 92       	push	r5
    548a:	6f 92       	push	r6
    548c:	7f 92       	push	r7
    548e:	8f 92       	push	r8
    5490:	9f 92       	push	r9
    5492:	af 92       	push	r10
    5494:	bf 92       	push	r11
    5496:	cf 92       	push	r12
    5498:	df 92       	push	r13
    549a:	ef 92       	push	r14
    549c:	ff 92       	push	r15
    549e:	0f 93       	push	r16
    54a0:	1f 93       	push	r17
    54a2:	cf 93       	push	r28
    54a4:	df 93       	push	r29
    54a6:	cd b7       	in	r28, 0x3d	; 61
    54a8:	de b7       	in	r29, 0x3e	; 62
    54aa:	ca 1b       	sub	r28, r26
    54ac:	db 0b       	sbc	r29, r27
    54ae:	0f b6       	in	r0, 0x3f	; 63
    54b0:	f8 94       	cli
    54b2:	de bf       	out	0x3e, r29	; 62
    54b4:	0f be       	out	0x3f, r0	; 63
    54b6:	cd bf       	out	0x3d, r28	; 61
    54b8:	09 94       	ijmp

000054ba <__epilogue_restores__>:
    54ba:	2a 88       	ldd	r2, Y+18	; 0x12
    54bc:	39 88       	ldd	r3, Y+17	; 0x11
    54be:	48 88       	ldd	r4, Y+16	; 0x10
    54c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    54c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    54c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    54c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    54c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    54ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    54cc:	b9 84       	ldd	r11, Y+9	; 0x09
    54ce:	c8 84       	ldd	r12, Y+8	; 0x08
    54d0:	df 80       	ldd	r13, Y+7	; 0x07
    54d2:	ee 80       	ldd	r14, Y+6	; 0x06
    54d4:	fd 80       	ldd	r15, Y+5	; 0x05
    54d6:	0c 81       	ldd	r16, Y+4	; 0x04
    54d8:	1b 81       	ldd	r17, Y+3	; 0x03
    54da:	aa 81       	ldd	r26, Y+2	; 0x02
    54dc:	b9 81       	ldd	r27, Y+1	; 0x01
    54de:	ce 0f       	add	r28, r30
    54e0:	d1 1d       	adc	r29, r1
    54e2:	0f b6       	in	r0, 0x3f	; 63
    54e4:	f8 94       	cli
    54e6:	de bf       	out	0x3e, r29	; 62
    54e8:	0f be       	out	0x3f, r0	; 63
    54ea:	cd bf       	out	0x3d, r28	; 61
    54ec:	ed 01       	movw	r28, r26
    54ee:	08 95       	ret

000054f0 <_exit>:
    54f0:	f8 94       	cli

000054f2 <__stop_program>:
    54f2:	ff cf       	rjmp	.-2      	; 0x54f2 <__stop_program>
